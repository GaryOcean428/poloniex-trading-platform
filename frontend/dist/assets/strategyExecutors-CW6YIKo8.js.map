{"version":3,"file":"strategyExecutors-CW6YIKo8.js","sources":["../../src/utils/logger.ts","../../src/utils/strategyExecutors.ts"],"sourcesContent":["/**\n * Centralized logging utility for the application\n * Provides structured logging with different levels and proper error handling\n */\n\n/* eslint-disable no-console */\n\nexport type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL';\n\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  context?: string;\n  error?: Error;\n  data?: unknown;\n}\n\nexport class Logger {\n  private static instance: Logger;\n  private logLevel: LogLevel = process.env.NODE_ENV === 'production' ? 'INFO' : 'DEBUG';\n\n  private constructor() {}\n\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  public setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      DEBUG: 0,\n      INFO: 1,\n      WARN: 2,\n      ERROR: 3,\n      FATAL: 4,\n    };\n    return levels[level] >= levels[this.logLevel];\n  }\n\n  private createLogEntry(level: LogLevel, message: string, context?: string, error?: Error, data?: unknown): LogEntry {\n    return {\n      level,\n      message,\n      timestamp: new Date().toISOString(),\n      context,\n      error,\n      data,\n    };\n  }\n\n  private formatLogEntry(entry: LogEntry): string {\n    const { level, message, timestamp, context, error } = entry;\n    const contextStr = context ? `[${context}] ` : '';\n    const errorStr = error ? `\\nError: ${error.stack || error.message}` : '';\n    return `[${timestamp}] [${level}] ${contextStr}${message}${errorStr}`;\n  }\n\n  private logToConsole(entry: LogEntry): void {\n    const formatted = this.formatLogEntry(entry);\n\n    switch (entry.level) {\n      case 'DEBUG':\n        console.debug(formatted);\n        break;\n      case 'INFO':\n        console.info(formatted);\n        break;\n      case 'WARN':\n        // console.warn(formatted);\n        break;\n      case 'ERROR':\n      case 'FATAL':\n        // console.error(formatted);\n        break;\n    }\n  }\n\n  public debug(message: string, context?: string, data?: unknown): void {\n    if (this.shouldLog('DEBUG')) {\n      const entry = this.createLogEntry('DEBUG', message, context, undefined, data);\n      this.logToConsole(entry);\n    }\n  }\n\n  public info(message: string, context?: string, data?: unknown): void {\n    if (this.shouldLog('INFO')) {\n      const entry = this.createLogEntry('INFO', message, context, undefined, data);\n      this.logToConsole(entry);\n    }\n  }\n\n  public warn(message: string, context?: string, error?: Error, data?: unknown): void {\n    if (this.shouldLog('WARN')) {\n      const entry = this.createLogEntry('WARN', message, context, error, data);\n      this.logToConsole(entry);\n    }\n  }\n\n  public error(message: string, context?: string, error?: Error, data?: unknown): void {\n    if (this.shouldLog('ERROR')) {\n      const entry = this.createLogEntry('ERROR', message, context, error, data);\n      this.logToConsole(entry);\n    }\n  }\n\n  public fatal(message: string, context?: string, error?: Error, data?: unknown): void {\n    if (this.shouldLog('FATAL')) {\n      const entry = this.createLogEntry('FATAL', message, context, error, data);\n      this.logToConsole(entry);\n    }\n  }\n}\n\nexport const logger = Logger.getInstance();\n","import { Strategy, MarketData, StrategyParameters } from '@shared/types';\nimport { MovingAverageCrossoverParameters, RSIParameters, MACDParameters, BollingerBandsParameters } from '@/types';\nimport { logger } from '@/utils/logger';\n\n// Strategy result\nexport interface StrategyResult {\n  signal: 'BUY' | 'SELL' | null;\n  reason: string;\n  confidence: number;\n}\n\n/**\n * Execute a trading strategy based on market data\n */\nexport function executeStrategy(strategy: Strategy, marketData: MarketData[]): StrategyResult {\n  try {\n    // Add timeframe from strategy if not in parameters\n    const parameters = {\n      ...strategy.parameters,\n      timeframe: strategy.parameters.timeframe || '5m'\n    };\n\n    switch (strategy.algorithm || strategy.name) {\n      case 'MovingAverageCrossover':\n      case 'Moving Average Crossover':\n        return executeMovingAverageCrossover(parameters, marketData);\n      case 'RSI':\n        return executeRSI(parameters, marketData);\n      case 'MACD':\n        return executeMACD(parameters, marketData);\n      case 'BollingerBands':\n      case 'Bollinger Bands':\n        return executeBollingerBands(parameters, marketData);\n      case 'Custom':\n        return executeCustomStrategy();\n      default:\n        logger.error(`Unknown strategy algorithm: ${strategy.algorithm || strategy.name}`);\n        return { signal: null, reason: 'Unknown strategy type', confidence: 0 };\n    }\n  } catch (error) {\n    logger.error('Strategy execution error:', 'StrategyExecutor', error instanceof Error ? error : new Error(String(error)));\n    return { signal: null, reason: 'Strategy execution error', confidence: 0 };\n  }\n}\n\n/**\n * Moving Average Crossover Strategy\n * \n * Parameters:\n * - fastPeriod: Period for fast moving average\n * - slowPeriod: Period for slow moving average\n */\nfunction executeMovingAverageCrossover(\n  parameters: StrategyParameters,\n  marketData: MarketData[]\n): StrategyResult {\n  const params = parameters as unknown as MovingAverageCrossoverParameters;\n  const { fastPeriod = 9, slowPeriod = 21 } = params;\n  \n  if (marketData.length < slowPeriod + 2) {\n    return { \n      signal: null, \n      reason: 'Insufficient data for MA calculation', \n      confidence: 0 \n    };\n  }\n  \n  // Calculate fast and slow MAs\n  const fastMA = calculateSMA(marketData, fastPeriod);\n  const slowMA = calculateSMA(marketData, slowPeriod);\n  \n  // Guard: ensure we have at least two MA values for both series\n  if (fastMA.length < 2 || slowMA.length < 2) {\n    return {\n      signal: null,\n      reason: 'Insufficient MA history for crossover evaluation',\n      confidence: 0,\n    };\n  }\n  \n  // Get current and previous values\n  const currentFastMA = fastMA.at(-1);\n  const previousFastMA = fastMA.at(-2);\n  const currentSlowMA = slowMA.at(-1);\n  const previousSlowMA = slowMA.at(-2);\n  if (\n    currentFastMA === undefined ||\n    previousFastMA === undefined ||\n    currentSlowMA === undefined ||\n    previousSlowMA === undefined\n  ) {\n    return {\n      signal: null,\n      reason: 'MA values unavailable for crossover evaluation',\n      confidence: 0,\n    };\n  }\n  \n  // Check for crossover\n  const isBullishCrossover = previousFastMA <= previousSlowMA && currentFastMA > currentSlowMA;\n  const isBearishCrossover = previousFastMA >= previousSlowMA && currentFastMA < currentSlowMA;\n  \n  // Calculate confidence based on the distance between MAs\n  const maDifference = Math.abs(currentFastMA - currentSlowMA);\n  const maAverage = (currentFastMA + currentSlowMA) / 2;\n  const confidence = Math.min(0.9, maDifference / maAverage * 10);\n  \n  if (isBullishCrossover) {\n    return {\n      signal: 'BUY',\n      reason: `Bullish crossover: Fast MA (${fastPeriod}) crossed above Slow MA (${slowPeriod})`,\n      confidence\n    };\n  } else if (isBearishCrossover) {\n    return {\n      signal: 'SELL',\n      reason: `Bearish crossover: Fast MA (${fastPeriod}) crossed below Slow MA (${slowPeriod})`,\n      confidence\n    };\n  }\n  \n  return {\n    signal: null,\n    reason: 'No crossover detected',\n    confidence: 0\n  };\n}\n\n/**\n * RSI Strategy\n * \n * Parameters:\n * - period: Period for RSI calculation\n * - overbought: Overbought threshold\n * - oversold: Oversold threshold\n */\nfunction executeRSI(\n  parameters: StrategyParameters,\n  marketData: MarketData[]\n): StrategyResult {\n  const params = parameters as unknown as RSIParameters;\n  const { period = 14, overbought = 70, oversold = 30 } = params;\n  \n  if (marketData.length < period + 1) {\n    return { \n      signal: null, \n      reason: 'Insufficient data for RSI calculation', \n      confidence: 0 \n    };\n  }\n  \n  // Calculate RSI\n  const rsi = calculateRSI(marketData, period);\n  // Guard: ensure we have at least two RSI values\n  if (rsi.length < 2) {\n    return {\n      signal: null,\n      reason: 'Insufficient RSI history for signal evaluation',\n      confidence: 0,\n    };\n  }\n  const currentRSI = rsi.at(-1);\n  const previousRSI = rsi.at(-2);\n  if (currentRSI === undefined || previousRSI === undefined) {\n    return {\n      signal: null,\n      reason: 'RSI values unavailable for evaluation',\n      confidence: 0,\n    };\n  }\n  \n  // Calculate confidence based on distance from thresholds\n  let confidence = 0;\n  \n  if (currentRSI < oversold) {\n    confidence = Math.min(0.9, (oversold - currentRSI) / oversold);\n    \n    // Check if RSI is turning up from oversold\n    if (previousRSI < currentRSI) {\n      return {\n        signal: 'BUY',\n        reason: `RSI (${currentRSI.toFixed(2)}) turning up from oversold zone (${oversold})`,\n        confidence\n      };\n    }\n  } else if (currentRSI > overbought) {\n    confidence = Math.min(0.9, (currentRSI - overbought) / (100 - overbought));\n    \n    // Check if RSI is turning down from overbought\n    if (previousRSI > currentRSI) {\n      return {\n        signal: 'SELL',\n        reason: `RSI (${currentRSI.toFixed(2)}) turning down from overbought zone (${overbought})`,\n        confidence\n      };\n    }\n  }\n  \n  return {\n    signal: null,\n    reason: `RSI (${currentRSI.toFixed(2)}) is in neutral zone`,\n    confidence: 0\n  };\n}\n\n/**\n * MACD Strategy\n * \n * Parameters:\n * - fastPeriod: Period for fast EMA\n * - slowPeriod: Period for slow EMA\n * - signalPeriod: Period for signal line\n */\nfunction executeMACD(\n  parameters: StrategyParameters,\n  marketData: MarketData[]\n): StrategyResult {\n  const params = parameters as unknown as MACDParameters;\n  const { fastPeriod = 12, slowPeriod = 26, signalPeriod = 9 } = params;\n  \n  if (marketData.length < slowPeriod + signalPeriod) {\n    return { \n      signal: null, \n      reason: 'Insufficient data for MACD calculation', \n      confidence: 0 \n    };\n  }\n  \n  // Calculate MACD\n  const macdResult = calculateMACD(\n    marketData, \n    fastPeriod, \n    slowPeriod, \n    signalPeriod\n  );\n  // Guard: need at least two histogram values\n  const hist = macdResult.histogram;\n  if (hist.length < 2) {\n    return {\n      signal: null,\n      reason: 'Insufficient MACD histogram history for crossover evaluation',\n      confidence: 0,\n    };\n  }\n  const currentHistogram = hist.at(-1);\n  const previousHistogram = hist.at(-2);\n  if (currentHistogram === undefined || previousHistogram === undefined) {\n    return {\n      signal: null,\n      reason: 'MACD histogram values unavailable for evaluation',\n      confidence: 0,\n    };\n  }\n  \n  // Calculate confidence based on histogram value\n  const confidence = Math.min(0.9, Math.abs(currentHistogram) / 0.5);\n  \n  // Check for crossover\n  if (previousHistogram <= 0 && currentHistogram > 0) {\n    return {\n      signal: 'BUY',\n      reason: 'MACD histogram turned positive (bullish crossover)',\n      confidence\n    };\n  } else if (previousHistogram >= 0 && currentHistogram < 0) {\n    return {\n      signal: 'SELL',\n      reason: 'MACD histogram turned negative (bearish crossover)',\n      confidence\n    };\n  }\n  \n  return {\n    signal: null,\n    reason: 'No MACD crossover detected',\n    confidence: 0\n  };\n}\n\n/**\n * Bollinger Bands Strategy\n * \n * Parameters:\n * - period: Period for moving average\n * - stdDev: Number of standard deviations\n */\nfunction executeBollingerBands(\n  parameters: StrategyParameters,\n  marketData: MarketData[]\n): StrategyResult {\n  const params = parameters as unknown as BollingerBandsParameters;\n  const { period = 20, stdDev = 2 } = params;\n  \n  if (marketData.length < period) {\n    return { \n      signal: null, \n      reason: 'Insufficient data for Bollinger Bands calculation', \n      confidence: 0 \n    };\n  }\n  \n  // Calculate Bollinger Bands\n  const bands = calculateBollingerBands(marketData, period, stdDev);\n  // Guard: need at least two candles to compare price movement\n  if (marketData.length < 2) {\n    return {\n      signal: null,\n      reason: 'Insufficient candles for Bollinger Bands signal evaluation',\n      confidence: 0,\n    };\n  }\n  \n  const lastCandle = marketData.at(-1);\n  const prevCandle = marketData.at(-2);\n  if (!lastCandle || !prevCandle) {\n    return {\n      signal: null,\n      reason: 'Missing candles for Bollinger evaluation',\n      confidence: 0,\n    };\n  }\n  const currentPrice = lastCandle.close;\n  const previousPrice = prevCandle.close;\n  \n  const currentUpper = bands.upper.at(-1);\n  const currentLower = bands.lower.at(-1);\n  if (currentUpper === undefined || currentLower === undefined) {\n    return {\n      signal: null,\n      reason: 'Insufficient Bollinger Bands history for signal evaluation',\n      confidence: 0,\n    };\n  }\n  // Middle band value not used in this function\n  \n  // Calculate confidence based on position within bands\n  let confidence = 0;\n  \n  if (currentPrice < currentLower) {\n    confidence = Math.min(0.9, (currentLower - currentPrice) / (currentLower * 0.05));\n    \n    // Check if price is bouncing up from lower band\n    if (previousPrice < currentPrice) {\n      return {\n        signal: 'BUY',\n        reason: 'Price bouncing up from lower Bollinger Band',\n        confidence\n      };\n    }\n  } else if (currentPrice > currentUpper) {\n    confidence = Math.min(0.9, (currentPrice - currentUpper) / (currentUpper * 0.05));\n    \n    // Check if price is bouncing down from upper band\n    if (previousPrice > currentPrice) {\n      return {\n        signal: 'SELL',\n        reason: 'Price bouncing down from upper Bollinger Band',\n        confidence\n      };\n    }\n  }\n  \n  return {\n    signal: null,\n    reason: 'Price within Bollinger Bands, no signal',\n    confidence: 0\n  };\n}\n\n/**\n * Custom Strategy\n * \n * This is a placeholder for user-defined strategies\n */\nfunction executeCustomStrategy(\n  // Remove unused parameters to fix type errors\n): StrategyResult {\n  // This is where users can implement their own strategy logic\n  return {\n    signal: null,\n    reason: 'Custom strategy not implemented',\n    confidence: 0\n  };\n}\n\n// Technical indicator calculations\n\n/**\n * Calculate Simple Moving Average (SMA)\n */\nfunction calculateSMA(marketData: MarketData[], period: number): number[] {\n  const prices = marketData.map(candle => candle.close);\n  const sma = [];\n  \n  for (let i = period - 1; i < prices.length; i++) {\n    const sum = prices.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0);\n    sma.push(sum / period);\n  }\n  \n  return sma;\n}\n\n/**\n * Calculate Exponential Moving Average (EMA)\n */\nfunction calculateEMA(marketData: MarketData[], period: number): number[] {\n  const prices = marketData.map(candle => candle.close);\n  const ema: number[] = [];\n  const multiplier = 2 / (period + 1);\n  \n  if (prices.length < period || period <= 0) return ema;\n  \n  // Start with SMA\n  const seedSlice = prices.slice(0, period);\n  const firstSMA = seedSlice.reduce((a, b) => a + b, 0) / period;\n  ema.push(firstSMA);\n  \n  // Calculate EMA\n  for (let i = period; i < prices.length; i++) {\n    const price = prices[i];\n    const prev = ema.at(-1);\n    if (price === undefined || prev === undefined) continue;\n    ema.push((price - prev) * multiplier + prev);\n  }\n  \n  return ema;\n}\n\n/**\n * Calculate Relative Strength Index (RSI)\n */\nfunction calculateRSI(marketData: MarketData[], period: number): number[] {\n  const prices = marketData.map(candle => candle.close);\n  const gains = [];\n  const losses = [];\n  const rsi = [];\n  \n  // Calculate price changes\n  for (let i = 1; i < prices.length; i++) {\n    const curr = prices[i];\n    const prev = prices[i - 1];\n    if (curr === undefined || prev === undefined) continue;\n    const change = curr - prev;\n    gains.push(change > 0 ? change : 0);\n    losses.push(change < 0 ? -change : 0);\n  }\n  \n  // Calculate initial averages\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  \n  // Calculate first RSI\n  let rs = avgGain / (avgLoss === 0 ? 0.001 : avgLoss); // Avoid division by zero\n  rsi.push(100 - (100 / (1 + rs)));\n  \n  // Calculate remaining RSIs\n  for (let i = period; i < gains.length; i++) {\n    const g = gains[i];\n    const l = losses[i];\n    if (g === undefined || l === undefined) continue;\n    avgGain = ((avgGain * (period - 1)) + g) / period;\n    avgLoss = ((avgLoss * (period - 1)) + l) / period;\n    \n    rs = avgGain / (avgLoss === 0 ? 0.001 : avgLoss);\n    rsi.push(100 - (100 / (1 + rs)));\n  }\n  \n  return rsi;\n}\n\n/**\n * Calculate MACD (Moving Average Convergence Divergence)\n */\nfunction calculateMACD(\n  marketData: MarketData[],\n  fastPeriod: number,\n  slowPeriod: number,\n  signalPeriod: number\n): { macd: number[], signal: number[], histogram: number[] } {\n  // Calculate EMAs\n  const fastEMA = calculateEMA(marketData, fastPeriod);\n  const slowEMA = calculateEMA(marketData, slowPeriod);\n  \n  // Calculate MACD line\n  const macd: number[] = [];\n  const offset = slowEMA.length - fastEMA.length;\n  for (let i = 0; i < fastEMA.length; i++) {\n    if (i >= 0 && offset >= 0 && i < fastEMA.length) {\n      const fastVal = fastEMA[i];\n      const slowIdx = i + offset;\n      const slowVal = slowEMA[slowIdx];\n      if (fastVal !== undefined && slowVal !== undefined) {\n        macd.push(fastVal - slowVal);\n      }\n    }\n  }\n  \n  // Calculate signal line (EMA of MACD)\n  const signal: number[] = [];\n  const sigMultiplier = 2 / (signalPeriod + 1);\n  \n  if (macd.length >= signalPeriod && signalPeriod > 0) {\n    // Start with SMA of MACD\n    const seed = macd.slice(0, signalPeriod);\n    const firstSignalSMA = seed.reduce((a, b) => a + b, 0) / signalPeriod;\n    signal.push(firstSignalSMA);\n    \n    // Calculate signal EMA\n    for (let i = signalPeriod; i < macd.length; i++) {\n      const macdVal = macd[i];\n      const prevSig = signal.at(-1);\n      if (macdVal === undefined || prevSig === undefined) continue;\n      signal.push((macdVal - prevSig) * sigMultiplier + prevSig);\n    }\n  }\n  \n  // Calculate histogram\n  const histogram: number[] = [];\n  const histOffset = macd.length - signal.length;\n  for (let i = 0; i < signal.length; i++) {\n    const macdIdx = i + histOffset;\n    const macdVal = macd[macdIdx];\n    const sigVal = signal[i];\n    if (macdVal === undefined || sigVal === undefined) continue;\n    histogram.push(macdVal - sigVal);\n  }\n  \n  return { macd, signal, histogram };\n}\n\n/**\n * Calculate Bollinger Bands\n */\nfunction calculateBollingerBands(\n  marketData: MarketData[],\n  period: number,\n  stdDev: number\n): { middle: number[], upper: number[], lower: number[] } {\n  const prices = marketData.map(candle => candle.close);\n  const middle = calculateSMA(marketData, period);\n  const upper: number[] = [];\n  const lower: number[] = [];\n  \n  if (prices.length >= period && period > 0) {\n    for (let i = period - 1; i < prices.length; i++) {\n      const slice = prices.slice(i - period + 1, i + 1);\n      const sum = slice.reduce((a, b) => a + b, 0);\n      const mean = sum / period;\n      \n      // Calculate standard deviation\n      const squaredDiffs = slice.map(price => Math.pow(price - mean, 2));\n      const variance = squaredDiffs.reduce((a, b) => a + b, 0) / period;\n      const standardDeviation = Math.sqrt(variance);\n      \n      const middleIdx = i - (period - 1);\n      const middleVal = middle[middleIdx];\n      if (middleVal === undefined) continue;\n      upper.push(middleVal + (standardDeviation * stdDev));\n      lower.push(middleVal - (standardDeviation * stdDev));\n    }\n  }\n  \n  return { middle, upper, lower };\n}"],"names":["_Logger","__publicField","level","levels","message","context","error","data","entry","timestamp","contextStr","errorStr","formatted","Logger","logger","executeStrategy","strategy","marketData","parameters","executeMovingAverageCrossover","executeRSI","executeMACD","executeBollingerBands","executeCustomStrategy","params","fastPeriod","slowPeriod","fastMA","calculateSMA","slowMA","currentFastMA","previousFastMA","currentSlowMA","previousSlowMA","isBullishCrossover","isBearishCrossover","maDifference","maAverage","confidence","period","overbought","oversold","rsi","calculateRSI","currentRSI","previousRSI","signalPeriod","hist","calculateMACD","currentHistogram","previousHistogram","stdDev","bands","calculateBollingerBands","lastCandle","prevCandle","currentPrice","previousPrice","currentUpper","currentLower","prices","candle","sma","i","sum","a","b","calculateEMA","ema","multiplier","firstSMA","price","prev","gains","losses","curr","change","avgGain","avgLoss","rs","g","l","fastEMA","slowEMA","macd","offset","fastVal","slowIdx","slowVal","signal","sigMultiplier","firstSignalSMA","macdVal","prevSig","histogram","histOffset","macdIdx","sigVal","middle","upper","lower","slice","mean","variance","standardDeviation","middleIdx","middleVal"],"mappings":"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"}