{"version":3,"file":"Strategies-CGTU5x-K.js","sources":["../../src/components/strategy/NewStrategyForm.tsx","../../src/components/strategy/StrategyDetails.tsx","../../src/services/backtestService.ts","../../src/pages/Strategies.tsx"],"sourcesContent":["import { X } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { Strategy, StrategyParameters, StrategyType } from '@shared/types';\n\ninterface NewStrategyFormProps {\n  onClose: () => void;\n}\n\nconst NewStrategyForm: React.FC<NewStrategyFormProps> = ({ onClose }) => {\n  const { addStrategy } = useTradingContext();\n  const [name, setName] = useState('');\n  const [type, setType] = useState<StrategyType>(StrategyType.MA_CROSSOVER);\n  const [pair, setPair] = useState('BTC-USDT');\n\n  // MA Crossover parameters\n  const [shortPeriod, setShortPeriod] = useState(10);\n  const [longPeriod, setLongPeriod] = useState(50);\n\n  // RSI parameters\n  const [rsiPeriod, setRsiPeriod] = useState(14);\n  const [overbought, setOverbought] = useState(70);\n  const [oversold, setOversold] = useState(30);\n\n  // Breakout parameters\n  const [lookbackPeriod, setLookbackPeriod] = useState(24);\n  const [breakoutThreshold, setBreakoutThreshold] = useState(2.5);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    let parameters: Record<string, string | number> = { pair };\n\n    switch (type)\n    {\n      case StrategyType.MA_CROSSOVER:\n        parameters = {\n          ...parameters,\n          shortPeriod,\n          longPeriod\n        };\n        break;\n      case StrategyType.RSI:\n        parameters = {\n          ...parameters,\n          period: rsiPeriod,\n          overbought,\n          oversold\n        };\n        break;\n      case StrategyType.BREAKOUT:\n        parameters = {\n          ...parameters,\n          lookbackPeriod,\n          breakoutThreshold\n        };\n        break;\n    }\n\n    // Map strategy type to the expected format\n    const getStrategyTypeAndAlgorithm = (strategyType: StrategyType) => {\n      switch (strategyType) {\n        case StrategyType.MA_CROSSOVER:\n          return { type: 'automated' as const, algorithm: 'MovingAverageCrossover' as const };\n        case StrategyType.RSI:\n          return { type: 'automated' as const, algorithm: 'RSI' as const };\n        case StrategyType.MACD:\n          return { type: 'automated' as const, algorithm: 'MACD' as const };\n        case StrategyType.BOLLINGER_BANDS:\n          return { type: 'automated' as const, algorithm: 'BollingerBands' as const };\n        default:\n          return { type: 'automated' as const, algorithm: 'Custom' as const };\n      }\n    };\n\n    const { type: strategyType, algorithm } = getStrategyTypeAndAlgorithm(type);\n\n    const newStrategy: Strategy = {\n      id: Date.now().toString(),\n      name,\n      type: strategyType,\n      algorithm,\n      active: true,\n      parameters: parameters as unknown as StrategyParameters,\n      performance: {\n        totalPnL: 0, // FIXME strict: Use standardized naming\n        winRate: 0,\n        tradesCount: 0 // FIXME strict: Add required property\n      }\n    };\n\n    addStrategy(newStrategy);\n    onClose();\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Create New Strategy</h2>\n        <button\n          className=\"p-1.5 rounded-md bg-neutral-100 text-neutral-500 hover:bg-neutral-200\"\n          onClick={onClose}\n          aria-label=\"Close form\"\n        >\n          <X className=\"h-5 w-5\" />\n        </button>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700\">Strategy Name</label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"mt-1 block w-full input\"\n              placeholder=\"My Trading Strategy\"\n              required\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700\">Strategy Type</label>\n              <select\n                value={type}\n                onChange={(e) => setType(e.target.value as StrategyType)}\n                className=\"mt-1 block w-full select\"\n                title=\"Select strategy type\"\n              >\n                <option value={StrategyType.MA_CROSSOVER}>Moving Average Crossover</option>\n                <option value={StrategyType.RSI}>RSI</option>\n                <option value={StrategyType.BREAKOUT}>Breakout</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700\">Trading Pair</label>\n              <select\n                value={pair}\n                onChange={(e) => setPair(e.target.value)}\n                className=\"mt-1 block w-full select\"\n                title=\"Select trading pair\"\n              >\n                <option value=\"BTC-USDT\">BTC-USDT</option>\n                <option value=\"ETH-USDT\">ETH-USDT</option>\n                <option value=\"SOL-USDT\">SOL-USDT</option>\n              </select>\n            </div>\n          </div>\n\n          {type === StrategyType.MA_CROSSOVER && (\n            <div className=\"bg-blue-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">Moving Average Crossover Parameters</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Short Period</label>\n                  <input\n                    type=\"number\"\n                    value={shortPeriod}\n                    onChange={(e) => setShortPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    max={longPeriod - 1}\n                    title=\"Short period for moving average\"\n                    placeholder=\"10\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Long Period</label>\n                  <input\n                    type=\"number\"\n                    value={longPeriod}\n                    onChange={(e) => setLongPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min={shortPeriod + 1}\n                    title=\"Long period for moving average\"\n                    placeholder=\"50\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {type === StrategyType.RSI && (\n            <div className=\"bg-purple-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">RSI Parameters</h3>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Period</label>\n                  <input\n                    type=\"number\"\n                    value={rsiPeriod}\n                    onChange={(e) => setRsiPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    title=\"RSI calculation period\"\n                    placeholder=\"14\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Overbought</label>\n                  <input\n                    type=\"number\"\n                    value={overbought}\n                    onChange={(e) => setOverbought(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min={oversold + 1}\n                    max=\"100\"\n                    title=\"Overbought threshold\"\n                    placeholder=\"70\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Oversold</label>\n                  <input\n                    type=\"number\"\n                    value={oversold}\n                    onChange={(e) => setOversold(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"0\"\n                    max={overbought - 1}\n                    title=\"Oversold threshold\"\n                    placeholder=\"30\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {type === StrategyType.BREAKOUT && (\n            <div className=\"bg-orange-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">Breakout Parameters</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Lookback Period</label>\n                  <input\n                    type=\"number\"\n                    value={lookbackPeriod}\n                    onChange={(e) => setLookbackPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    title=\"Lookback period for breakout calculation\"\n                    placeholder=\"24\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Breakout Threshold (%)</label>\n                  <input\n                    type=\"number\"\n                    value={breakoutThreshold}\n                    onChange={(e) => setBreakoutThreshold(parseFloat(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"0.1\"\n                    step=\"0.1\"\n                    title=\"Breakout threshold percentage\"\n                    placeholder=\"2.5\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Create Strategy\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default NewStrategyForm;","import { BarChart2, Clock, History, RefreshCw, Sparkles, Zap } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { Strategy, MovingAverageCrossoverParameters, RSIParameters, BreakoutParameters } from '@shared/types';\nimport { BacktestResult } from '../../types/backtest';\nimport PriceChart from '../charts/PriceChart';\n\ninterface StrategyDetailsProps {\n  strategy: Strategy;\n  backtestResults?: BacktestResult | null;\n  isBacktesting?: boolean;\n  isOptimizing?: boolean;\n}\n\nconst StrategyDetails: React.FC<StrategyDetailsProps> = ({\n  strategy,\n  backtestResults,\n  isBacktesting,\n  isOptimizing\n}) => {\n  const { marketData } = useTradingContext();\n  const [timeframe, setTimeframe] = useState<'1h' | '4h' | '1d'>('1h');\n  const [chartType, setChartType] = useState<'candlestick' | 'line'>('candlestick');\n\n  const getStrategyTypeIcon = (algorithm?: string) => {\n    switch (algorithm) {\n      case 'MovingAverageCrossover':\n        return <Zap className=\"h-6 w-6 text-blue-500\" />;\n      case 'RSI':\n        return <BarChart2 className=\"h-6 w-6 text-purple-500\" />;\n      case 'Breakout':\n        return <RefreshCw className=\"h-6 w-6 text-orange-500\" />;\n      default:\n        return <Zap className=\"h-6 w-6 text-neutral-500\" />;\n    }\n  };\n\n  const getStrategyTypeName = (algorithm?: string) => {\n    switch (algorithm) {\n      case 'MovingAverageCrossover':\n        return 'Moving Average Crossover';\n      case 'RSI':\n        return 'Relative Strength Index (RSI)';\n      case 'Breakout':\n        return 'Breakout';\n      default:\n        return algorithm || 'Custom';\n    }\n  };\n\n  const getStrategyDescription = (algorithm?: string) => {\n    switch (algorithm) {\n      case 'MovingAverageCrossover':\n        return 'This strategy generates signals when the short-term moving average crosses the long-term moving average. A buy signal is generated when the short MA crosses above the long MA, and a sell signal when it crosses below.';\n      case 'RSI':\n        return 'The RSI strategy measures the magnitude of recent price changes to evaluate overbought or oversold conditions. It generates buy signals when RSI crosses above the oversold threshold and sell signals when it crosses below the overbought threshold.';\n      case 'Breakout':\n        return 'The Breakout strategy identifies significant price movements beyond established support and resistance levels. It generates buy signals when the price breaks above resistance and sell signals when it breaks below support.';\n      default:\n        return 'Custom trading strategy.';\n    }\n  };\n\n  const renderParameters = () => {\n    switch (strategy.algorithm) {\n      case 'MovingAverageCrossover':\n        const maParams = strategy.parameters as MovingAverageCrossoverParameters;\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Short Period</div>\n              <div className=\"text-lg font-semibold\">{maParams.shortPeriod || maParams.fastPeriod}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Long Period</div>\n              <div className=\"text-lg font-semibold\">{maParams.longPeriod || maParams.slowPeriod}</div>\n            </div>\n          </div>\n        );\n      case 'RSI':\n        const rsiParams = strategy.parameters as RSIParameters;\n        return (\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Period</div>\n              <div className=\"text-lg font-semibold\">{rsiParams.period}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Overbought</div>\n              <div className=\"text-lg font-semibold\">{rsiParams.overbought}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Oversold</div>\n              <div className=\"text-lg font-semibold\">{rsiParams.oversold}</div>\n            </div>\n          </div>\n        );\n      case 'Breakout':\n      case 'BREAKOUT' as any: // Support both naming conventions\n        const breakoutParams = strategy.parameters as BreakoutParameters;\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Lookback Period</div>\n              <div className=\"text-lg font-semibold\">{breakoutParams.lookbackPeriod}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Breakout Threshold</div>\n              <div className=\"text-lg font-semibold\">{breakoutParams.breakoutThreshold}%</div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-start justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <div className=\"mr-4\">\n            {getStrategyTypeIcon(strategy.algorithm)}\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold\">{strategy.name}</h2>\n            <div className=\"flex items-center text-sm text-neutral-500 mt-1\">\n              <span>{getStrategyTypeName(strategy.algorithm)}</span>\n              <span className=\"mx-2\">•</span>\n              <span>{strategy.parameters.pair}</span>\n              <span className=\"mx-2\">•</span>\n              <Clock className=\"h-4 w-4 mr-1\" />\n              <span>Created {strategy.createdAt ? new Date(strategy.createdAt).toLocaleDateString() : 'Unknown'}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          {isBacktesting && (\n            <div className=\"flex items-center text-blue-600\">\n              <History className=\"h-4 w-4 mr-1 animate-spin\" />\n              <span>Backtesting...</span>\n            </div>\n          )}\n          {isOptimizing && (\n            <div className=\"flex items-center text-purple-600\">\n              <Sparkles className=\"h-4 w-4 mr-1 animate-spin\" />\n              <span>Optimizing...</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mb-6\">\n        <div className=\"text-neutral-700 mb-4\">{getStrategyDescription(strategy.algorithm)}</div>\n        {renderParameters()}\n      </div>\n\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-3\">Performance</h3>\n        <div className=\"grid grid-cols-3 gap-4 mb-4\">\n          {strategy.performance && (\n            <>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Total P&L</div>\n                <div className={`text-lg font-semibold ${\n                  strategy.performance.totalPnL >= 0 ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {strategy.performance.totalPnL >= 0 ? '+' : ''}\n                  {strategy.performance.totalPnL.toFixed(2)}\n                </div>\n              </div>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Win Rate</div>\n                <div className=\"text-lg font-semibold\">\n                  {(strategy.performance.winRate * 100).toFixed(1)}%\n                </div>\n              </div>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Total Trades</div>\n                <div className=\"text-lg font-semibold\">{strategy.performance.tradesCount}</div>\n              </div>\n            </>\n          )}\n        </div>\n\n        {backtestResults && (\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium mb-3\">Backtest Results</h4>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-sm text-neutral-600\">Initial Balance</div>\n                <div className=\"font-medium\">${backtestResults.initialBalance.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Final Balance</div>\n                <div className=\"font-medium\">${backtestResults.finalBalance.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Total Trades</div>\n                <div className=\"font-medium\">{backtestResults.totalTrades}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Win Rate</div>\n                <div className=\"font-medium\">{(backtestResults.winRate * 100).toFixed(1)}%</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Max Drawdown</div>\n                <div className=\"font-medium\">{(backtestResults.maxDrawdown * 100).toFixed(1)}%</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Sharpe Ratio</div>\n                <div className=\"font-medium\">{backtestResults.sharpeRatio.toFixed(2)}</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-medium mb-3\">Market Data</h3>\n        <div className=\"flex space-x-4 mb-4\">\n          <select\n            value={timeframe}\n            onChange={(e) => setTimeframe(e.target.value as '1h' | '4h' | '1d')}\n            className=\"px-3 py-1 border border-neutral-300 rounded-md\"\n            title=\"Select timeframe\"\n          >\n            <option value=\"1h\">1 Hour</option>\n            <option value=\"4h\">4 Hours</option>\n            <option value=\"1d\">1 Day</option>\n          </select>\n          <select\n            value={chartType}\n            onChange={(e) => setChartType(e.target.value as 'candlestick' | 'line')}\n            className=\"px-3 py-1 border border-neutral-300 rounded-md\"\n            title=\"Select chart type\"\n          >\n            <option value=\"candlestick\">Candlestick</option>\n            <option value=\"line\">Line</option>\n          </select>\n        </div>\n        <PriceChart data={marketData} pair={strategy.parameters.pair} />\n      </div>\n    </div>\n  );\n};\n\nexport default StrategyDetails;\n","import { Strategy, MarketData } from '@/types';\nimport { BacktestResult, BacktestTrade, BacktestOptions, OptimizationResult } from '@/types/backtest';\n\n// Define BacktestMetrics interface\ninterface BacktestMetrics {\n  dailyReturns: number[];\n  monthlyReturns: number[];\n  volatility: number;\n  profitFactor: number;\n  recoveryFactor: number;\n  averageWin: number;\n  averageLoss: number;\n  largestWin: number;\n  largestLoss: number;\n  averageHoldingPeriod: number;\n  bestMonth: number;\n  worstMonth: number;\n}\nimport { executeStrategy } from '@/utils/strategyExecutors';\nimport { poloniexApi } from '@/services/poloniexAPI';\n\nexport class BacktestService {\n  private static instance: BacktestService;\n  private historicalData: Map<string, MarketData[]> = new Map();\n  \n  private constructor() {}\n  \n  public static getInstance(): BacktestService {\n    if (!BacktestService.instance) {\n      BacktestService.instance = new BacktestService();\n    }\n    return BacktestService.instance;\n  }\n  \n  /**\n   * Run backtest for a strategy\n   */\n  public async runBacktest(\n    strategy: Strategy,\n    options: BacktestOptions\n  ): Promise<BacktestResult> {\n      // Load historical data\n      const data = await this.getHistoricalData(\n        strategy.parameters.pair,\n        options.startDate,\n        options.endDate\n      );\n      \n      // Initialize backtest state\n      let balance = options.initialBalance;\n      // Position tracking variable (not currently used but kept for future implementation)\n      // let position = 0;\n      const trades: BacktestTrade[] = [];\n      \n      // Run strategy on each candle\n      for (let i = 50; i < data.length; i++) {\n        const marketData = data.slice(0, i + 1);\n        const signal = executeStrategy(strategy, marketData);\n        const candle = data[i];\n        if (!candle) continue;\n        \n        if (signal.signal) {\n          const price = candle.close;\n          const amount = this.calculatePositionSize(balance, price);\n          \n          // Execute trade\n          const trade = this.executeTrade(\n            signal.signal,\n            price,\n            amount,\n            balance,\n            options.feeRate,\n            options.slippage,\n            candle.timestamp ?? Date.now()\n          );\n          \n          // Update state\n          trades.push(trade);\n          balance = trade.balance;\n          // Update position tracking (commented out as variable is not used)\n          // position = signal.signal === 'BUY' ? amount : 0;\n        }\n      }\n      \n      // Calculate final metrics\n      const metrics = this.calculateMetrics(trades, options.initialBalance);\n      \n      return {\n        strategyId: strategy.id,\n        startDate: options.startDate,\n        endDate: options.endDate,\n        initialBalance: options.initialBalance,\n        finalBalance: balance,\n        totalPnL: balance - options.initialBalance,\n        totalTrades: trades.length,\n        winningTrades: trades.filter(t => t.pnl > 0).length,\n        losingTrades: trades.filter(t => t.pnl < 0).length,\n        winRate: trades.filter(t => t.pnl > 0).length / trades.length,\n        maxDrawdown: this.calculateMaxDrawdown(trades),\n        sharpeRatio: this.calculateSharpeRatio(trades),\n        trades,\n        metrics\n      };\n  }\n  \n  /**\n   * Optimize strategy parameters\n   */\n  public async optimizeStrategy(\n    strategy: Strategy,\n    options: BacktestOptions,\n    parameterRanges: Record<string, [number, number, number]>\n  ): Promise<OptimizationResult[]> {\n    const results: OptimizationResult[] = [];\n    \n    // Generate parameter combinations\n    const combinations = this.generateParameterCombinations(parameterRanges);\n    \n    // Test each combination\n    for (const params of combinations) {\n      const testStrategy = {\n        ...strategy,\n        parameters: {\n          ...strategy.parameters,\n          ...params\n        }\n      };\n      \n      const result = await this.runBacktest(testStrategy, options);\n      \n      results.push({\n        parameters: params,\n        performance: result\n      });\n    }\n    \n    // Sort by performance (Sharpe ratio)\n    return results.sort((a, b) => b.performance.sharpeRatio - a.performance.sharpeRatio);\n  }\n  \n  /**\n   * Get historical market data\n   */\n  private async getHistoricalData(\n    pair: string,\n    startDate: string,\n    endDate: string\n  ): Promise<MarketData[]> {\n    const cacheKey = `${pair}-${startDate}-${endDate}`;\n    \n    if (this.historicalData.has(cacheKey)) {\n      return this.historicalData.get(cacheKey)!;\n    }\n    \n    const data = await poloniexApi.getHistoricalData(pair, startDate, endDate);\n    this.historicalData.set(cacheKey, data);\n    \n    return data;\n  }\n  \n  /**\n   * Calculate position size based on available balance\n   */\n  private calculatePositionSize(balance: number, price: number): number {\n    // Use 50% of available balance by default\n    return (balance * 0.5) / price;\n  }\n  \n  /**\n   * Execute a simulated trade\n   */\n  private executeTrade(\n    type: 'BUY' | 'SELL',\n    price: number,\n    amount: number,\n    balance: number,\n    feeRate: number,\n    slippage: number,\n    timestamp: number\n  ): BacktestTrade {\n    // Apply slippage to price\n    const executionPrice = type === 'BUY' \n      ? price * (1 + slippage)\n      : price * (1 - slippage);\n    \n    const total = executionPrice * amount;\n    const fee = total * feeRate;\n    \n    // Calculate PnL\n    const pnl = type === 'SELL' ? total - fee - (price * amount) : 0;\n    const pnlPercent = pnl / (price * amount) * 100;\n    \n    // Update balance\n    const newBalance = type === 'BUY'\n      ? balance - total - fee\n      : balance + total - fee;\n    \n    return {\n      id: `trade-${timestamp}-${type}`,\n      entryPrice: executionPrice,\n      exitPrice: type === 'SELL' ? executionPrice : null,\n      entryTime: new Date(timestamp).toISOString(),\n      exitTime: type === 'SELL' ? new Date(timestamp).toISOString() : null,\n      side: type === 'BUY' ? 'long' : 'short',\n      status: type === 'SELL' ? 'closed' : 'open',\n      pnl,\n      pnlPercent,\n      balance: newBalance,\n      size: amount,\n      fee,\n      // Legacy compatibility\n      timestamp,\n      type,\n      price: executionPrice,\n      amount,\n      total\n    };\n  }\n  \n  /**\n   * Calculate backtest metrics\n   */\n  private calculateMetrics(trades: BacktestTrade[], initialBalance: number): BacktestMetrics {\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n    \n    const winningTrades = trades.filter(t => t.pnl > 0);\n    const losingTrades = trades.filter(t => t.pnl < 0);\n    \n    return {\n      dailyReturns,\n      monthlyReturns,\n      volatility: this.calculateVolatility(dailyReturns),\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor: this.calculateRecoveryFactor(trades, initialBalance),\n      averageWin: winningTrades.reduce((sum, t) => sum + t.pnl, 0) / winningTrades.length,\n      averageLoss: losingTrades.reduce((sum, t) => sum + t.pnl, 0) / losingTrades.length,\n      largestWin: Math.max(...trades.map(t => t.pnl)),\n      largestLoss: Math.min(...trades.map(t => t.pnl)),\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: Math.max(...monthlyReturns),\n      worstMonth: Math.min(...monthlyReturns)\n    };\n  }\n  \n  /**\n   * Calculate maximum drawdown\n   */\n  private calculateMaxDrawdown(trades: BacktestTrade[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    \n    trades.forEach(trade => {\n      if (trade.balance > peak) {\n        peak = trade.balance;\n      }\n      \n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n    \n    return maxDrawdown;\n  }\n  \n  /**\n   * Calculate Sharpe ratio\n   */\n  private calculateSharpeRatio(trades: BacktestTrade[]): number {\n    const returns = trades.map(t => t.pnlPercent);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length\n    );\n    \n    return avgReturn / stdDev;\n  }\n  \n  /**\n   * Calculate daily returns\n   */\n  private calculateDailyReturns(trades: BacktestTrade[]): number[] {\n    const dailyPnL = new Map<string, number>();\n    \n    trades.forEach(trade => {\n      const timestamp = trade.timestamp ?? Date.now();\n      const [datePart] = new Date(timestamp).toISOString().split('T');\n      if (!datePart) return; // safety for strict indexing\n      const currentPnL = dailyPnL.get(datePart) || 0;\n      dailyPnL.set(datePart, currentPnL + trade.pnl);\n    });\n    \n    return Array.from(dailyPnL.values());\n  }\n  \n  /**\n   * Calculate monthly returns\n   */\n  private calculateMonthlyReturns(trades: BacktestTrade[]): number[] {\n    const monthlyPnL = new Map<string, number>();\n    \n    trades.forEach(trade => {\n      const timestamp = trade.timestamp ?? Date.now();\n      const date = new Date(timestamp);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      const currentPnL = monthlyPnL.get(monthKey) || 0;\n      monthlyPnL.set(monthKey, currentPnL + trade.pnl);\n    });\n    \n    return Array.from(monthlyPnL.values());\n  }\n  \n  /**\n   * Calculate volatility\n   */\n  private calculateVolatility(returns: number[]): number {\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length\n    );\n  }\n  \n  /**\n   * Calculate profit factor\n   */\n  private calculateProfitFactor(trades: BacktestTrade[]): number {\n    const grossProfit = trades\n      .filter(t => t.pnl > 0)\n      .reduce((sum, t) => sum + t.pnl, 0);\n      \n    const grossLoss = Math.abs(\n      trades\n        .filter(t => t.pnl < 0)\n        .reduce((sum, t) => sum + t.pnl, 0)\n    );\n    \n    return grossProfit / grossLoss;\n  }\n  \n  /**\n   * Calculate recovery factor\n   */\n  private calculateRecoveryFactor(trades: BacktestTrade[], initialBalance: number): number {\n    const maxDrawdown = this.calculateMaxDrawdown(trades);\n    const lastTrade = trades[trades.length - 1];\n    if (!lastTrade) return 0;\n    \n    const netProfit = lastTrade.balance - initialBalance;\n    \n    if (maxDrawdown === 0) return netProfit > 0 ? Infinity : 0;\n    return netProfit / (maxDrawdown * initialBalance);\n  }\n  \n  /**\n   * Calculate average holding period\n   */\n  private calculateAverageHoldingPeriod(trades: BacktestTrade[]): number {\n    let totalHoldingTime = 0;\n    let positions = 0;\n    \n    for (let i = 0; i < trades.length - 1; i++) {\n      const currentTrade = trades[i];\n      const nextTrade = trades[i + 1];\n      if (!currentTrade || !nextTrade) continue;\n      if (currentTrade.type === 'BUY' && nextTrade.type === 'SELL') {\n        const currentTimestamp = currentTrade.timestamp ?? Date.now();\n        const nextTimestamp = nextTrade.timestamp ?? Date.now();\n        totalHoldingTime += nextTimestamp - currentTimestamp;\n        positions++;\n      }\n    }\n    \n    if (positions === 0) return 0; // Avoid division by zero\n    return totalHoldingTime / positions / (1000 * 60 * 60); // Convert to hours\n  }\n  \n  /**\n   * Generate parameter combinations for optimization\n   */\n  private generateParameterCombinations(\n    ranges: Record<string, [number, number, number]>\n  ): Record<string, number>[] {\n    const combinations: Record<string, number>[] = [];\n    const parameters = Object.keys(ranges);\n    \n    const generateCombination = (\n      current: Record<string, number>,\n      paramIndex: number\n    ) => {\n      if (paramIndex === parameters.length) {\n        combinations.push({...current});\n        return;\n      }\n      \n      const param = parameters[paramIndex];\n      if (param === undefined) {\n        generateCombination(current, paramIndex + 1);\n        return;\n      }\n      const tuple = ranges[param];\n      if (!tuple) {\n        // Skip unknown parameter key\n        generateCombination(current, paramIndex + 1);\n        return;\n      }\n      const [min, max, step] = tuple;\n      \n      for (let value = min; value <= max; value += step) {\n        // safe assignment into current params map\n        current[param] = value;\n        generateCombination(current, paramIndex + 1);\n      }\n    };\n    \n    generateCombination({}, 0);\n    return combinations;\n  }\n}\n\nexport const backtestService = BacktestService.getInstance();","import { useState } from 'react';\nimport { useTradingContext } from '../hooks/useTradingContext';\nimport { Strategy, StrategyType } from '../types';\nimport { Plus, Zap, Settings as SettingsIcon, BarChart2, Play, Pause, Trash2, History, Sparkles } from 'lucide-react';\nimport NewStrategyForm from '../components/strategy/NewStrategyForm';\nimport StrategyDetails from '../components/strategy/StrategyDetails';\nimport { backtestService } from '../services/backtestService';\nimport { BacktestResult } from '../types/backtest';\n\nconst Strategies: React.FC = () => {\n  const { strategies, activeStrategies, toggleStrategyActive, removeStrategy } = useTradingContext();\n  const [showNewStrategyForm, setShowNewStrategyForm] = useState(false);\n  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);\n  const [backtestResults, setBacktestResults] = useState<BacktestResult | null>(null);\n  const [isBacktesting, setIsBacktesting] = useState(false);\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  \n  const runBacktest = async (strategy: Strategy) => {\n    setIsBacktesting(true);\n    try {\n      const result = await backtestService.runBacktest(strategy, {\n        startDate: '2023-01-01',\n        endDate: '2024-01-01',\n        initialBalance: 10000,\n        feeRate: 0.001,\n        slippage: 0.001,\n        useHistoricalData: true\n      });\n      setBacktestResults(result);\n    } catch (_error) {\n      // console.error('Backtest failed:', error);\n    } finally {\n      setIsBacktesting(false);\n    }\n  };\n  \n  const optimizeStrategy = async (strategy: Strategy) => {\n    setIsOptimizing(true);\n    try {\n      // Fix the parameter ranges to match the expected type\n      const parameterRanges: Record<string, [number, number, number]> = {\n        shortPeriod: [5, 20, 5],\n        longPeriod: [20, 100, 20]\n      };\n      \n      const results = await backtestService.optimizeStrategy(\n        strategy,\n        {\n          startDate: '2023-01-01',\n          endDate: '2024-01-01',\n          initialBalance: 10000,\n          feeRate: 0.001,\n          slippage: 0.001,\n          useHistoricalData: true\n        },\n        parameterRanges\n      );\n      \n      // Update strategy with best parameters\n      if (results.length > 0) {\n        const bestResult = results[0];\n        if (!bestResult) return; // Satisfy noUncheckedIndexedAccess\n        strategy.parameters = {\n          ...strategy.parameters,\n          ...bestResult.parameters\n        };\n      }\n    } catch (_error) {\n      // console.error('Optimization failed:', error);\n    } finally {\n      setIsOptimizing(false);\n    }\n  };\n\n  const handleSelectStrategy = (strategy: Strategy) => {\n    setSelectedStrategy(strategy);\n    setShowNewStrategyForm(false);\n  };\n  \n  const getStrategyTypeIcon = (type: string) => {\n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        return <Zap className=\"h-5 w-5 text-blue-500\" />;\n      case StrategyType.RSI:\n        return <BarChart2 className=\"h-5 w-5 text-purple-500\" />;\n      case StrategyType.BREAKOUT:\n        return <SettingsIcon className=\"h-5 w-5 text-orange-500\" />;\n      default:\n        return <Zap className=\"h-5 w-5 text-neutral-500\" />;\n    }\n  };\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      <div className=\"md:col-span-1\">\n        <div className=\"trading-card mb-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold\">Your Strategies</h2>\n            <button \n              className=\"btn btn-primary flex items-center\"\n              onClick={() => {\n                setShowNewStrategyForm(true);\n                setSelectedStrategy(null);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              New\n            </button>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {strategies.map(strategy => (\n              <div \n                key={strategy.id} \n                className={`border rounded-md p-3 cursor-pointer transition-colors duration-200 ${\n                  selectedStrategy?.id === strategy.id \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-border-subtle hover:border-blue-300'\n                }`}\n                onClick={() => handleSelectStrategy(strategy)}\n              >\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <div className=\"mr-3\">\n                      {getStrategyTypeIcon(strategy.type)}\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">{strategy.name}</h3>\n                      <p className=\"text-xs text-neutral-500\">{strategy.parameters.pair}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <button \n                      className={`p-1.5 rounded-md ${\n                        activeStrategies.includes(strategy.id)\n                          ? 'bg-green-100 text-green-700'\n                          : 'bg-neutral-100 text-neutral-500'\n                      }`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleStrategyActive(strategy.id);\n                      }}\n                    >\n                      {activeStrategies.includes(strategy.id) ? (\n                        <Pause className=\"h-4 w-4\" />\n                      ) : (\n                        <Play className=\"h-4 w-4\" />\n                      )}\n                    </button>\n                    <button\n                      className=\"p-1.5 rounded-md bg-blue-100 text-blue-700 hover:bg-blue-200\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        runBacktest(strategy);\n                      }}\n                      disabled={isBacktesting}\n                    >\n                      <History className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"p-1.5 rounded-md bg-purple-100 text-purple-700 hover:bg-purple-200\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        optimizeStrategy(strategy);\n                      }}\n                      disabled={isOptimizing}\n                    >\n                      <Sparkles className=\"h-4 w-4\" />\n                    </button>\n                    <button \n                      className=\"p-1.5 rounded-md bg-neutral-100 text-neutral-500 hover:bg-red-100 hover:text-red-700\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeStrategy(strategy.id);\n                        if (selectedStrategy?.id === strategy.id) {\n                          setSelectedStrategy(null);\n                        }\n                      }}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {strategies.length === 0 && (\n              <div className=\"text-center py-6 text-neutral-500\">\n                <Zap className=\"h-12 w-12 mx-auto text-neutral-300 mb-2\" />\n                <p>You don't have any strategies yet</p>\n                <button \n                  className=\"mt-2 btn btn-primary\"\n                  onClick={() => setShowNewStrategyForm(true)}\n                >\n                  Create your first strategy\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"md:col-span-2\">\n        <div className=\"trading-card\">\n          {showNewStrategyForm ? (\n            <NewStrategyForm onClose={() => setShowNewStrategyForm(false)} />\n          ) : selectedStrategy ? (\n            <StrategyDetails \n              strategy={selectedStrategy}\n              backtestResults={backtestResults}\n              isBacktesting={isBacktesting}\n              isOptimizing={isOptimizing}\n            />\n          ) : (\n            <div className=\"text-center py-12 text-neutral-500\">\n              <SettingsIcon className=\"h-16 w-16 mx-auto text-neutral-300 mb-3\" />\n              <h3 className=\"text-xl font-medium mb-2\">No Strategy Selected</h3>\n              <p>Select a strategy from the list or create a new one to get started</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Strategies;\n"],"names":["NewStrategyForm","onClose","addStrategy","useTradingContext","name","setName","useState","type","setType","StrategyType","pair","setPair","shortPeriod","setShortPeriod","longPeriod","setLongPeriod","rsiPeriod","setRsiPeriod","overbought","setOverbought","oversold","setOversold","lookbackPeriod","setLookbackPeriod","breakoutThreshold","setBreakoutThreshold","handleSubmit","e","parameters","getStrategyTypeAndAlgorithm","strategyType","algorithm","newStrategy","jsxs","jsx","X","StrategyDetails","strategy","backtestResults","isBacktesting","isOptimizing","marketData","timeframe","setTimeframe","chartType","setChartType","getStrategyTypeIcon","Zap","BarChart2","RefreshCw","getStrategyTypeName","getStrategyDescription","renderParameters","maParams","rsiParams","breakoutParams","Clock","History","Sparkles","Fragment","PriceChart","_BacktestService","__publicField","options","data","balance","trades","i","signal","executeStrategy","candle","price","amount","trade","metrics","t","parameterRanges","results","combinations","params","testStrategy","result","a","b","startDate","endDate","cacheKey","poloniexApi","feeRate","slippage","timestamp","executionPrice","total","fee","pnl","pnlPercent","newBalance","initialBalance","dailyReturns","monthlyReturns","winningTrades","losingTrades","sum","peak","maxDrawdown","drawdown","returns","avgReturn","r","stdDev","dailyPnL","datePart","currentPnL","monthlyPnL","date","monthKey","grossProfit","grossLoss","lastTrade","netProfit","totalHoldingTime","positions","currentTrade","nextTrade","currentTimestamp","nextTimestamp","ranges","generateCombination","current","paramIndex","param","tuple","min","max","step","value","BacktestService","backtestService","Strategies","strategies","activeStrategies","toggleStrategyActive","removeStrategy","showNewStrategyForm","setShowNewStrategyForm","selectedStrategy","setSelectedStrategy","setBacktestResults","setIsBacktesting","setIsOptimizing","runBacktest","optimizeStrategy","bestResult","handleSelectStrategy","SettingsIcon","Plus","Pause","Play","Trash2"],"mappings":"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"}