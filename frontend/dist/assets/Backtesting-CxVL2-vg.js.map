{"version":3,"file":"Backtesting-CxVL2-vg.js","sources":["../../src/services/advancedBacktestService.ts","../../src/components/backtesting/HistoricalDataManager.tsx","../../src/pages/Backtesting.tsx"],"sourcesContent":["import { poloniexApi } from \"@/services/poloniexAPI\";\nimport { MarketData, Strategy } from \"@/types\";\nimport {\n  BacktestOptions,\n  BacktestResult,\n  BacktestTrade,\n} from \"@/types/backtest\";\nimport { executeStrategy } from \"@/utils/strategyExecutors\";\n\n// Enhanced metrics for Phase 4\ninterface AdvancedBacktestMetrics {\n  // Existing metrics\n  dailyReturns: number[];\n  monthlyReturns: number[];\n  volatility: number;\n  profitFactor: number;\n  recoveryFactor: number;\n  averageWin: number;\n  averageLoss: number;\n  largestWin: number;\n  largestLoss: number;\n  averageHoldingPeriod: number;\n  bestMonth: number;\n  worstMonth: number;\n\n  // Phase 4 Advanced metrics\n  valueAtRisk95: number;\n  valueAtRisk99: number;\n  conditionalVaR95: number;\n  conditionalVaR99: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n  omegaRatio: number;\n  kappa3: number;\n  gainToPainRatio: number;\n  ulcerIndex: number;\n  martinRatio: number;\n  painIndex: number;\n  burkeRatio: number;\n  modifiedSharpe: number;\n  treynorRatio: number;\n  informationRatio: number;\n  modigliani: number;\n  excessReturnOnVaR: number;\n  conditionalSharpe: number;\n  skewness: number;\n  kurtosis: number;\n  tailRatio: number;\n  upnessIndex: number;\n  upsidePotentialRatio: number;\n}\n\n// Enhanced historical data management\ninterface HistoricalDataRequest {\n  symbols: string[];\n  timeframes: string[];\n  startDate: string;\n  endDate: string;\n  includeVolume: boolean;\n  adjustForSplits: boolean;\n  adjustForDividends: boolean;\n}\n\ninterface MultiTimeframeData {\n  [timeframe: string]: MarketData[];\n}\n\n// Portfolio backtesting interface\ninterface PortfolioBacktestOptions extends BacktestOptions {\n  strategies: Strategy[];\n  weights: number[];\n  rebalanceFrequency: \"daily\" | \"weekly\" | \"monthly\" | \"quarterly\";\n  correlationThreshold: number;\n  maxAllocation: number;\n}\n\ninterface PortfolioBacktestResult {\n  portfolioBalance: number;\n  strategyReturns: BacktestResult[];\n  correlationMatrix: number[][];\n  diversificationRatio: number;\n  portfolioSharpe: number;\n  portfolioVolatility: number;\n  maxPortfolioDrawdown: number;\n  rebalanceEvents: RebalanceEvent[];\n}\n\ninterface RebalanceEvent {\n  date: string;\n  newWeights: number[];\n  reason: string;\n  transactionCosts: number;\n}\n\n// Stress testing interface\ninterface StressTestScenario {\n  name: string;\n  marketConditions: {\n    volatilityMultiplier: number;\n    returnShift: number;\n    correlationShift: number;\n    liquidityImpact: number;\n  };\n}\n\nexport class AdvancedBacktestService {\n  private static instance: AdvancedBacktestService;\n  private historicalDataCache: Map<string, MultiTimeframeData> = new Map();\n  // Cache for correlation calculations (for future optimization)\n  // private _correlationCache: Map<string, number> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): AdvancedBacktestService {\n    if (!AdvancedBacktestService.instance) {\n      AdvancedBacktestService.instance = new AdvancedBacktestService();\n    }\n    return AdvancedBacktestService.instance;\n  }\n\n  /**\n   * Enhanced backtest with advanced metrics calculation\n   */\n  public async runAdvancedBacktest(\n    strategy: Strategy,\n    options: BacktestOptions\n  ): Promise<BacktestResult & { advancedMetrics: AdvancedBacktestMetrics }> {\n    // Load enhanced historical data\n    const data = await this.getMultiTimeframeData({\n      symbols: [strategy.parameters.pair],\n      timeframes: [\"1h\", \"4h\", \"1d\"],\n      startDate: options.startDate,\n      endDate: options.endDate,\n      includeVolume: true,\n      adjustForSplits: true,\n      adjustForDividends: true,\n    });\n\n    const primaryData = data[\"1h\"] || data[\"4h\"] || data[\"1d\"];\n    if (!primaryData || primaryData.length === 0) {\n      throw new Error(\"No historical data available\");\n    }\n\n    // Initialize backtest state\n    let balance = options.initialBalance;\n    const trades: BacktestTrade[] = [];\n    let highWaterMark = balance;\n    const equityCurve: {\n      timestamp: number;\n      balance: number;\n      drawdown: number;\n    }[] = [];\n\n    // Enhanced execution with market microstructure considerations\n    for (let i = 50; i < primaryData.length; i++) {\n      const marketData = primaryData.slice(0, i + 1);\n      const signal = executeStrategy(strategy, marketData);\n\n      if (signal.signal) {\n        const candle = primaryData[i];\n        if (!candle) continue;\n        const price = candle.close;\n        const amount = this.calculateOptimalPositionSize(\n          balance,\n          price,\n          marketData\n        );\n\n        // Execute trade with enhanced slippage and market impact models\n        const trade = this.executeAdvancedTrade(\n          signal.signal,\n          price,\n          amount,\n          balance,\n          options,\n          marketData[marketData.length - 1] as MarketData\n        );\n\n        trades.push(trade);\n        balance = trade.balance;\n\n        // Update high water mark and calculate drawdown\n        if (balance > highWaterMark) {\n          highWaterMark = balance;\n        }\n\n        const drawdown = (highWaterMark - balance) / highWaterMark;\n        equityCurve.push({\n          timestamp: candle.timestamp,\n          balance,\n          drawdown,\n        });\n      }\n    }\n\n    // Calculate enhanced metrics\n    const basicMetrics = this.calculateBasicMetrics(\n      trades,\n      options.initialBalance\n    );\n    const advancedMetrics = this.calculateAdvancedMetrics(\n      trades,\n      equityCurve,\n      options.initialBalance\n    );\n\n    const result: BacktestResult = {\n      strategyId: strategy.id,\n      startDate: options.startDate,\n      endDate: options.endDate,\n      initialBalance: options.initialBalance,\n      finalBalance: balance,\n      totalPnL: balance - options.initialBalance,\n      totalTrades: trades.length,\n      winningTrades: trades.filter((t) => t.pnl > 0).length,\n      losingTrades: trades.filter((t) => t.pnl < 0).length,\n      winRate:\n        trades.length > 0\n          ? (trades.filter((t) => t.pnl > 0).length / trades.length) * 100\n          : 0,\n      maxDrawdown: this.calculateMaxDrawdown(trades),\n      sharpeRatio: this.calculateSharpeRatio(trades),\n      trades,\n      metrics: basicMetrics,\n    };\n\n    return {\n      ...result,\n      advancedMetrics,\n    };\n  }\n\n  /**\n   * Portfolio-level backtesting\n   */\n  public async runPortfolioBacktest(\n    options: PortfolioBacktestOptions\n  ): Promise<PortfolioBacktestResult> {\n    const strategyResults: BacktestResult[] = [];\n    const rebalanceEvents: RebalanceEvent[] = [];\n\n    // Run individual strategy backtests\n    for (const strategy of options.strategies) {\n      const result = await this.runAdvancedBacktest(strategy, options);\n      strategyResults.push(result);\n    }\n\n    // Calculate portfolio metrics\n    const correlationMatrix =\n      this.calculateStrategyCorrelations(strategyResults);\n    const portfolioReturns = this.calculatePortfolioReturns(\n      strategyResults,\n      options.weights\n    );\n    const diversificationRatio = this.calculateDiversificationRatio(\n      strategyResults,\n      options.weights,\n      correlationMatrix\n    );\n\n    return {\n      portfolioBalance: portfolioReturns.reduce(\n        (sum, r) => sum + r,\n        options.initialBalance\n      ),\n      strategyReturns: strategyResults,\n      correlationMatrix,\n      diversificationRatio,\n      portfolioSharpe: this.calculatePortfolioSharpe(portfolioReturns),\n      portfolioVolatility: this.calculatePortfolioVolatility(portfolioReturns),\n      maxPortfolioDrawdown:\n        this.calculatePortfolioMaxDrawdown(portfolioReturns),\n      rebalanceEvents,\n    };\n  }\n\n  /**\n   * Stress testing with various market scenarios\n   */\n  public async runStressTest(\n    strategy: Strategy,\n    options: BacktestOptions,\n    scenarios: StressTestScenario[]\n  ): Promise<Record<string, BacktestResult>> {\n    const results: Record<string, BacktestResult> = {};\n\n    for (const scenario of scenarios) {\n      try {\n        // Modify market data according to stress scenario\n        const stressedResult = await this.runStressScenario(\n          strategy,\n          options,\n          scenario\n        );\n        results[scenario.name] = stressedResult;\n      } catch {\n        // Continue with other scenarios\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Multi-timeframe data retrieval with caching\n   */\n  private async getMultiTimeframeData(\n    request: HistoricalDataRequest\n  ): Promise<MultiTimeframeData> {\n    const cacheKey = JSON.stringify(request);\n\n    if (this.historicalDataCache.has(cacheKey)) {\n      return this.historicalDataCache.get(cacheKey)!;\n    }\n\n    const data: MultiTimeframeData = {};\n\n    for (const timeframe of request.timeframes) {\n      for (const symbol of request.symbols) {\n        try {\n          const marketData = await poloniexApi.getHistoricalData(\n            symbol,\n            request.startDate,\n            request.endDate\n          );\n\n          if (!data[timeframe]) {\n            data[timeframe] = [];\n          }\n          data[timeframe] = marketData;\n        } catch {\n          // Continue with other symbols/timeframes\n        }\n      }\n    }\n\n    this.historicalDataCache.set(cacheKey, data);\n    return data;\n  }\n\n  /**\n   * Enhanced position sizing with volatility adjustment\n   */\n  private calculateOptimalPositionSize(\n    balance: number,\n    price: number,\n    marketData: MarketData[]\n  ): number {\n    // Calculate recent volatility\n    const window = marketData.slice(-20);\n    const returns: number[] = [];\n    for (let i = 1; i < window.length; i++) {\n      const prev = window[i - 1];\n      const cur = window[i];\n      if (!prev || !cur) continue;\n      const denom = prev.close || 0;\n      const r = denom !== 0 ? (cur.close - prev.close) / denom : 0;\n      returns.push(r);\n    }\n\n    const volatility = Math.sqrt(\n      returns.reduce((sum, r) => sum + r * r, 0) / returns.length\n    );\n\n    // Kelly criterion-inspired position sizing with volatility adjustment\n    const basePositionPercent = 0.02; // 2% base risk\n    const volatilityAdjustment = Math.max(\n      0.1,\n      Math.min(2.0, 1 / (volatility * 100))\n    );\n    const adjustedPercent = basePositionPercent * volatilityAdjustment;\n\n    return (balance * adjustedPercent) / price;\n  }\n\n  /**\n   * Enhanced trade execution with market microstructure\n   */\n  private executeAdvancedTrade(\n    type: \"BUY\" | \"SELL\",\n    price: number,\n    amount: number,\n    balance: number,\n    options: BacktestOptions,\n    marketData: MarketData\n  ): BacktestTrade {\n    // Enhanced slippage model based on volume and volatility\n    const volumeImpact = Math.min(\n      0.001,\n      (amount / (marketData.volume || 1000000)) * 0.01\n    );\n    const volatilityImpact =\n      (Math.abs(marketData.high - marketData.low) / marketData.close) * 0.1;\n    const enhancedSlippage = options.slippage + volumeImpact + volatilityImpact;\n\n    // Apply enhanced slippage\n    const executionPrice =\n      type === \"BUY\"\n        ? price * (1 + enhancedSlippage)\n        : price * (1 - enhancedSlippage);\n\n    const total = executionPrice * amount;\n    const fee = total * options.feeRate;\n\n    // Calculate PnL (simplified for single trade)\n    const pnl = type === \"SELL\" ? total - fee - price * amount : 0;\n    const pnlPercent = (pnl / (price * amount)) * 100;\n\n    // Update balance\n    const newBalance =\n      type === \"BUY\" ? balance - total - fee : balance + total - fee;\n\n    return {\n      id: `trade-${marketData.timestamp}-${type}`,\n      entryPrice: executionPrice,\n      exitPrice: type === 'SELL' ? executionPrice : null,\n      entryTime: new Date(marketData.timestamp).toISOString(),\n      exitTime: type === 'SELL' ? new Date(marketData.timestamp).toISOString() : null,\n      side: type === 'BUY' ? 'long' : 'short',\n      status: type === 'SELL' ? 'closed' : 'open',\n      pnl,\n      pnlPercent,\n      balance: newBalance,\n      size: amount,\n      fee,\n      // Legacy compatibility\n      timestamp: marketData.timestamp,\n      type,\n      price: executionPrice,\n      amount,\n      total\n    };\n  }\n\n  /**\n   * Calculate advanced risk and performance metrics\n   */\n  private calculateAdvancedMetrics(\n    trades: BacktestTrade[],\n    equityCurve: { timestamp: number; balance: number; drawdown: number }[],\n    initialBalance: number\n  ): AdvancedBacktestMetrics {\n    const returns = trades.map((t) => t.pnlPercent / 100);\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n\n    // Sort returns for quantile calculations\n    const sortedReturns = [...returns].sort((a, b) => a - b);\n    const negativeReturns = returns.filter((r) => r < 0);\n    const positiveReturns = returns.filter((r) => r > 0);\n\n    // Basic statistics\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance =\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n      returns.length;\n    const stdDev = Math.sqrt(variance);\n    const skewness = this.calculateSkewness(returns, mean, stdDev);\n    const kurtosis = this.calculateKurtosis(returns, mean, stdDev);\n\n    // VaR calculations\n    const var95Index = Math.floor(0.05 * sortedReturns.length);\n    const var99Index = Math.floor(0.01 * sortedReturns.length);\n    const var95Value = sortedReturns[var95Index] || 0;\n    const var99Value = sortedReturns[var99Index] || 0;\n\n    // Conditional VaR (Expected Shortfall)\n    const cvar95 =\n      sortedReturns.slice(0, var95Index + 1).reduce((sum, r) => sum + r, 0) /\n        (var95Index + 1) || 0;\n    const cvar99 =\n      sortedReturns.slice(0, var99Index + 1).reduce((sum, r) => sum + r, 0) /\n        (var99Index + 1) || 0;\n\n    // Downside metrics\n    const downsideReturns = returns.filter((r) => r < 0);\n    const downsideDeviation = Math.sqrt(\n      downsideReturns.reduce((sum, r) => sum + r * r, 0) /\n        downsideReturns.length\n    );\n    const sortinoRatio = downsideDeviation > 0 ? mean / downsideDeviation : 0;\n\n    // Drawdown-based metrics\n    const maxDrawdown = Math.max(...equityCurve.map((e) => e.drawdown));\n    const calmarRatio = maxDrawdown > 0 ? (mean * 252) / maxDrawdown : 0; // Annualized\n\n    // Advanced ratios\n    const ulcerIndex = Math.sqrt(\n      equityCurve.reduce((sum, e) => sum + e.drawdown * e.drawdown, 0) /\n        equityCurve.length\n    );\n    const martinRatio = ulcerIndex > 0 ? mean / ulcerIndex : 0;\n\n    // Omega ratio\n    const threshold = 0;\n    const gainsAboveThreshold = returns\n      .filter((r) => r > threshold)\n      .reduce((sum, r) => sum + (r - threshold), 0);\n    const lossesBelowThreshold = Math.abs(\n      returns\n        .filter((r) => r < threshold)\n        .reduce((sum, r) => sum + (r - threshold), 0)\n    );\n    const omegaRatio =\n      lossesBelowThreshold > 0 ? gainsAboveThreshold / lossesBelowThreshold : 0;\n\n    return {\n      // Basic metrics (existing)\n      dailyReturns,\n      monthlyReturns,\n      volatility: stdDev,\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor: (() => {\n        if (maxDrawdown <= 0) return 0;\n        const last = trades.length > 0 ? trades[trades.length - 1] : undefined;\n        const lastBalance = last ? last.balance : initialBalance;\n        return (lastBalance - initialBalance) / (maxDrawdown * initialBalance);\n      })(),\n      averageWin:\n        positiveReturns.reduce((sum, r) => sum + r, 0) /\n          positiveReturns.length || 0,\n      averageLoss:\n        Math.abs(\n          negativeReturns.reduce((sum, r) => sum + r, 0) /\n            negativeReturns.length\n        ) || 0,\n      largestWin: Math.max(...returns),\n      largestLoss: Math.min(...returns),\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: Math.max(...monthlyReturns),\n      worstMonth: Math.min(...monthlyReturns),\n\n      // Advanced metrics (Phase 4)\n      valueAtRisk95: Math.abs(var95Value) * 100,\n      valueAtRisk99: Math.abs(var99Value) * 100,\n      conditionalVaR95: Math.abs(cvar95) * 100,\n      conditionalVaR99: Math.abs(cvar99) * 100,\n      calmarRatio,\n      sortinoRatio,\n      omegaRatio,\n      kappa3: downsideDeviation > 0 ? mean / Math.pow(downsideDeviation, 3) : 0,\n      gainToPainRatio: this.calculateGainToPainRatio(returns),\n      ulcerIndex,\n      martinRatio,\n      painIndex: this.calculatePainIndex(equityCurve),\n      burkeRatio: this.calculateBurkeRatio(returns, equityCurve),\n      modifiedSharpe: this.calculateModifiedSharpe(returns, skewness, kurtosis),\n      treynorRatio: 0, // Would need beta calculation with market data\n      informationRatio: 0, // Would need benchmark data\n      modigliani: 0, // Would need market data for calculation\n      excessReturnOnVaR: var95Value !== 0 ? mean / Math.abs(var95Value) : 0,\n      conditionalSharpe: cvar95 !== 0 ? mean / Math.abs(cvar95) : 0,\n      skewness,\n      kurtosis,\n      tailRatio: var99Value !== 0 ? Math.abs(var95Value / var99Value) : 0,\n      upnessIndex: this.calculateUpnessIndex(returns),\n      upsidePotentialRatio: this.calculateUpsidePotentialRatio(returns),\n    };\n  }\n\n  // Helper methods for advanced metric calculations\n  private calculateSkewness(\n    returns: number[],\n    mean: number,\n    stdDev: number\n  ): number {\n    if (stdDev === 0) return 0;\n    const n = returns.length;\n    return (\n      (n / ((n - 1) * (n - 2))) *\n      returns.reduce((sum, r) => sum + Math.pow((r - mean) / stdDev, 3), 0)\n    );\n  }\n\n  private calculateKurtosis(\n    returns: number[],\n    mean: number,\n    stdDev: number\n  ): number {\n    if (stdDev === 0) return 0;\n    const n = returns.length;\n    const factor = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n    const adjustment = (3 * (n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n    return (\n      factor *\n        returns.reduce((sum, r) => sum + Math.pow((r - mean) / stdDev, 4), 0) -\n      adjustment\n    );\n  }\n\n  private calculateGainToPainRatio(returns: number[]): number {\n    const gains = returns.filter((r) => r > 0).reduce((sum, r) => sum + r, 0);\n    const pains = Math.abs(\n      returns.filter((r) => r < 0).reduce((sum, r) => sum + r, 0)\n    );\n    return pains > 0 ? gains / pains : 0;\n  }\n\n  private calculatePainIndex(equityCurve: { drawdown: number }[]): number {\n    return (\n      equityCurve.reduce((sum, e) => sum + e.drawdown, 0) / equityCurve.length\n    );\n  }\n\n  private calculateBurkeRatio(\n    returns: number[],\n    equityCurve: { drawdown: number }[]\n  ): number {\n    const annualizedReturn =\n      (returns.reduce((sum, r) => sum + r, 0) / returns.length) * 252;\n    const burkeRatio = Math.sqrt(\n      equityCurve.reduce((sum, e) => sum + e.drawdown * e.drawdown, 0)\n    );\n    return burkeRatio > 0 ? annualizedReturn / burkeRatio : 0;\n  }\n\n  private calculateModifiedSharpe(\n    returns: number[],\n    skewness: number,\n    kurtosis: number\n  ): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n        returns.length\n    );\n\n    if (stdDev === 0) return 0;\n\n    const sharpe = mean / stdDev;\n    const modification =\n      1 + (skewness / 6) * sharpe - ((kurtosis - 3) / 24) * sharpe * sharpe;\n    return sharpe * modification;\n  }\n\n  private calculateUpnessIndex(returns: number[]): number {\n    const positiveReturns = returns.filter((r) => r > 0);\n    return positiveReturns.length / returns.length;\n  }\n\n  private calculateUpsidePotentialRatio(returns: number[]): number {\n    const threshold = 0;\n    const upsidePotential =\n      returns\n        .filter((r) => r > threshold)\n        .reduce((sum, r) => sum + (r - threshold), 0) / returns.length;\n    const downsideDeviation = Math.sqrt(\n      returns\n        .filter((r) => r < threshold)\n        .reduce((sum, r) => sum + Math.pow(r - threshold, 2), 0) /\n        returns.length\n    );\n\n    return downsideDeviation > 0 ? upsidePotential / downsideDeviation : 0;\n  }\n\n  // Existing helper methods (maintain compatibility)\n  private calculateBasicMetrics(\n    trades: BacktestTrade[],\n    initialBalance: number\n  ) {\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n    const positiveReturns = trades.filter((t) => t.pnl > 0);\n    const negativeReturns = trades.filter((t) => t.pnl < 0);\n\n    return {\n      dailyReturns,\n      monthlyReturns,\n      volatility: this.calculateVolatility(dailyReturns),\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor: (() => {\n        const mdd = this.calculateMaxDrawdown(trades);\n        if (mdd <= 0) return 0;\n        const last = trades.length > 0 ? trades[trades.length - 1] : undefined;\n        const lastBalance = last ? last.balance : initialBalance;\n        return (lastBalance - initialBalance) / (mdd * initialBalance);\n      })(),\n      averageWin:\n        positiveReturns.reduce((sum, t) => sum + t.pnl, 0) /\n          positiveReturns.length || 0,\n      averageLoss:\n        Math.abs(\n          negativeReturns.reduce((sum, t) => sum + t.pnl, 0) /\n            negativeReturns.length\n        ) || 0,\n      largestWin: trades.length > 0 ? Math.max(...trades.map((t) => t.pnl)) : 0,\n      largestLoss:\n        trades.length > 0 ? Math.min(...trades.map((t) => t.pnl)) : 0,\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: monthlyReturns.length > 0 ? Math.max(...monthlyReturns) : 0,\n      worstMonth: monthlyReturns.length > 0 ? Math.min(...monthlyReturns) : 0,\n    };\n  }\n\n  private calculateVolatility(returns: number[]): number {\n    if (returns.length < 2) return 0;\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n        returns.length\n    );\n  }\n\n  private calculateDailyReturns(trades: BacktestTrade[]): number[] {\n    const dailyPnL = new Map<string, number>();\n\n    trades.forEach((trade) => {\n      // Add null safety for timestamp\n      if (trade.timestamp) {\n        const date: string = (new Date(trade.timestamp).toISOString().split(\"T\")[0]) ?? \"\";\n        const currentPnL = dailyPnL.get(date) ?? 0;\n        dailyPnL.set(date, currentPnL + (trade.pnl ?? 0));\n      }\n    });\n\n    return Array.from(dailyPnL.values());\n  }\n\n  private calculateMonthlyReturns(trades: BacktestTrade[]): number[] {\n    const monthlyPnL = new Map<string, number>();\n\n    trades.forEach((trade) => {\n      // Add null safety for timestamp\n      if (trade.timestamp) {\n        const date = new Date(trade.timestamp);\n        const monthKey: string = `${date.getFullYear()}-${date.getMonth() + 1}`;\n        const currentPnL = monthlyPnL.get(monthKey) ?? 0;\n        monthlyPnL.set(monthKey, currentPnL + (trade.pnl ?? 0));\n      }\n    });\n\n    return Array.from(monthlyPnL.values());\n  }\n\n  private calculateMaxDrawdown(trades: BacktestTrade[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n\n    trades.forEach((trade) => {\n      if (trade.balance > peak) {\n        peak = trade.balance;\n      }\n\n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n\n    return maxDrawdown;\n  }\n\n  private calculateSharpeRatio(trades: BacktestTrade[]): number {\n    const returns = trades.map((t) => t.pnlPercent);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) /\n        returns.length\n    );\n\n    return avgReturn / stdDev;\n  }\n\n  private calculateProfitFactor(trades: BacktestTrade[]): number {\n    const grossProfit = trades\n      .filter((t) => t.pnl > 0)\n      .reduce((sum, t) => sum + t.pnl, 0);\n\n    const grossLoss = Math.abs(\n      trades.filter((t) => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0)\n    );\n\n    return grossProfit / grossLoss;\n  }\n\n  private calculateAverageHoldingPeriod(trades: BacktestTrade[]): number {\n    let totalHoldingTime = 0;\n    let positions = 0;\n\n    for (let i = 0; i < trades.length - 1; i++) {\n      const t = trades[i];\n      const tNext = trades[i + 1];\n      if (!t || !tNext) continue;\n      if (t.type === \"BUY\" && tNext.type === \"SELL\") {\n        // Add null safety for timestamps\n        if (tNext.timestamp && t.timestamp) {\n          totalHoldingTime += (tNext.timestamp ?? 0) - (t.timestamp ?? 0);\n          positions++;\n        }\n      }\n    }\n\n    return totalHoldingTime / positions / (1000 * 60 * 60); // Convert to hours\n  }\n\n  // Portfolio-specific methods\n  private calculateStrategyCorrelations(results: BacktestResult[]): number[][] {\n    const n = results.length;\n    const correlationMatrix: number[][] = Array(n)\n      .fill(null)\n      .map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (i === j) {\n          (correlationMatrix[i] ?? (correlationMatrix[i] = [] as number[]))[j] = 1;\n        } else {\n          const resI = results[i];\n          const resJ = results[j];\n          const returns1 = resI?.trades?.map((t) => t.pnlPercent) ?? [];\n          const returns2 = resJ?.trades?.map((t) => t.pnlPercent) ?? [];\n          (correlationMatrix[i] ?? (correlationMatrix[i] = [] as number[]))[j] =\n            this.calculateCorrelation(returns1, returns2);\n        }\n      }\n    }\n\n    return correlationMatrix;\n  }\n\n  private calculateCorrelation(returns1: number[], returns2: number[]): number {\n    const n = Math.min(returns1.length, returns2.length);\n    if (n === 0) return 0;\n\n    const mean1 = returns1.slice(0, n).reduce((sum, r) => sum + r, 0) / n;\n    const mean2 = returns2.slice(0, n).reduce((sum, r) => sum + r, 0) / n;\n\n    let numerator = 0;\n    let sumSq1 = 0;\n    let sumSq2 = 0;\n\n    for (let i = 0; i < n; i++) {\n      const v1 = returns1.at(i);\n      const v2 = returns2.at(i);\n      if (v1 === undefined || v2 === undefined) continue;\n      const diff1 = v1 - mean1;\n      const diff2 = v2 - mean2;\n      numerator += diff1 * diff2;\n      sumSq1 += diff1 * diff1;\n      sumSq2 += diff2 * diff2;\n    }\n\n    const denominator = Math.sqrt(sumSq1 * sumSq2);\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  private calculatePortfolioReturns(\n    results: BacktestResult[],\n    weights: number[]\n  ): number[] {\n    const maxLength = Math.max(...results.map((r) => r.trades.length));\n    const portfolioReturns: number[] = [];\n\n    for (let i = 0; i < maxLength; i++) {\n      let weightedReturn = 0;\n      for (let j = 0; j < results.length; j++) {\n        const res = results[j];\n        const trade = res?.trades?.[i];\n        const w = weights[j] ?? 0;\n        if (trade) {\n          weightedReturn += (trade.pnlPercent / 100) * w;\n        }\n      }\n      portfolioReturns.push(weightedReturn);\n    }\n\n    return portfolioReturns;\n  }\n\n  private calculateDiversificationRatio(\n    results: BacktestResult[],\n    weights: number[],\n    correlationMatrix: number[][]\n  ): number {\n    // Simplified diversification ratio calculation\n    const weightedVolatility = weights.reduce((sum, w, i) => {\n      const resI = results[i];\n      const tradesI = resI?.trades ?? [];\n      if (tradesI.length === 0) return sum;\n      const volatility = Math.sqrt(\n        tradesI.reduce((s, t) => s + t.pnlPercent * t.pnlPercent, 0) /\n          tradesI.length\n      );\n      return sum + w * volatility;\n    }, 0);\n\n    // Portfolio volatility calculation (simplified)\n    let portfolioVariance = 0;\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights.length; j++) {\n        const resI = results[i];\n        const resJ = results[j];\n        const tradesI = resI?.trades ?? [];\n        const tradesJ = resJ?.trades ?? [];\n        if (tradesI.length === 0 || tradesJ.length === 0) continue;\n\n        const vol_i = Math.sqrt(\n          tradesI.reduce((s, t) => s + t.pnlPercent * t.pnlPercent, 0) /\n            tradesI.length\n        );\n        const vol_j = Math.sqrt(\n          tradesJ.reduce((s, t) => s + t.pnlPercent * t.pnlPercent, 0) /\n            tradesJ.length\n        );\n        const corrRow = correlationMatrix[i] ?? [];\n        const corr = corrRow[j] ?? 0;\n        const wi = weights[i] ?? 0;\n        const wj = weights[j] ?? 0;\n        portfolioVariance += wi * wj * corr * vol_i * vol_j;\n      }\n    }\n\n    const portfolioVolatility = Math.sqrt(portfolioVariance);\n    return portfolioVolatility > 0\n      ? weightedVolatility / portfolioVolatility\n      : 0;\n  }\n\n  private calculatePortfolioSharpe(returns: number[]): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + (r - mean) * (r - mean), 0) /\n        returns.length\n    );\n    return stdDev > 0 ? mean / stdDev : 0;\n  }\n\n  private calculatePortfolioVolatility(returns: number[]): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + (r - mean) * (r - mean), 0) /\n        returns.length\n    );\n  }\n\n  private calculatePortfolioMaxDrawdown(returns: number[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    let cumulative = 0;\n\n    for (const ret of returns) {\n      cumulative += ret;\n      if (cumulative > peak) {\n        peak = cumulative;\n      }\n      const drawdown = (peak - cumulative) / Math.abs(peak);\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n\n    return maxDrawdown;\n  }\n\n  private async runStressScenario(\n    strategy: Strategy,\n    options: BacktestOptions,\n    _scenario: StressTestScenario\n  ): Promise<BacktestResult> {\n    // This would modify the historical data according to the stress scenario\n    // For now, returning a placeholder - full implementation would involve:\n    // 1. Loading historical data\n    // 2. Applying stress scenario transformations\n    // 3. Running backtest on modified data\n\n    return this.runAdvancedBacktest(strategy, options);\n  }\n}\n\nexport const advancedBacktestService = AdvancedBacktestService.getInstance();\n","import React, { useState } from 'react';\nimport { Calendar, Download, Database, Filter, TrendingUp, AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface HistoricalDataRequest {\n  symbols: string[];\n  timeframes: string[];\n  startDate: string;\n  endDate: string;\n  includeVolume: boolean;\n  adjustForSplits: boolean;\n  adjustForDividends: boolean;\n}\n\ninterface DataQuality {\n  symbol: string;\n  timeframe: string;\n  totalCandles: number;\n  missingCandles: number;\n  completeness: number;\n  gaps: { start: string; end: string; duration: number }[];\n}\n\ninterface HistoricalData {\n  symbol: string;\n  timeframe: string;\n  data: Array<{\n    timestamp: number;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    volume: number;\n  }>;\n}\n\ninterface HistoricalDataManagerProps {\n  onDataLoaded?: (data: HistoricalData[]) => void;\n}\n\nconst HistoricalDataManager: React.FC<HistoricalDataManagerProps> = ({ onDataLoaded }) => {\n  const [request, setRequest] = useState<HistoricalDataRequest>({\n    symbols: ['BTC_USDT'],\n    timeframes: ['1h'],\n    startDate: '2023-01-01',\n    endDate: '2024-01-01',\n    includeVolume: true,\n    adjustForSplits: true,\n    adjustForDividends: false\n  });\n\n  const [dataQuality, setDataQuality] = useState<DataQuality[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n\n  const availableSymbols = [\n    'BTC_USDT', 'ETH_USDT', 'BNB_USDT', 'ADA_USDT', 'XRP_USDT',\n    'SOL_USDT', 'DOT_USDT', 'DOGE_USDT', 'AVAX_USDT', 'SHIB_USDT'\n  ];\n\n  const availableTimeframes = [\n    { value: '1m', label: '1 Minute' },\n    { value: '5m', label: '5 Minutes' },\n    { value: '15m', label: '15 Minutes' },\n    { value: '30m', label: '30 Minutes' },\n    { value: '1h', label: '1 Hour' },\n    { value: '4h', label: '4 Hours' },\n    { value: '1d', label: '1 Day' },\n    { value: '1w', label: '1 Week' }\n  ];\n\n  const addSymbol = (symbol: string) => {\n    if (!request.symbols.includes(symbol)) {\n      setRequest(prev => ({\n        ...prev,\n        symbols: [...prev.symbols, symbol]\n      }));\n    }\n  };\n\n  const removeSymbol = (symbol: string) => {\n    setRequest(prev => ({\n      ...prev,\n      symbols: prev.symbols.filter(s => s !== symbol)\n    }));\n  };\n\n  const toggleTimeframe = (timeframe: string) => {\n    setRequest(prev => ({\n      ...prev,\n      timeframes: prev.timeframes.includes(timeframe)\n        ? prev.timeframes.filter(t => t !== timeframe)\n        : [...prev.timeframes, timeframe]\n    }));\n  };\n\n  const loadHistoricalData = async () => {\n    setIsLoading(true);\n    setError(null);\n    setLoadingProgress(0);\n\n    try {\n      // Simulate data loading with progress\n      const totalSteps = request.symbols.length * request.timeframes.length;\n      let completedSteps = 0;\n\n      const mockDataQuality: DataQuality[] = [];\n      const historicalData: HistoricalData[] = [];\n\n      for (const symbol of request.symbols) {\n        for (const timeframe of request.timeframes) {\n          // Simulate API call delay\n          await new Promise(resolve => setTimeout(resolve, 500));\n\n          // Mock data quality metrics\n          const totalCandles = Math.floor(Math.random() * 1000) + 500;\n          const missingCandles = Math.floor(Math.random() * 50);\n          const completeness = ((totalCandles - missingCandles) / totalCandles) * 100;\n\n          mockDataQuality.push({\n            symbol,\n            timeframe,\n            totalCandles,\n            missingCandles,\n            completeness,\n            gaps: missingCandles > 0 ? [\n              {\n                start: '2023-06-15T10:00:00Z',\n                end: '2023-06-15T12:00:00Z',\n                duration: 2 * 60 * 60 * 1000 // 2 hours in ms\n              }\n            ] : []\n          });\n\n          // Generate mock historical data\n          const mockData: Array<{\n            timestamp: number;\n            open: number;\n            high: number;\n            low: number;\n            close: number;\n            volume: number;\n          }> = [];\n\n          const basePrice = 50000; // Starting price for mock data\n          for (let i = 0; i < totalCandles; i++) {\n            const timestamp = Date.now() - (totalCandles - i) * 60000; // 1 minute intervals\n            const open = basePrice + (Math.random() - 0.5) * 1000;\n            const close = open + (Math.random() - 0.5) * 100;\n            const high = Math.max(open, close) + Math.random() * 50;\n            const low = Math.min(open, close) - Math.random() * 50;\n            const volume = Math.random() * 1000000;\n\n            mockData.push({ timestamp, open, high, low, close, volume });\n          }\n\n          historicalData.push({\n            symbol,\n            timeframe,\n            data: mockData\n          });\n\n          completedSteps++;\n          setLoadingProgress((completedSteps / totalSteps) * 100);\n        }\n      }\n\n      setDataQuality(mockDataQuality);\n      \n      if (onDataLoaded) {\n        onDataLoaded(historicalData);\n      }\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load historical data');\n    } finally {\n      setIsLoading(false);\n      setLoadingProgress(0);\n    }\n  };\n\n  const exportDataRequest = () => {\n    const dataStr = JSON.stringify(request, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = `data-request-${new Date().toISOString().split('T')[0]}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const getQualityColor = (completeness: number) => {\n    if (completeness >= 95) return 'text-green-600';\n    if (completeness >= 85) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getQualityIcon = (completeness: number) => {\n    if (completeness >= 95) return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n    if (completeness >= 85) return <AlertCircle className=\"w-4 h-4 text-yellow-600\" />;\n    return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\n  };\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-medium flex items-center\">\n          <Database className=\"w-5 h-5 mr-2\" />\n          Historical Data Manager\n        </h3>\n        <button\n          onClick={exportDataRequest}\n          className=\"flex items-center px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200\"\n        >\n          <Download className=\"w-4 h-4 mr-1\" />\n          Export Config\n        </button>\n      </div>\n\n      {/* Symbol Selection */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-md font-medium mb-3\">Trading Pairs</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2 mb-3\">\n          {availableSymbols.map(symbol => (\n            <button\n              key={symbol}\n              onClick={() => request.symbols.includes(symbol) ? removeSymbol(symbol) : addSymbol(symbol)}\n              className={`px-3 py-2 text-sm rounded-md border transition-colors ${\n                request.symbols.includes(symbol)\n                  ? 'bg-blue-50 border-blue-500 text-blue-700'\n                  : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              {symbol}\n            </button>\n          ))}\n        </div>\n        <p className=\"text-sm text-gray-600\">\n          Selected: {request.symbols.length} pairs\n        </p>\n      </div>\n\n      {/* Timeframe Selection */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-md font-medium mb-3\">Timeframes</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 mb-3\">\n          {availableTimeframes.map(({ value, label }) => (\n            <button\n              key={value}\n              onClick={() => toggleTimeframe(value)}\n              className={`px-3 py-2 text-sm rounded-md border transition-colors ${\n                request.timeframes.includes(value)\n                  ? 'bg-blue-50 border-blue-500 text-blue-700'\n                  : 'bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n        <p className=\"text-sm text-gray-600\">\n          Selected: {request.timeframes.length} timeframes\n        </p>\n      </div>\n\n      {/* Date Range */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-md font-medium mb-3 flex items-center\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Date Range\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Start Date\n            </label>\n            <input\n              type=\"date\"\n              value={request.startDate}\n              onChange={(e) => setRequest(prev => ({ ...prev, startDate: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              End Date\n            </label>\n            <input\n              type=\"date\"\n              value={request.endDate}\n              onChange={(e) => setRequest(prev => ({ ...prev, endDate: e.target.value }))}\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Data Options */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-md font-medium mb-3 flex items-center\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Data Options\n        </h4>\n        <div className=\"space-y-3\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={request.includeVolume}\n              onChange={(e) => setRequest(prev => ({ ...prev, includeVolume: e.target.checked }))}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-gray-700\">Include Volume Data</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={request.adjustForSplits}\n              onChange={(e) => setRequest(prev => ({ ...prev, adjustForSplits: e.target.checked }))}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-gray-700\">Adjust for Stock Splits</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={request.adjustForDividends}\n              onChange={(e) => setRequest(prev => ({ ...prev, adjustForDividends: e.target.checked }))}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-gray-700\">Adjust for Dividends</span>\n          </label>\n        </div>\n      </div>\n\n      {/* Load Data Button */}\n      <div className=\"mb-6\">\n        <button\n          onClick={loadHistoricalData}\n          disabled={isLoading || request.symbols.length === 0 || request.timeframes.length === 0}\n          className=\"w-full px-4 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n        >\n          {isLoading ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n              Loading... {loadingProgress.toFixed(0)}%\n            </>\n          ) : (\n            <>\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Load Historical Data\n            </>\n          )}\n        </button>\n\n        {isLoading && (\n          <div className=\"mt-2\">\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${loadingProgress}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-md\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n            <span className=\"text-sm text-red-700\">{error}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Data Quality Report */}\n      {dataQuality.length > 0 && (\n        <div>\n          <h4 className=\"text-md font-medium mb-3\">Data Quality Report</h4>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Symbol\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Timeframe\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Total Candles\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Missing\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Completeness\n                  </th>\n                  <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {dataQuality.map((quality, index) => (\n                  <tr key={index}>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {quality.symbol}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                      {quality.timeframe}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                      {quality.totalCandles.toLocaleString()}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500\">\n                      {quality.missingCandles}\n                    </td>\n                    <td className={`px-4 py-3 whitespace-nowrap text-sm font-medium ${getQualityColor(quality.completeness)}`}>\n                      {quality.completeness.toFixed(1)}%\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm\">\n                      <div className=\"flex items-center\">\n                        {getQualityIcon(quality.completeness)}\n                        <span className={`ml-2 ${getQualityColor(quality.completeness)}`}>\n                          {quality.completeness >= 95 ? 'Excellent' : \n                           quality.completeness >= 85 ? 'Good' : 'Poor'}\n                        </span>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-gray-50 p-3 rounded-md\">\n              <p className=\"text-sm text-gray-600\">Total Datasets</p>\n              <p className=\"text-lg font-bold\">{dataQuality.length}</p>\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-md\">\n              <p className=\"text-sm text-gray-600\">Average Completeness</p>\n              <p className=\"text-lg font-bold\">\n                {dataQuality.length > 0 \n                  ? (dataQuality.reduce((sum, q) => sum + q.completeness, 0) / dataQuality.length).toFixed(1)\n                  : 0}%\n              </p>\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-md\">\n              <p className=\"text-sm text-gray-600\">Total Candles</p>\n              <p className=\"text-lg font-bold\">\n                {dataQuality.reduce((sum, q) => sum + q.totalCandles, 0).toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HistoricalDataManager;","import React, { useState, useEffect } from 'react';\nimport { Strategy } from '@/types';\nimport { BacktestResult, BacktestOptions } from '@/types/backtest';\n// import { backtestService } from '@/services/backtestService';\nimport { advancedBacktestService } from '@/services/advancedBacktestService';\nimport { useTradingContext } from '@/hooks/useTradingContext';\nimport HistoricalDataManager from '@/components/backtesting/HistoricalDataManager';\nimport { \n  Play, \n  Settings, \n  Download, \n  TrendingUp,\n  AlertTriangle,\n  BarChart3,\n  PieChart,\n  Activity,\n  Zap,\n  Database\n} from 'lucide-react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface AdvancedMetrics {\n  valueAtRisk95: number;\n  valueAtRisk99: number;\n  conditionalVaR95: number;\n  conditionalVaR99: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n  omegaRatio: number;\n  tailRatio: number;\n  gainToLossRatio: number;\n  payoffRatio: number;\n  expectancy: number;\n  systemQualityNumber: number;\n  kRatio: number;\n  ulcerIndex: number;\n  recoveryFactor: number;\n  profitabilityIndex: number;\n  // Additional properties used in the UI\n  painIndex: number;\n  martinRatio: number;\n  burkeRatio: number;\n  skewness: number;\n  kurtosis: number;\n  upnessIndex: number;\n  upsidePotentialRatio: number;\n  gainToPainRatio: number;\n}\n\ninterface BacktestSession {\n  id: string;\n  name: string;\n  strategy: Strategy;\n  options: BacktestOptions;\n  result: BacktestResult | null;\n  advancedMetrics: AdvancedMetrics;\n  createdAt: Date;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n}\n\nconst Backtesting: React.FC = () => {\n  const { strategies } = useTradingContext();\n  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);\n  const [backtestOptions, setBacktestOptions] = useState<BacktestOptions>({\n    startDate: '2023-01-01',\n    endDate: '2024-01-01',\n    initialBalance: 10000,\n    feeRate: 0.001,\n    slippage: 0.001,\n    useHistoricalData: true\n  });\n  \n  const [sessions, setSessions] = useState<BacktestSession[]>([]);\n  const [activeSession, setActiveSession] = useState<BacktestSession | null>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [activeTab, setActiveTab] = useState<'setup' | 'data' | 'results' | 'analysis' | 'reports'>('setup');\n  const [historicalDataLoaded, setHistoricalDataLoaded] = useState(false);\n\n  // Initialize with sample session for demo\n  useEffect(() => {\n    if (strategies.length > 0 && sessions.length === 0) {\n      const firstStrategy = strategies[0];\n      if (!firstStrategy) return; // Satisfy noUncheckedIndexedAccess\n      const sampleSession: BacktestSession = {\n        id: '1',\n        name: 'Sample Backtest',\n        strategy: firstStrategy,\n        options: backtestOptions,\n        result: null,\n        advancedMetrics: {\n          valueAtRisk95: 0, valueAtRisk99: 0, conditionalVaR95: 0, conditionalVaR99: 0,\n          calmarRatio: 0, sortinoRatio: 0, omegaRatio: 0, tailRatio: 0,\n          gainToLossRatio: 0, payoffRatio: 0, expectancy: 0, systemQualityNumber: 0,\n          kRatio: 0, ulcerIndex: 0, recoveryFactor: 0, profitabilityIndex: 0,\n          painIndex: 0, martinRatio: 0, burkeRatio: 0, skewness: 0, kurtosis: 0,\n          upnessIndex: 0, upsidePotentialRatio: 0, gainToPainRatio: 0\n        },\n        createdAt: new Date(),\n        status: 'pending'\n      };\n      setSessions([sampleSession]);\n    }\n  }, [strategies, backtestOptions, sessions.length]);\n\n  const runBacktest = async () => {\n    if (!selectedStrategy) return;\n\n    setIsRunning(true);\n    \n    const sessionId = Date.now().toString();\n    const newSession: BacktestSession = {\n      id: sessionId,\n      name: `Backtest ${selectedStrategy.name} ${new Date().toLocaleDateString()}`,\n      strategy: selectedStrategy,\n      options: backtestOptions,\n      result: null,\n      advancedMetrics: {\n        valueAtRisk95: 0, valueAtRisk99: 0, conditionalVaR95: 0, conditionalVaR99: 0,\n        calmarRatio: 0, sortinoRatio: 0, omegaRatio: 0, tailRatio: 0,\n        gainToLossRatio: 0, payoffRatio: 0, expectancy: 0, systemQualityNumber: 0,\n        kRatio: 0, ulcerIndex: 0, recoveryFactor: 0, profitabilityIndex: 0,\n        painIndex: 0, martinRatio: 0, burkeRatio: 0, skewness: 0, kurtosis: 0,\n        upnessIndex: 0, upsidePotentialRatio: 0, gainToPainRatio: 0\n      },\n      createdAt: new Date(),\n      status: 'running'\n    };\n\n    setSessions(prev => [newSession, ...prev]);\n    setActiveSession(newSession);\n\n    try {\n      // Use advanced backtest service for Phase 4\n      const result = await advancedBacktestService.runAdvancedBacktest(selectedStrategy, backtestOptions);\n      const advancedMetrics = result.advancedMetrics;\n\n      const updatedSession = {\n        ...newSession,\n        result: {\n          ...result,\n          // Convert advanced metrics to the expected format\n          metrics: {\n            ...result.metrics,\n            netProfit: result.totalPnL,\n            grossProfit: result.trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0),\n            grossLoss: Math.abs(result.trades.filter(t => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0)),\n            maxConsecutiveWins: 0, // Would need to calculate\n            maxConsecutiveLosses: 0, // Would need to calculate\n            averageTrade: result.trades.reduce((sum, t) => sum + t.pnl, 0) / result.trades.length || 0,\n            averageProfit: result.trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0) / result.trades.filter(t => t.pnl > 0).length || 0,\n            averageLoss: result.trades.filter(t => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0) / result.trades.filter(t => t.pnl < 0).length || 0,\n            largestProfit: Math.max(...result.trades.map(t => t.pnl)),\n            largestLoss: Math.min(...result.trades.map(t => t.pnl)),\n            annualizedReturn: ((result.finalBalance / result.initialBalance) - 1) * 365 / 365 // Simplified\n          }\n        },\n        advancedMetrics: {\n          valueAtRisk95: advancedMetrics.valueAtRisk95 || 0,\n          valueAtRisk99: advancedMetrics.valueAtRisk99 || 0,\n          conditionalVaR95: advancedMetrics.conditionalVaR95 || 0,\n          conditionalVaR99: advancedMetrics.conditionalVaR99 || 0,\n          calmarRatio: advancedMetrics.calmarRatio || 0,\n          sortinoRatio: advancedMetrics.sortinoRatio || 0,\n          omegaRatio: advancedMetrics.omegaRatio || 0,\n          tailRatio: advancedMetrics.tailRatio || 0,\n          gainToLossRatio: (advancedMetrics.averageWin || 0) / Math.max(Math.abs(advancedMetrics.averageLoss || 0), 1),\n          payoffRatio: (advancedMetrics.averageWin || 0) / Math.max(Math.abs(advancedMetrics.averageLoss || 0), 1),\n          expectancy: (advancedMetrics.averageWin || 0) * (result.winRate / 100) - Math.abs(advancedMetrics.averageLoss || 0) * ((100 - result.winRate) / 100),\n          systemQualityNumber: result.sharpeRatio * Math.sqrt(result.totalTrades),\n          kRatio: 0, // Not available in service response yet\n          ulcerIndex: advancedMetrics.ulcerIndex || 0,\n          recoveryFactor: advancedMetrics.recoveryFactor || 0,\n          profitabilityIndex: ((result.finalBalance - result.initialBalance) / result.initialBalance) || 0,\n          painIndex: advancedMetrics.painIndex || 0,\n          martinRatio: advancedMetrics.martinRatio || 0,\n          burkeRatio: advancedMetrics.burkeRatio || 0,\n          skewness: advancedMetrics.skewness || 0,\n          kurtosis: advancedMetrics.kurtosis || 0,\n          upnessIndex: advancedMetrics.upnessIndex || 0,\n          upsidePotentialRatio: advancedMetrics.upsidePotentialRatio || 0,\n          gainToPainRatio: advancedMetrics.gainToPainRatio || 0\n        },\n        status: 'completed' as const\n      };\n\n      setSessions(prev => prev.map(s => s.id === sessionId ? updatedSession : s));\n      setActiveSession(updatedSession);\n      setActiveTab('results' as 'setup' | 'data' | 'results' | 'analysis' | 'reports');\n    } catch (_error) {\n    // console.error('Backtest failed:', error);\n    const failedSession = {\n      ...newSession,\n      status: 'failed' as const\n    };\n      setSessions(prev => prev.map(s => s.id === sessionId ? failedSession : s));\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  // TODO: Implement advanced metrics calculation\n  /*\n  const calculateAdvancedMetrics = (result: BacktestResult): AdvancedMetrics => {\n    const returns = result.trades.map(t => t.pnlPercent / 100);\n    const negativeReturns = returns.filter(r => r < 0).sort((a, b) => a - b);\n    const positiveReturns = returns.filter(r => r > 0);\n    \n    // Calculate Value at Risk (VaR)\n    const calculateVaR = (confidence: number) => {\n      const index = Math.floor((1 - confidence) * negativeReturns.length);\n      return negativeReturns[index] || 0;\n    };\n\n    const var95 = calculateVaR(0.95);\n    const var99 = calculateVaR(0.99);\n\n    // Calculate Conditional VaR (Expected Shortfall)\n    const calculateCVaR = (confidence: number) => {\n      const varValue = calculateVaR(confidence);\n      const tailReturns = negativeReturns.filter(r => r <= varValue);\n      return tailReturns.length > 0 ? tailReturns.reduce((sum, r) => sum + r, 0) / tailReturns.length : 0;\n    };\n\n    const cvar95 = calculateCVaR(0.95);\n    const cvar99 = calculateCVaR(0.99);\n\n    // Calculate other advanced metrics\n    const downside = returns.filter(r => r < 0);\n    const downsideDeviation = Math.sqrt(downside.reduce((sum, r) => sum + r * r, 0) / downside.length);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    \n    const sortinoRatio = downsideDeviation > 0 ? avgReturn / downsideDeviation : 0;\n    const calmarRatio = result.maxDrawdown > 0 ? (result.finalBalance - result.initialBalance) / result.initialBalance / result.maxDrawdown : 0;\n\n    const wins = result.trades.filter(t => t.pnl > 0);\n    const losses = result.trades.filter(t => t.pnl < 0);\n    const avgWin = wins.length > 0 ? wins.reduce((sum, t) => sum + t.pnl, 0) / wins.length : 0;\n    const avgLoss = losses.length > 0 ? Math.abs(losses.reduce((sum, t) => sum + t.pnl, 0) / losses.length) : 0;\n\n    return {\n      valueAtRisk95: Math.abs(var95) * 100,\n      valueAtRisk99: Math.abs(var99) * 100,\n      conditionalVaR95: Math.abs(cvar95) * 100,\n      conditionalVaR99: Math.abs(cvar99) * 100,\n      calmarRatio,\n      sortinoRatio,\n      omegaRatio: positiveReturns.length > 0 && negativeReturns.length > 0 \n        ? (positiveReturns.reduce((sum, r) => sum + r, 0) / positiveReturns.length) / \n          (Math.abs(negativeReturns.reduce((sum, r) => sum + r, 0) / negativeReturns.length)) : 0,\n      tailRatio: negativeReturns.length > 1 ? Math.abs(var95 / var99) : 0,\n      gainToLossRatio: avgLoss > 0 ? avgWin / avgLoss : 0,\n      payoffRatio: avgLoss > 0 ? avgWin / avgLoss : 0,\n      expectancy: (result.winRate / 100 * avgWin) - ((100 - result.winRate) / 100 * avgLoss),\n      systemQualityNumber: result.sharpeRatio * Math.sqrt(result.totalTrades),\n      kRatio: returns.length > 1 ? avgReturn / (Math.max(...returns) - Math.min(...returns)) : 0,\n      ulcerIndex: Math.sqrt(result.trades.reduce((sum, t, i) => {\n        const dd = result.trades.slice(0, i + 1).reduce((maxBalance, trade) => Math.max(maxBalance, trade.balance), 0);\n        const drawdown = dd > 0 ? Math.pow((dd - t.balance) / dd * 100, 2) : 0;\n        return sum + drawdown;\n      }, 0) / result.trades.length),\n      recoveryFactor: result.maxDrawdown > 0 ? (result.finalBalance - result.initialBalance) / result.maxDrawdown : 0,\n      profitabilityIndex: result.initialBalance > 0 ? (result.finalBalance - result.initialBalance) / result.initialBalance : 0\n    };\n  };\n  */\n\n  const exportResults = async (_format: 'csv' | 'pdf' | 'excel') => {\n    if (!activeSession?.result) return;\n    \n    // Implement export functionality\n    // console.log(`Exporting results in ${format} format`);\n    // This would integrate with a reporting service\n  };\n\n  const renderSetupTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-bg-tertiary p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4 flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          Backtest Configuration\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Strategy\n            </label>\n            <select\n              value={selectedStrategy?.id || ''}\n              onChange={(e) => {\n                const strategy = strategies.find(s => s.id === e.target.value);\n                setSelectedStrategy(strategy || null);\n              }}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"\">Select a strategy</option>\n              {strategies.map(strategy => (\n                <option key={strategy.id} value={strategy.id}>\n                  {strategy.name} ({strategy.type})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Initial Balance (USD)\n            </label>\n            <div className=\"space-y-2\">\n              <input\n                type=\"number\"\n                min=\"100\"\n                max=\"1000000\"\n                step=\"100\"\n                value={backtestOptions.initialBalance}\n                onChange={(e) => setBacktestOptions({\n                  ...backtestOptions,\n                  initialBalance: parseFloat(e.target.value) || 10000\n                })}\n                className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Enter amount (min: $100)\"\n              />\n              <div className=\"flex flex-wrap gap-2\">\n                {[1000, 5000, 10000, 25000, 50000, 100000].map(amount => (\n                  <button\n                    key={amount}\n                    type=\"button\"\n                    onClick={() => setBacktestOptions({\n                      ...backtestOptions,\n                      initialBalance: amount\n                    })}\n                    className={`px-3 py-1 text-xs rounded-md border transition-colors ${\n                      backtestOptions.initialBalance === amount\n                        ? 'bg-blue-100 border-blue-300 text-blue-700'\n                        : 'bg-bg-secondary border-border-subtle text-gray-600 hover:bg-bg-tertiary'\n                    }`}\n                  >\n                    ${amount.toLocaleString()}\n                  </button>\n                ))}\n              </div>\n              <p className=\"text-xs text-text-muted\">\n                Choose a starting balance for your backtest simulation\n              </p>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Start Date\n            </label>\n            <input\n              type=\"date\"\n              value={backtestOptions.startDate}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                startDate: e.target.value\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              End Date\n            </label>\n            <input\n              type=\"date\"\n              value={backtestOptions.endDate}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                endDate: e.target.value\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Fee Rate (%)\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.001\"\n              value={backtestOptions.feeRate * 100}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                feeRate: parseFloat(e.target.value) / 100\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Slippage (%)\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.001\"\n              value={backtestOptions.slippage * 100}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                slippage: parseFloat(e.target.value) / 100\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mt-6 flex justify-end space-x-3\">\n          <button\n            onClick={runBacktest}\n            disabled={!selectedStrategy || isRunning}\n            className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            {isRunning ? 'Running Backtest...' : 'Run Backtest'}\n          </button>\n        </div>\n      </div>\n\n      {/* Session History */}\n      <div className=\"bg-bg-tertiary p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4\">Recent Sessions</h3>\n        <div className=\"space-y-3\">\n          {sessions.slice(0, 5).map(session => (\n            <div\n              key={session.id}\n              onClick={() => setActiveSession(session)}\n              className={`p-4 border rounded-md cursor-pointer transition-colors ${\n                activeSession?.id === session.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-border-subtle hover:border-gray-300'\n              }`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">{session.name}</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {session.strategy.name} • {session.createdAt.toLocaleDateString()}\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    session.status === 'completed' ? 'bg-green-100 text-green-800' :\n                    session.status === 'running' ? 'bg-yellow-100 text-yellow-800' :\n                    session.status === 'failed' ? 'bg-red-100 text-red-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {session.status}\n                  </span>\n                  {session.result && (\n                    <span className={`text-sm font-medium ${\n                      session.result.totalPnL > 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {session.result.totalPnL > 0 ? '+' : ''}${session.result.totalPnL.toFixed(2)}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderResultsTab = () => {\n    if (!activeSession?.result) {\n      return (\n        <div className=\"bg-bg-tertiary p-8 rounded-lg shadow text-center\">\n          <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-text-primary mb-2\">No Results Available</h3>\n          <p className=\"text-gray-600\">Run a backtest to see results here.</p>\n        </div>\n      );\n    }\n\n    const result = activeSession.result;\n    const metrics = activeSession.advancedMetrics;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Key Performance Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"bg-bg-tertiary p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"w-8 h-8 text-green-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Return</p>\n                <p className={`text-xl font-bold ${result.totalPnL > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {((result.finalBalance - result.initialBalance) / result.initialBalance * 100).toFixed(2)}%\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-tertiary p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <BarChart3 className=\"w-8 h-8 text-blue-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Sharpe Ratio</p>\n                <p className=\"text-xl font-bold\">{result.sharpeRatio.toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-tertiary p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"w-8 h-8 text-red-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Max Drawdown</p>\n                <p className=\"text-xl font-bold text-red-600\">{result.maxDrawdown.toFixed(2)}%</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-bg-tertiary p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Activity className=\"w-8 h-8 text-purple-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Win Rate</p>\n                <p className=\"text-xl font-bold\">{result.winRate.toFixed(1)}%</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Advanced Risk Metrics */}\n        {metrics && (\n          <div className=\"bg-bg-tertiary p-6 rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-4\">Advanced Risk Metrics</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">VaR (95%)</p>\n                <p className=\"text-lg font-bold\">{metrics.valueAtRisk95.toFixed(2)}%</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">CVaR (95%)</p>\n                <p className=\"text-lg font-bold\">{metrics.conditionalVaR95.toFixed(2)}%</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Calmar Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.calmarRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Sortino Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.sortinoRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Omega Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.omegaRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Expectancy</p>\n                <p className=\"text-lg font-bold\">${metrics.expectancy.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Ulcer Index</p>\n                <p className=\"text-lg font-bold\">{metrics.ulcerIndex.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Recovery Factor</p>\n                <p className=\"text-lg font-bold\">{metrics.recoveryFactor.toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Equity Curve Chart */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Equity Curve</h3>\n          <div className=\"h-64\">\n            <Line\n              data={{\n                labels: result.trades.map((_, i) => i + 1),\n                datasets: [\n                  {\n                    label: 'Equity',\n                    data: result.trades.map(t => t.balance),\n                    borderColor: 'rgb(59, 130, 246)',\n                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                    tension: 0.1,\n                    fill: true\n                  }\n                ]\n              }}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                  y: {\n                    beginAtZero: false\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n\n        {/* Trade Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Trade Analysis</h3>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-3\">P&L Distribution</h4>\n              <div className=\"h-48\">\n                <Bar\n                  data={{\n                    labels: ['Winning Trades', 'Losing Trades'],\n                    datasets: [\n                      {\n                        label: 'Count',\n                        data: [result.winningTrades, result.losingTrades],\n                        backgroundColor: ['rgba(34, 197, 94, 0.8)', 'rgba(239, 68, 68, 0.8)'],\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false\n                  }}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium mb-3\">Monthly Returns</h4>\n              <div className=\"h-48\">\n                <Line\n                  data={{\n                    labels: result.metrics.monthlyReturns.map((_, i) => `Month ${i + 1}`),\n                    datasets: [\n                      {\n                        label: 'Monthly Return',\n                        data: result.metrics.monthlyReturns,\n                        borderColor: 'rgb(168, 85, 247)',\n                        backgroundColor: 'rgba(168, 85, 247, 0.1)',\n                        tension: 0.1\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderDataTab = () => (\n    <div className=\"space-y-6\">\n      <HistoricalDataManager \n        onDataLoaded={(_data) => {\n          setHistoricalDataLoaded(true);\n          // console.log('Historical data loaded:', data);\n        }}\n      />\n      \n      {historicalDataLoaded && (\n        <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n          <div className=\"flex items-center\">\n            <Database className=\"w-5 h-5 text-green-600 mr-2\" />\n            <span className=\"text-sm text-green-700 font-medium\">\n              Historical data successfully loaded and ready for backtesting\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderAnalysisTab = () => {\n    if (!activeSession?.advancedMetrics) {\n      return (\n        <div className=\"bg-white p-8 rounded-lg shadow text-center\">\n          <PieChart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-text-primary mb-2\">Advanced Analysis</h3>\n          <p className=\"text-gray-600\">Run a backtest to see advanced analysis and risk metrics.</p>\n        </div>\n      );\n    }\n\n    const metrics = activeSession.advancedMetrics;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Risk Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Risk Analysis</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-red-800 mb-2\">Value at Risk</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-red-600\">VaR (95%)</span>\n                  <span className=\"font-bold text-red-800\">{metrics.valueAtRisk95.toFixed(2)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-red-600\">VaR (99%)</span>\n                  <span className=\"font-bold text-red-800\">{metrics.valueAtRisk99.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-orange-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-orange-800 mb-2\">Conditional VaR</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-orange-600\">CVaR (95%)</span>\n                  <span className=\"font-bold text-orange-800\">{metrics.conditionalVaR95.toFixed(2)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-orange-600\">CVaR (99%)</span>\n                  <span className=\"font-bold text-orange-800\">{metrics.conditionalVaR99.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 mb-2\">Advanced Ratios</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-brand-cyan\">Calmar Ratio</span>\n                  <span className=\"font-bold text-blue-800\">{metrics.calmarRatio.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-brand-cyan\">Sortino Ratio</span>\n                  <span className=\"font-bold text-blue-800\">{metrics.sortinoRatio.toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Downside Risk Metrics */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Downside Risk Metrics</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Ulcer Index</p>\n              <p className=\"text-lg font-bold\">{metrics.ulcerIndex.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Pain Index</p>\n              <p className=\"text-lg font-bold\">{metrics.painIndex.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Martin Ratio</p>\n              <p className=\"text-lg font-bold\">{metrics.martinRatio.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Burke Ratio</p>\n              <p className=\"text-lg font-bold\">{metrics.burkeRatio.toFixed(2)}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Distribution Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Return Distribution Analysis</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-3\">Statistical Measures</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Skewness</span>\n                  <span className=\"font-medium\">{metrics.skewness.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Kurtosis</span>\n                  <span className=\"font-medium\">{metrics.kurtosis.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Tail Ratio</span>\n                  <span className=\"font-medium\">{metrics.tailRatio.toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-3\">Upside Potential</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Upness Index</span>\n                  <span className=\"font-medium\">{(metrics.upnessIndex * 100).toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Upside Potential Ratio</span>\n                  <span className=\"font-medium\">{metrics.upsidePotentialRatio.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Gain to Pain Ratio</span>\n                  <span className=\"font-medium\">{metrics.gainToPainRatio.toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Attribution */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Performance Attribution</h3>\n          <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n            <PieChart className=\"w-8 h-8 text-brand-cyan mx-auto mb-2\" />\n            <p className=\"text-blue-700 font-medium\">Factor Analysis</p>\n            <p className=\"text-sm text-brand-cyan mt-1\">\n              Factor decomposition and performance attribution analysis coming in next update\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderReportsTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4\">Export Results</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button\n            onClick={() => exportResults('csv')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export CSV\n          </button>\n          <button\n            onClick={() => exportResults('excel')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export Excel\n          </button>\n          <button\n            onClick={() => exportResults('pdf')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export PDF Report\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-text-primary flex items-center\">\n          <Zap className=\"w-8 h-8 mr-3 text-brand-cyan\" />\n          Advanced Backtesting Engine\n        </h1>\n        <p className=\"mt-2 text-gray-600\">\n          Comprehensive strategy testing with advanced risk metrics and performance analysis\n        </p>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-border-subtle\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'setup', label: 'Setup', icon: Settings },\n              { id: 'data', label: 'Historical Data', icon: Database },\n              { id: 'results', label: 'Results', icon: TrendingUp },\n              { id: 'analysis', label: 'Analysis', icon: BarChart3 },\n              { id: 'reports', label: 'Reports', icon: Download }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as 'setup' | 'data' | 'results' | 'analysis' | 'reports')}\n                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center ${\n                  activeTab === id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-text-muted hover:text-text-secondary hover:border-border-moderate'\n                }`}\n              >\n                <Icon className=\"w-4 h-4 mr-2\" />\n                {label}\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'setup' && renderSetupTab()}\n      {activeTab === 'data' && renderDataTab()}\n      {activeTab === 'results' && renderResultsTab()}\n      {activeTab === 'analysis' && renderAnalysisTab()}\n      {activeTab === 'reports' && renderReportsTab()}\n    </div>\n  );\n};\n\nexport default Backtesting;\n"],"names":["_AdvancedBacktestService","__publicField","strategy","options","data","primaryData","balance","trades","highWaterMark","equityCurve","i","marketData","signal","executeStrategy","candle","price","amount","trade","drawdown","basicMetrics","advancedMetrics","t","strategyResults","rebalanceEvents","result","correlationMatrix","portfolioReturns","diversificationRatio","sum","r","scenarios","results","scenario","stressedResult","request","cacheKey","timeframe","symbol","poloniexApi","window","returns","prev","cur","denom","volatility","basePositionPercent","volatilityAdjustment","adjustedPercent","type","volumeImpact","volatilityImpact","enhancedSlippage","executionPrice","total","fee","pnl","pnlPercent","newBalance","initialBalance","dailyReturns","monthlyReturns","sortedReturns","a","b","negativeReturns","positiveReturns","mean","variance","stdDev","skewness","kurtosis","var95Index","var99Index","var95Value","var99Value","cvar95","cvar99","downsideReturns","downsideDeviation","sortinoRatio","maxDrawdown","e","calmarRatio","ulcerIndex","martinRatio","threshold","gainsAboveThreshold","lossesBelowThreshold","omegaRatio","last","n","factor","adjustment","gains","pains","annualizedReturn","burkeRatio","sharpe","modification","upsidePotential","mdd","dailyPnL","date","currentPnL","monthlyPnL","monthKey","peak","avgReturn","grossProfit","grossLoss","totalHoldingTime","positions","tNext","j","resI","resJ","returns1","returns2","mean1","mean2","numerator","sumSq1","sumSq2","v1","v2","diff1","diff2","denominator","weights","maxLength","weightedReturn","w","weightedVolatility","tradesI","s","portfolioVariance","tradesJ","vol_i","vol_j","corr","wi","wj","portfolioVolatility","cumulative","ret","_scenario","AdvancedBacktestService","advancedBacktestService","HistoricalDataManager","onDataLoaded","setRequest","useState","dataQuality","setDataQuality","isLoading","setIsLoading","loadingProgress","setLoadingProgress","error","setError","availableSymbols","availableTimeframes","addSymbol","removeSymbol","toggleTimeframe","loadHistoricalData","totalSteps","completedSteps","mockDataQuality","historicalData","resolve","totalCandles","missingCandles","completeness","mockData","basePrice","timestamp","open","close","high","low","volume","err","exportDataRequest","dataStr","dataUri","exportFileDefaultName","linkElement","getQualityColor","getQualityIcon","jsx","CheckCircle","AlertCircle","jsxs","Database","Download","value","label","Calendar","Filter","Fragment","TrendingUp","quality","index","q","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","Backtesting","strategies","useTradingContext","selectedStrategy","setSelectedStrategy","backtestOptions","setBacktestOptions","sessions","setSessions","activeSession","setActiveSession","isRunning","setIsRunning","activeTab","setActiveTab","historicalDataLoaded","setHistoricalDataLoaded","useEffect","firstStrategy","runBacktest","sessionId","newSession","updatedSession","failedSession","exportResults","_format","renderSetupTab","Settings","Play","session","renderResultsTab","metrics","BarChart3","AlertTriangle","Activity","Line","_","Bar","renderDataTab","_data","renderAnalysisTab","PieChart","renderReportsTab","Zap","id","Icon"],"mappings":"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"}