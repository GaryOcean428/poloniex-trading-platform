[{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/APIErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/AccessibleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/AccessibleForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/AccessibleModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/AccountBalanceDisplay.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":22,"suggestions":[{"fix":{"range":[946,1008],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { poloniexApi } from '@/services/poloniexAPI';\nimport APIErrorBoundary from '@/components/APIErrorBoundary';\nimport useAPICall from '@/hooks/useAPICall';\n\ninterface AccountBalanceDisplayProps {\n  pair?: string;\n}\n\ninterface AccountBalance {\n  currency: string;\n  available: string;\n  onOrders: string;\n  btcValue: string;\n}\n\n/**\n * Example component showing proper error handling for API calls\n * This replaces the old pattern of silent fallbacks to mock data\n */\nexport const AccountBalanceDisplay: React.FC<AccountBalanceDisplayProps> = () => {\n  const [accountBalance, setAccountBalance] = useState<AccountBalance[] | null>(null);\n\n  // Use the new useAPICall hook for proper error handling\n  const {\n    data: balance,\n    loading,\n    error,\n    execute: fetchBalance,\n    retry\n  } = useAPICall(\n    () => poloniexApi.getAccountBalance(),\n    {\n      onError: (error) => {\n        console.error('Account balance fetch failed:', error.message);\n      },\n      retryCount: 3,\n      retryDelay: 1000\n    }\n  );\n\n  // Initial load\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  // Update state when data is available\n  useEffect(() => {\n    if (balance) {\n      setAccountBalance(balance);\n    }\n  }, [balance]);\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Account Balance</h3>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state - show error boundary instead of mock data\n  if (error) {\n    return (\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Account Balance</h3>\n        <APIErrorBoundary \n          error={error} \n          onRetry={retry}\n          context=\"Account Balance\"\n        />\n      </div>\n    );\n  }\n\n  // Success state\n  if (accountBalance) {\n    return (\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Account Balance</h3>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">Total Amount</p>\n            <p className=\"text-lg font-semibold text-gray-900\">${accountBalance.totalAmount}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">Available</p>\n            <p className=\"text-lg font-semibold text-gray-900\">${accountBalance.availableAmount}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">Account Equity</p>\n            <p className=\"text-lg font-semibold text-gray-900\">${accountBalance.accountEquity}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">Unrealized PnL</p>\n            <p className={`text-lg font-semibold ${\n              parseFloat(accountBalance.unrealizedPnL) >= 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              ${accountBalance.unrealizedPnL}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // No data state (shouldn't happen with proper error handling)\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Account Balance</h3>\n      <p className=\"text-gray-500\">No account data available</p>\n    </div>\n  );\n};\n\nexport default AccountBalanceDisplay;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ConfigurationStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ConnectionHealth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ConnectionStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ConnectionTest.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":27,"suggestions":[{"fix":{"range":[2200,2313],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":27,"suggestions":[{"fix":{"range":[2691,2744],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":21,"suggestions":[{"fix":{"range":[3732,3769],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":25,"suggestions":[{"fix":{"range":[4343,4455],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":25,"suggestions":[{"fix":{"range":[4769,4815],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/EnvDebug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/EnvironmentStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ErrorAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"fix":{"range":[1759,1814],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":18,"suggestions":[{"fix":{"range":[1819,1859],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":20,"suggestions":[{"fix":{"range":[1951,2032],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, type ReactNode, type ErrorInfo } from 'react';\nimport { ErrorFallback } from './ErrorFallback';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  errorCount: number;\n  errorId: string;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: React.ComponentType<{\n    error: Error | null;\n    errorInfo: ErrorInfo | null;\n    errorCount: number;\n    onReset: () => void;\n  }>;\n}\n\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private resetTimeoutId: number | null = null;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorCount: 0,\n      errorId: ''\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n      errorId: `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState(prevState => ({\n      errorInfo,\n      errorCount: prevState.errorCount + 1\n    }));\n\n    // Log error to monitoring service\n    this.logError(error, errorInfo);\n\n    // Auto-reset after 30 seconds for non-critical errors, but only for first few errors\n    if (this.state.errorCount < 3 && !this.isInitializationError(error)) {\n      this.resetTimeoutId = window.setTimeout(() => {\n        this.handleReset();\n      }, 30000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.resetTimeoutId) {\n      clearTimeout(this.resetTimeoutId);\n    }\n  }\n\n  private logError = (error: Error, errorInfo: ErrorInfo) => {\n    // Log to console for development\n    console.error('ErrorBoundary caught an error:', error);\n    console.error('Error info:', errorInfo);\n\n    // Check for initialization errors\n    if (this.isInitializationError(error)) {\n      console.error('Initialization error detected - this may require a page refresh');\n    }\n\n    // In production, this would send to a logging service\n    if (process.env.NODE_ENV === 'production') {\n      // Example: Send to monitoring service\n      // logErrorToService(error, errorInfo, this.state.errorCount);\n    }\n  };\n\n  private isInitializationError = (error: Error): boolean => {\n    const message = error.message || '';\n    return (\n      message.includes('Cannot access') && message.includes('before initialization') ||\n      message.includes('temporal dead zone') ||\n      message.includes('ReferenceError') ||\n      // React Error #185 - Maximum update depth exceeded (infinite loop)\n      message.includes('185') ||\n      message.includes('Maximum update depth exceeded') ||\n      message.includes('infinite') ||\n      message.includes('hydration') ||\n      message.includes('Text content does not match server-rendered HTML') ||\n      message.includes('Hydration failed')\n    );\n  };\n\n  private handleReset = () => {\n    if (this.resetTimeoutId) {\n      clearTimeout(this.resetTimeoutId);\n      this.resetTimeoutId = null;\n    }\n\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: ''\n    });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback || ErrorFallback;\n      \n      return (\n        <FallbackComponent\n          error={this.state.error}\n          errorCount={this.state.errorCount}\n          onReset={this.handleReset}\n        />\n      );\n    }\n\n    return this.props.children;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Extension/ExtensionControls.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":22,"suggestions":[{"fix":{"range":[1175,1232],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// React is used implicitly for JSX transformation\nimport { useState } from 'react';\nimport { X, RefreshCw, Info } from 'lucide-react';\nimport ExtensionStatus from './ExtensionStatus';\nimport ExtensionSettings from './ExtensionSettings';\n\ninterface ExtensionControlsProps {\n  onClose?: () => void;\n}\n\nconst ExtensionControls: React.FC<ExtensionControlsProps> = ({ onClose }) => {\n  // Using settings hook for extension configuration\n  const [activePanel, setActivePanel] = useState<'status' | 'settings' | 'info'>('status');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  const handleRefresh = () => {\n    setIsRefreshing(true);\n    \n    // Refresh data from extension\n    if (window.chrome && chrome.runtime && chrome.runtime.sendMessage) {\n      try {\n        // Extension ID will need to be updated with your actual extension ID\n        const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje';\n        \n        chrome.runtime.sendMessage(\n          extensionId,\n          { type: 'REFRESH_DATA' },\n          () => {\n            // Removed unused response parameter\n            setIsRefreshing(false);\n          }\n        );\n      } catch (error) {\n        console.error('Error refreshing extension data:', error);\n        setIsRefreshing(false);\n      }\n    } else {\n      // Chrome extension API not available, simulate refresh\n      setTimeout(() => {\n        setIsRefreshing(false);\n      }, 1000);\n    }\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n      <div className=\"bg-neutral-800 text-white p-4 flex justify-between items-center\">\n        <h2 className=\"text-lg font-bold flex items-center\">\n          <svg className=\"h-5 w-5 mr-2\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M20.24 12.24c-1.07-.57-1.23-2.86-1.23-2.86-1.7 1.27-2.33-.28-2.33-.28-3.11 3.3-6.35.23-6.35.23v4.42c0 2.57-2.4 2.57-2.4 2.57H3.5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            <path d=\"M3.75 14.84V7.25c0-1.5 1.5-1.5 1.5-1.5H9.5V19h-4c-.83 0-1.75-.97-1.75-2.16v-2z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            <path d=\"M9.5 5.75v13.5M13.5 5.75c-.97 0-3 .4-4 1.48V4.23c1-.82 2.5-1.48 4-1.48 2 0 5 1 5 1.5v2c0 .5-3 .5-3 .5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n          </svg>\n          Extension Controls\n        </h2>\n        <div className=\"flex items-center space-x-2\">\n          <button \n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"p-1.5 rounded-md hover:bg-neutral-700 text-neutral-300 disabled:opacity-50\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </button>\n          {onClose && (\n            <button \n              onClick={onClose}\n              className=\"p-1.5 rounded-md hover:bg-neutral-700 text-neutral-300\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"border-b\">\n        <nav className=\"flex divide-x\">\n          <button\n            onClick={() => setActivePanel('status')}\n            className={`flex-1 py-2 px-3 flex justify-center items-center text-sm font-medium ${\n              activePanel === 'status' ? 'bg-blue-50 text-blue-600' : 'bg-neutral-50 text-neutral-600 hover:bg-neutral-100'\n            }`}\n          >\n            Status\n          </button>\n          <button\n            onClick={() => setActivePanel('settings')}\n            className={`flex-1 py-2 px-3 flex justify-center items-center text-sm font-medium ${\n              activePanel === 'settings' ? 'bg-blue-50 text-blue-600' : 'bg-neutral-50 text-neutral-600 hover:bg-neutral-100'\n            }`}\n          >\n            Settings\n          </button>\n          <button\n            onClick={() => setActivePanel('info')}\n            className={`flex-1 py-2 px-3 flex justify-center items-center text-sm font-medium ${\n              activePanel === 'info' ? 'bg-blue-50 text-blue-600' : 'bg-neutral-50 text-neutral-600 hover:bg-neutral-100'\n            }`}\n          >\n            Info\n          </button>\n        </nav>\n      </div>\n      \n      <div className=\"p-4\">\n        {activePanel === 'status' && <ExtensionStatus onRefreshRequest={handleRefresh} />}\n        \n        {activePanel === 'settings' && <ExtensionSettings />}\n        \n        {activePanel === 'info' && (\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-medium text-lg mb-2 flex items-center\">\n                <Info className=\"h-5 w-5 mr-2 text-blue-500\" />\n                About This Extension\n              </h3>\n              <p className=\"text-neutral-600\">\n                This Chrome extension allows you to integrate TradingView's charting capabilities with Poloniex's trading platform.\n                Extract chart data, execute trades directly from the chart, and manage your positions all in one place.\n              </p>\n            </div>\n            \n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"font-medium mb-1\">Features:</div>\n              <ul className=\"text-sm text-neutral-600 space-y-1 pl-5 list-disc\">\n                <li>Real-time data extraction from TradingView charts</li>\n                <li>One-click trading directly from TradingView</li>\n                <li>Automated trading based on chart indicators</li>\n                <li>Account and position management</li>\n                <li>Risk management controls</li>\n                <li>Secure API credential storage</li>\n              </ul>\n            </div>\n            \n            <div className=\"bg-blue-50 p-3 rounded-md\">\n              <div className=\"font-medium mb-1 text-blue-700\">Getting Started:</div>\n              <ol className=\"text-sm text-blue-600 space-y-1 pl-5 list-decimal\">\n                <li>Install the Chrome extension from the Extension page</li>\n                <li>Enter your Poloniex API credentials in Settings</li>\n                <li>Visit TradingView to activate chart data extraction</li>\n                <li>Start trading directly from TradingView charts</li>\n              </ol>\n            </div>\n            \n            <div className=\"mt-4 text-neutral-500 text-xs\">\n              Extension Version: 1.0.0\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ExtensionControls;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Extension/ExtensionSecurityManager.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":24,"suggestions":[{"fix":{"range":[960,1015],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { \n  isChromeExtension, \n  initExtensionSecurity, \n  getExtensionStatus\n} from '@/utils/chromeExtension';\n\n/**\n * Component that initializes and monitors extension security\n */\nconst ExtensionSecurityManager: React.FC = () => {\n  useEffect(() => {\n    // Initialize extension security on component mount\n    if (isChromeExtension()) {\n      // Generate a unique security token for this session\n      const securityToken = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n      \n      // Initialize extension security with the token\n      initExtensionSecurity(securityToken);\n      \n      // Store token in session storage for extension verification\n      sessionStorage.setItem('extension_security_token', securityToken);\n      \n      // Set up periodic status check\n      const checkStatus = async () => {\n        try {\n          await getExtensionStatus();\n        } catch (error) {\n          console.error('Extension status check failed:', error);\n        }\n      };\n      \n      // Check status immediately\n      checkStatus();\n      \n      // Set up interval for periodic checks\n      const statusInterval = setInterval(checkStatus, 30000);\n      \n      // Clean up on unmount\n      return () => {\n        clearInterval(statusInterval);\n      };\n    }\n  }, []);\n\n  // This component doesn't render anything visible\n  return null;\n};\n\nexport default ExtensionSecurityManager;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Extension/ExtensionSettings.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":22,"suggestions":[{"fix":{"range":[3190,3243],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":22,"suggestions":[{"fix":{"range":[3588,3648],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// React is used implicitly for JSX transformation\nimport { useState, useEffect } from 'react';\nimport { Shield, Lock, TerminalSquare, Zap } from 'lucide-react';\nimport { useSettings } from '../../hooks/useSettings';\n\ninterface ExtensionSettingsProps {\n  onClose?: () => void;\n}\n\ninterface ExtensionResponse {\n  installed?: boolean;\n  connected?: boolean;\n  status?: string;\n}\n\nconst ExtensionSettings: React.FC<ExtensionSettingsProps> = ({ onClose }) => {\n  const { apiKey, apiSecret, updateSettings } = useSettings();\n  const [extensionStatus, setExtensionStatus] = useState<string>('Not detected');\n  const [formData, setFormData] = useState({\n    extensionEnabled: true,\n    tradingViewEnabled: true,\n    poloniexEnabled: true,\n    autoConnect: true,\n    notificationsEnabled: true,\n    riskLimit: 50,\n    apiKey: apiKey,\n    apiSecret: apiSecret\n  });\n\n  // Check if the extension is installed\n  useEffect(() => {\n    if (window.chrome && chrome.runtime && chrome.runtime.sendMessage) {\n      try {\n        // Extension ID will need to be updated with your actual extension ID\n        const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje';\n        \n        chrome.runtime.sendMessage(\n          extensionId,\n          { type: 'CHECK_INSTALLATION' },\n          (response: ExtensionResponse) => {\n            if (response && response.installed) {\n              setExtensionStatus('Connected');\n            } else {\n              setExtensionStatus('Not detected');\n            }\n          }\n        );\n      } catch {\n        setExtensionStatus('Not detected');\n      }\n    }\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleRangeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: parseInt(value, 10)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Save API credentials\n    if (formData.apiKey !== apiKey || formData.apiSecret !== apiSecret) {\n      updateSettings({\n        apiKey: formData.apiKey,\n        apiSecret: formData.apiSecret\n      });\n    }\n    \n    // If we have a chrome extension API and it's installed\n    if (window.chrome && chrome.runtime && chrome.runtime.sendMessage && extensionStatus === 'Connected') {\n      // Extension ID will need to be updated with your actual extension ID\n      const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje';\n      \n      // Update extension settings\n      chrome.runtime.sendMessage(\n        extensionId,\n        { \n          type: 'UPDATE_SETTINGS',\n          data: {\n            extensionEnabled: formData.extensionEnabled,\n            tradingViewEnabled: formData.tradingViewEnabled,\n            poloniexEnabled: formData.poloniexEnabled,\n            autoConnect: formData.autoConnect,\n            notificationsEnabled: formData.notificationsEnabled,\n            riskLimit: formData.riskLimit\n          }\n        },\n        (response: ExtensionResponse) => {\n          console.log('Extension settings updated:', response);\n        }\n      );\n      \n      // Update extension API credentials\n      chrome.runtime.sendMessage(\n        extensionId,\n        {\n          type: 'UPDATE_CREDENTIALS',\n          data: {\n            apiKey: formData.apiKey,\n            apiSecret: formData.apiSecret\n          }\n        },\n        (response: ExtensionResponse) => {\n          console.log('Extension API credentials updated:', response);\n        }\n      );\n    }\n    \n    // Close the settings panel if a handler was provided\n    if (onClose) {\n      onClose();\n    }\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-5\">\n      <div className=\"flex items-center justify-between mb-5\">\n        <h2 className=\"text-xl font-bold flex items-center\">\n          <Shield className=\"h-5 w-5 mr-2 text-blue-500\" />\n          Extension Settings\n        </h2>\n        <div className={`px-2 py-1 text-xs rounded-full ${\n          extensionStatus === 'Connected' \n            ? 'bg-green-100 text-green-800' \n            : 'bg-yellow-100 text-yellow-800'\n        }`}>\n          {extensionStatus}\n        </div>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"space-y-5\">\n          <div className=\"border-b pb-4\">\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <TerminalSquare className=\"h-4 w-4 mr-2 text-neutral-500\" />\n              Extension Configuration\n            </h3>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"extensionEnabled\" className=\"text-sm text-neutral-700\">\n                  Enable Extension\n                </label>\n                <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"extensionEnabled\" \n                    name=\"extensionEnabled\"\n                    checked={formData.extensionEnabled}\n                    onChange={handleChange}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-10 h-5 bg-neutral-200 rounded-full peer peer-checked:bg-blue-600 peer-checked:after:translate-x-5 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border after:rounded-full after:h-4 after:w-4 after:transition-all\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"tradingViewEnabled\" className=\"text-sm text-neutral-700\">\n                  TradingView Integration\n                </label>\n                <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"tradingViewEnabled\" \n                    name=\"tradingViewEnabled\"\n                    checked={formData.tradingViewEnabled}\n                    onChange={handleChange}\n                    disabled={!formData.extensionEnabled}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-10 h-5 bg-neutral-200 rounded-full peer peer-checked:bg-blue-600 peer-checked:after:translate-x-5 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border after:rounded-full after:h-4 after:w-4 after:transition-all\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"poloniexEnabled\" className=\"text-sm text-neutral-700\">\n                  Poloniex Integration\n                </label>\n                <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"poloniexEnabled\" \n                    name=\"poloniexEnabled\"\n                    checked={formData.poloniexEnabled}\n                    onChange={handleChange}\n                    disabled={!formData.extensionEnabled}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-10 h-5 bg-neutral-200 rounded-full peer peer-checked:bg-blue-600 peer-checked:after:translate-x-5 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border after:rounded-full after:h-4 after:w-4 after:transition-all\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"autoConnect\" className=\"text-sm text-neutral-700\">\n                  Auto-connect on startup\n                </label>\n                <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"autoConnect\" \n                    name=\"autoConnect\"\n                    checked={formData.autoConnect}\n                    onChange={handleChange}\n                    disabled={!formData.extensionEnabled}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-10 h-5 bg-neutral-200 rounded-full peer peer-checked:bg-blue-600 peer-checked:after:translate-x-5 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border after:rounded-full after:h-4 after:w-4 after:transition-all\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <label htmlFor=\"notificationsEnabled\" className=\"text-sm text-neutral-700\">\n                  Enable Notifications\n                </label>\n                <div className=\"relative inline-block w-10 mr-2 align-middle select-none\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"notificationsEnabled\" \n                    name=\"notificationsEnabled\"\n                    checked={formData.notificationsEnabled}\n                    onChange={handleChange}\n                    disabled={!formData.extensionEnabled}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-10 h-5 bg-neutral-200 rounded-full peer peer-checked:bg-blue-600 peer-checked:after:translate-x-5 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border after:rounded-full after:h-4 after:w-4 after:transition-all\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-b pb-4\">\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <Zap className=\"h-4 w-4 mr-2 text-neutral-500\" />\n              Trading Risk Management\n            </h3>\n            \n            <div>\n              <label htmlFor=\"riskLimit\" className=\"block text-sm text-neutral-700 mb-1\">\n                Max Position Size (% of Available Balance)\n              </label>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"range\"\n                  id=\"riskLimit\"\n                  name=\"riskLimit\"\n                  min=\"5\"\n                  max=\"100\"\n                  step=\"5\"\n                  value={formData.riskLimit}\n                  onChange={handleRangeChange}\n                  disabled={!formData.extensionEnabled}\n                  className=\"w-full h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer\"\n                />\n                <span className=\"ml-2 text-sm font-medium text-neutral-700 min-w-10\">\n                  {formData.riskLimit}%\n                </span>\n              </div>\n              <p className=\"mt-1 text-xs text-neutral-500\">\n                Limits the maximum size of any position you can open through the extension.\n              </p>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center\">\n              <Lock className=\"h-4 w-4 mr-2 text-neutral-500\" />\n              API Credentials\n            </h3>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label htmlFor=\"apiKey\" className=\"block text-sm text-neutral-700 mb-1\">\n                  Poloniex API Key\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"apiKey\"\n                  name=\"apiKey\"\n                  value={formData.apiKey}\n                  onChange={handleChange}\n                  placeholder=\"Your API Key\"\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"apiSecret\" className=\"block text-sm text-neutral-700 mb-1\">\n                  Poloniex API Secret\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"apiSecret\"\n                  name=\"apiSecret\"\n                  value={formData.apiSecret}\n                  onChange={handleChange}\n                  placeholder=\"Your API Secret\"\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                />\n              </div>\n              \n              <p className=\"text-xs text-neutral-500 mt-1\">\n                Your API keys are stored securely and never shared.\n                Create API keys with trading permissions in your Poloniex account.\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              Save Settings\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ExtensionSettings;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Extension/ExtensionStatus.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":22,"suggestions":[{"fix":{"range":[2719,2776],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// React is used implicitly for JSX transformation\nimport { useState, useEffect } from 'react';\nimport { Zap, Check, AlertTriangle, RefreshCw, MonitorSmartphone } from 'lucide-react';\n\ninterface ExtensionStatusProps {\n  onRefreshRequest?: () => void;\n}\n\nconst ExtensionStatus: React.FC<ExtensionStatusProps> = ({ onRefreshRequest }) => {\n  const [extensionStatus, setExtensionStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');\n  const [tradingViewStatus, setTradingViewStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');\n  const [poloniexStatus, setPoloniexStatus] = useState<'connected' | 'disconnected' | 'checking'>('checking');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  // Check extension connection status\n  useEffect(() => {\n    checkExtensionStatus();\n  }, []);\n  \n  const checkExtensionStatus = () => {\n    setExtensionStatus('checking');\n    setTradingViewStatus('checking');\n    setPoloniexStatus('checking');\n    setIsRefreshing(true);\n    \n    // Check if extension is installed\n    if (window.chrome && chrome.runtime && chrome.runtime.sendMessage) {\n      try {\n        // Extension ID will need to be updated with your actual extension ID\n        const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje';\n        \ninterface ExtensionResponse {\n  installed?: boolean;\n  connected?: boolean;\n  status?: string;\n}\n\n// Check extension installation status\n        chrome.runtime.sendMessage(\n          extensionId,\n          { type: 'CHECK_INSTALLATION' },\n          (response: ExtensionResponse) => {\n            if (response && response.installed) {\n              setExtensionStatus('connected');\n              \n              // Now check TradingView and Poloniex connection status\n              chrome.runtime.sendMessage(\n                extensionId,\n                { type: 'CHECK_TRADINGVIEW_STATUS' },\n                (response: ExtensionResponse) => {\n                  setTradingViewStatus(response && response.connected ? 'connected' : 'disconnected');\n                }\n              );\n              \n              chrome.runtime.sendMessage(\n                extensionId,\n                { type: 'CHECK_POLONIEX_STATUS' },\n                (response: ExtensionResponse) => {\n                  setPoloniexStatus(response && response.connected ? 'connected' : 'disconnected');\n                  setIsRefreshing(false);\n                }\n              );\n            } else {\n              setExtensionStatus('disconnected');\n              setTradingViewStatus('disconnected');\n              setPoloniexStatus('disconnected');\n              setIsRefreshing(false);\n            }\n          }\n        );\n      } catch (error) {\n        console.error('Error checking extension status:', error);\n        setExtensionStatus('disconnected');\n        setTradingViewStatus('disconnected');\n        setPoloniexStatus('disconnected');\n        setIsRefreshing(false);\n      }\n    } else {\n      // Chrome extension API not available\n      setExtensionStatus('disconnected');\n      setTradingViewStatus('disconnected');\n      setPoloniexStatus('disconnected');\n      setIsRefreshing(false);\n    }\n  };\n  \n  const handleRefresh = () => {\n    checkExtensionStatus();\n    if (onRefreshRequest) {\n      onRefreshRequest();\n    }\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-medium flex items-center\">\n          <MonitorSmartphone className=\"h-5 w-5 mr-2 text-blue-500\" />\n          Extension Status\n        </h3>\n        <button \n          onClick={handleRefresh}\n          disabled={isRefreshing}\n          className=\"p-1.5 bg-neutral-100 rounded-md hover:bg-neutral-200 text-neutral-600 disabled:opacity-50\"\n        >\n          <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n        </button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Zap className=\"h-4 w-4 mr-2 text-blue-500\" />\n            <span className=\"text-neutral-700\">Extension</span>\n          </div>\n          <StatusBadge status={extensionStatus} />\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <svg className=\"h-4 w-4 mr-2 text-blue-500\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M12 5L19 12L12 19M5 19L12 12L5 5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n            <span className=\"text-neutral-700\">TradingView</span>\n          </div>\n          <StatusBadge status={tradingViewStatus} />\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <svg className=\"h-4 w-4 mr-2 text-blue-500\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n              <path d=\"M12 6V18M18 12H6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n            </svg>\n            <span className=\"text-neutral-700\">Poloniex</span>\n          </div>\n          <StatusBadge status={poloniexStatus} />\n        </div>\n      </div>\n      \n      <div className=\"mt-4 text-sm\">\n        {extensionStatus === 'disconnected' ? (\n          <div className=\"text-yellow-700 flex items-start\">\n            <AlertTriangle className=\"h-4 w-4 mr-1 mt-0.5 flex-shrink-0\" />\n            <span>Extension not detected. Please install the Chrome extension to enable integration features.</span>\n          </div>\n        ) : extensionStatus === 'connected' && (tradingViewStatus === 'disconnected' || poloniexStatus === 'disconnected') ? (\n          <div className=\"text-yellow-700 flex items-start\">\n            <AlertTriangle className=\"h-4 w-4 mr-1 mt-0.5 flex-shrink-0\" />\n            <span>Some integrations are not connected. Please visit TradingView or Poloniex to activate them.</span>\n          </div>\n        ) : extensionStatus === 'connected' ? (\n          <div className=\"text-green-700 flex items-start\">\n            <Check className=\"h-4 w-4 mr-1 mt-0.5 flex-shrink-0\" />\n            <span>All systems connected. Trading integration is fully operational.</span>\n          </div>\n        ) : (\n          <div className=\"text-neutral-500 flex items-start\">\n            <RefreshCw className=\"h-4 w-4 mr-1 mt-0.5 flex-shrink-0 animate-spin\" />\n            <span>Checking connection status...</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface StatusBadgeProps {\n  status: 'connected' | 'disconnected' | 'checking';\n}\n\nconst StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {\n  switch (status) {\n    case 'connected':\n      return (\n        <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full flex items-center\">\n          <Check className=\"h-3 w-3 mr-1\" />\n          Connected\n        </span>\n      );\n    case 'disconnected':\n      return (\n        <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full flex items-center\">\n          <AlertTriangle className=\"h-3 w-3 mr-1\" />\n          Disconnected\n        </span>\n      );\n    case 'checking':\n      return (\n        <span className=\"px-2 py-1 bg-neutral-100 text-neutral-600 text-xs rounded-full flex items-center\">\n          <RefreshCw className=\"h-3 w-3 mr-1 animate-spin\" />\n          Checking\n        </span>\n      );\n  }\n};\n\nexport default ExtensionStatus;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Integration.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"fix":{"range":[788,845],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"fix":{"range":[947,1007],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":20,"suggestions":[{"fix":{"range":[1179,1232],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"fix":{"range":[1348,1399],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":26,"suggestions":[{"fix":{"range":[2072,2125],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":26,"suggestions":[{"fix":{"range":[2207,2267],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":18,"suggestions":[{"fix":{"range":[2341,2402],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":24,"suggestions":[{"fix":{"range":[3314,3366],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback } from 'react';\nimport { useSettings } from '../hooks/useSettings';\n\ninterface ExtensionMessage {\n  type: string;\n  data: unknown;\n}\n\n// Extension response types\ninterface ExtensionInstallResponse {\n  installed: boolean;\n}\n\ninterface ExtensionUpdateResponse {\n  success: boolean;\n}\n\nconst Integration: React.FC = () => {\n  const { apiKey, apiSecret } = useSettings();\n  const [isExtensionInstalled, setIsExtensionInstalled] = useState(false);\n  \n  const handleExtensionMessage = useCallback((event: MessageEvent) => {\n    // Ensure message is from our extension\n    if (event.source !== window || !event.data || event.data.source !== 'POLONIEX_EXTENSION') {\n      return;\n    }\n    \n    const message = event.data as ExtensionMessage;\n    console.log('Received message from extension:', message);\n    \n    switch (message.type) {\n      case 'PLACE_ORDER':\n        // Handle order placement\n        console.log('Order received from extension:', message.data);\n        // In a real app, this would call your order placement logic\n        break;\n        \n      case 'GET_ACCOUNT_DATA':\n        // Handle account data request\n        console.log('Account data requested from extension');\n        // In a real app, this would send account data to extension\n        break;\n        \n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  }, []);\n  \n  useEffect(() => {\n    // Check if extension is installed\n    try {\n      // This is a typical pattern to detect if your extension is installed\n      // by attempting to communicate with it\n      if (window.chrome && chrome.runtime && chrome.runtime.sendMessage) {\n        // Use the actual extension ID\n        const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje'; \n        \n        chrome.runtime.sendMessage(\n          extensionId,\n          { type: 'CHECK_INSTALLATION' },\n          (response: ExtensionInstallResponse | undefined) => {\n            if (response && response.installed) {\n              setIsExtensionInstalled(true);\n              console.log('Extension is installed and connected!');\n            } else {\n              setIsExtensionInstalled(false);\n              console.log('Extension is not installed or not responding');\n            }\n          }\n        );\n      }\n    } catch (error) {\n      console.log('Error checking extension installation:', error);\n      setIsExtensionInstalled(false);\n    }\n    \n    // Set up listener for messages from the extension\n    window.addEventListener('message', handleExtensionMessage);\n    \n    return () => {\n      window.removeEventListener('message', handleExtensionMessage);\n    };\n  }, [handleExtensionMessage]);\n  \n  // Update extension with credentials if available\n  useEffect(() => {\n    if (isExtensionInstalled && apiKey && apiSecret && window.chrome && chrome.runtime && chrome.runtime.sendMessage) {\n      const extensionId = 'jcdmopolmojdhpclfbemdpcdneobmnje';\n      \n      // Send credentials to extension\n      chrome.runtime.sendMessage(\n        extensionId,\n        { \n          type: 'UPDATE_CREDENTIALS', \n          data: { \n            apiKey,\n            apiSecret\n          }\n        },\n        (response: ExtensionUpdateResponse | undefined) => {\n          if (response && response.success) {\n            console.log('API credentials updated in extension');\n          }\n        }\n      );\n    }\n  }, [isExtensionInstalled, apiKey, apiSecret]);\n  \n  // This component doesn't render anything visible, it just handles extension communication\n  return null;\n};\n\nexport default Integration;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/MockModeNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/PWAInstallPrompt.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[797,800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[797,800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":18,"suggestions":[{"fix":{"range":[1413,1451],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"fix":{"range":[2134,2187],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"fix":{"range":[2211,2265],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":20,"suggestions":[{"fix":{"range":[2368,2424],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Download, X } from 'lucide-react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nconst PWAInstallPrompt: React.FC = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstallable, setIsInstallable] = useState(false);\n\n  useEffect(() => {\n    // Check if already dismissed\n    const dismissed = localStorage.getItem('pwa_install_dismissed') === 'true';\n    \n    // Check if already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isInWebAppiOS = (window.navigator as any).standalone === true;\n    const isInstalled = isStandalone || isInWebAppiOS;\n\n    if (dismissed || isInstalled) {\n      return;\n    }\n\n    const handleBeforeInstallPrompt = (e: Event) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      \n      const promptEvent = e as BeforeInstallPromptEvent;\n      setDeferredPrompt(promptEvent);\n      setIsInstallable(true);\n      \n      // Show our custom prompt after a short delay\n      setTimeout(() => {\n        setShowPrompt(true);\n      }, 5000); // Show after 5 seconds\n    };\n\n    const handleAppInstalled = () => {\n      console.log('PWA: App was installed');\n      setShowPrompt(false);\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n\n    try {\n      await deferredPrompt.prompt();\n      const choiceResult = await deferredPrompt.userChoice;\n      \n      if (choiceResult.outcome === 'accepted') {\n        console.log('PWA: User accepted the install prompt');\n      } else {\n        console.log('PWA: User dismissed the install prompt');\n      }\n      \n      setDeferredPrompt(null);\n      setShowPrompt(false);\n    } catch (error) {\n      console.error('PWA: Error during installation:', error);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    localStorage.setItem('pwa_install_dismissed', 'true');\n  };\n\n  if (!showPrompt || !isInstallable) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:max-w-sm bg-white border border-gray-200 rounded-lg shadow-lg p-4 z-50 animate-in slide-in-from-bottom duration-300\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <Download className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-sm font-medium text-gray-900\">\n              Install Poloniex Trading\n            </h3>\n            <p className=\"text-xs text-gray-600 mt-1\">\n              Add to your home screen for quick access and offline support\n            </p>\n          </div>\n        </div>\n        <button\n          onClick={handleDismiss}\n          className=\"flex-shrink-0 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded\"\n          aria-label=\"Dismiss install prompt\"\n        >\n          <X className=\"h-4 w-4\" />\n        </button>\n      </div>\n      \n      <div className=\"mt-3 flex space-x-2\">\n        <button\n          onClick={handleInstallClick}\n          className=\"flex-1 bg-blue-600 text-white text-sm font-medium py-2 px-3 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors\"\n        >\n          Install\n        </button>\n        <button\n          onClick={handleDismiss}\n          className=\"flex-1 bg-gray-100 text-gray-700 text-sm font-medium py-2 px-3 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors\"\n        >\n          Not now\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PWAInstallPrompt;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ResponsiveContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ResponsiveTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/RouteGuard.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":19,"suggestions":[{"fix":{"range":[544,597],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\ninterface RouteGuardProps {\n  children: React.ReactNode;\n}\n\n// Component to preserve navigation state and handle route transitions\nconst RouteGuard: React.FC<RouteGuardProps> = ({ children }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    // Add navigation state preservation logic here\n    // For now, we'll just log the route change in development\n    if (import.meta.env.DEV) {\n      console.info('Route changed to:', location.pathname);\n    }\n    \n    // Store current path in session storage for state preservation\n    sessionStorage.setItem('lastRoute', location.pathname);\n    \n    // Add route validation if needed\n    const validRoutes = [\n      '/', \n      '/strategies', \n      '/charts', \n      '/performance', \n      '/account', \n      '/chat', \n      '/settings', \n      '/extension'\n    ];\n    \n    // If route is not valid and not already a 404, redirect to 404\n    if (!validRoutes.includes(location.pathname) && location.pathname !== '/404') {\n      navigate('/404', { replace: true });\n    }\n  }, [location.pathname, navigate]);\n\n  return <>{children}</>;\n};\n\nexport default RouteGuard;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useTradingContext } from '../hooks/useTradingContext';\nimport { useResponsiveNav } from '../hooks/useResponsiveNav';\nimport { \n  LayoutDashboard, \n  LineChart, \n  Settings, \n  MessageSquare, \n  Zap,\n  BarChart4,\n  Chrome,\n  User,\n  Menu,\n  ArrowLeft,\n  TrendingUp,\n  Activity,\n  FileText,\n  Receipt,\n  History\n} from 'lucide-react';\n\nconst Sidebar: React.FC = () => {\n  const location = useLocation();\n  const { accountBalance, isLoading } = useTradingContext();\n  const { isDesktop } = useResponsiveNav();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  \n  const navItems = [\n    { path: '/', label: 'Dashboard', icon: <LayoutDashboard size={20} /> },\n    { path: '/dashboard/live', label: 'Live Trading', icon: <Activity size={20} /> },\n    { path: '/strategies', label: 'Trading Strategies', icon: <Zap size={20} /> },\n    { path: '/backtesting', label: 'Advanced Backtesting', icon: <TrendingUp size={20} /> },\n    { path: '/account', label: 'Account', icon: <User size={20} /> },\n    { path: '/transactions', label: 'Transaction History', icon: <Receipt size={20} /> },\n    { path: '/trades', label: 'Trade History', icon: <History size={20} /> },\n    { path: '/charts', label: 'Market Analysis', icon: <BarChart4 size={20} /> },\n    { path: '/performance', label: 'Performance', icon: <LineChart size={20} /> },\n    { path: '/chat', label: 'Community Chat', icon: <MessageSquare size={20} /> },\n    { path: '/extension', label: 'Chrome Extension', icon: <Chrome size={20} /> },\n    { path: '/settings', label: 'Settings', icon: <Settings size={20} /> }\n  ];\n  \n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  // Only show sidebar on desktop\n  if (!isDesktop) return null;\n  \n  return (\n    <aside \n      id=\"navigation\"\n      className={`\n        ${isCollapsed ? 'w-16' : 'w-64'} \n        bg-neutral-800 text-white transition-all duration-300 ease-in-out\n        relative flex-shrink-0\n      `}\n      role=\"navigation\"\n      aria-label=\"Main navigation\"\n    >\n      <div className=\"p-4\">\n        {/* Header with toggle */}\n        <div className=\"flex items-center justify-between mb-6 mt-2\">\n          <div className={`flex items-center ${isCollapsed ? 'justify-center' : ''}`}>\n            <Zap className=\"h-8 w-8 text-blue-400 mr-2\" aria-hidden=\"true\" />\n            {!isCollapsed && <h2 className=\"text-xl font-bold\">TradingBot</h2>}\n          </div>\n          <button\n            onClick={toggleSidebar}\n            className=\"p-1 rounded-md text-neutral-400 hover:text-white hover:bg-neutral-700 transition-colors\"\n            aria-label={isCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}\n            aria-expanded={!isCollapsed}\n          >\n            {isCollapsed ? <Menu size={20} aria-hidden=\"true\" /> : <ArrowLeft size={20} aria-hidden=\"true\" />}\n          </button>\n        </div>\n        \n        <nav aria-label=\"Main menu\">\n          <ul className=\"space-y-1\" role=\"list\">\n            {navItems.map((item) => (\n              <li key={item.path}>\n                <Link \n                  to={item.path} \n                  className={`\n                    flex items-center p-3 rounded-md transition-all duration-200 group\n                    ${location.pathname === item.path \n                      ? 'bg-blue-700 text-white' \n                      : 'text-neutral-300 hover:bg-neutral-700 hover:text-white'\n                    }\n                    ${isCollapsed ? 'justify-center' : ''}\n                  `}\n                  title={isCollapsed ? item.label : undefined}\n                  aria-label={item.label}\n                  aria-current={location.pathname === item.path ? 'page' : undefined}\n                >\n                  <span className={`flex-shrink-0 ${!isCollapsed ? 'mr-3' : ''}`} aria-hidden=\"true\">\n                    {item.icon}\n                  </span>\n                  {!isCollapsed && (\n                    <span className=\"transition-opacity duration-200\">{item.label}</span>\n                  )}\n                  \n                  {/* Tooltip for collapsed state */}\n                  {isCollapsed && (\n                    <div className=\"\n                      absolute left-full ml-2 px-2 py-1 \n                      bg-neutral-900 text-white text-sm rounded-md\n                      opacity-0 group-hover:opacity-100 transition-opacity duration-200\n                      pointer-events-none whitespace-nowrap z-50\n                    \">\n                      {item.label}\n                    </div>\n                  )}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      \n      {/* Account balance section */}\n      {!isCollapsed && (\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-neutral-700\">\n          <div className=\"bg-neutral-900 p-3 rounded-md\">\n            <div className=\"text-sm text-neutral-400 mb-2\">Account Balance</div>\n            {isLoading ? (\n              <div className=\"text-sm text-neutral-500\">Loading...</div>\n            ) : (\n              <>\n                <div className=\"text-lg font-semibold\">\n                  ${parseFloat(accountBalance?.totalAmount || '0').toFixed(2)} USDT\n                </div>\n                <div className={`text-xs mt-1 ${parseFloat(accountBalance?.todayPnL || '0') >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                  {parseFloat(accountBalance?.todayPnL || '0') >= 0 ? '+' : ''}\n                  {parseFloat(accountBalance?.todayPnLPercentage || '0').toFixed(2)}% today\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n};\n\nexport default Sidebar;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/SkipLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ToastContainer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'toasts'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [toasts.length, scheduleAutoRemoval, toasts]","fix":{"range":[1447,1483],"text":"[toasts.length, scheduleAutoRemoval, toasts]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'autoRemovalTimers.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'autoRemovalTimers.current' to a variable inside the effect, and use that variable in the cleanup function.","line":49,"column":25,"nodeType":"Identifier","endLine":49,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useCallback } from 'react';\nimport { X, CheckCircle, AlertCircle, AlertTriangle, Info } from 'lucide-react';\nimport { useAppStore } from '@/store';\nimport { clsx } from 'clsx';\n\nconst ToastContainer: React.FC = () => {\n  const toasts = useAppStore(state => state.toasts);\n  const removeToast = useAppStore(state => state.removeToast);\n  const autoRemovalTimers = useRef<Map<string, NodeJS.Timeout>>(new Map());\n\n  const scheduleAutoRemoval = useCallback((toastId: string) => {\n    // Clear existing timer if any\n    const existingTimer = autoRemovalTimers.current.get(toastId);\n    if (existingTimer) {\n      clearTimeout(existingTimer);\n    }\n\n    // Schedule new removal\n    const timer = setTimeout(() => {\n      removeToast(toastId);\n      autoRemovalTimers.current.delete(toastId);\n    }, 5000);\n\n    autoRemovalTimers.current.set(toastId, timer);\n  }, [removeToast]);\n\n  // Handle auto-removal for new toasts\n  useEffect(() => {\n    toasts.forEach(toast => {\n      if (toast.dismissible !== false && !autoRemovalTimers.current.has(toast.id)) {\n        scheduleAutoRemoval(toast.id);\n      }\n    });\n\n    // Clean up timers for removed toasts\n    const currentToastIds = new Set(toasts.map(t => t.id));\n    autoRemovalTimers.current.forEach((timer, toastId) => {\n      if (!currentToastIds.has(toastId)) {\n        clearTimeout(timer);\n        autoRemovalTimers.current.delete(toastId);\n      }\n    });\n  }, [toasts.length, scheduleAutoRemoval]); // Only depend on toasts.length to avoid infinite loops\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      autoRemovalTimers.current.forEach(timer => clearTimeout(timer));\n      autoRemovalTimers.current.clear();\n    };\n  }, []);\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'info':\n      default:\n        return <Info className=\"w-5 h-5 text-blue-500\" />;\n    }\n  };\n\n  const getToastStyles = (type: string) => {\n    const baseStyles = \"relative flex items-center p-4 mb-3 rounded-lg shadow-lg border transition-all duration-300 max-w-md\";\n    \n    switch (type) {\n      case 'success':\n        return clsx(baseStyles, \"bg-green-50 border-green-200 text-green-800\");\n      case 'error':\n        return clsx(baseStyles, \"bg-red-50 border-red-200 text-red-800\");\n      case 'warning':\n        return clsx(baseStyles, \"bg-yellow-50 border-yellow-200 text-yellow-800\");\n      case 'info':\n      default:\n        return clsx(baseStyles, \"bg-blue-50 border-blue-200 text-blue-800\");\n    }\n  };\n\n  if (toasts.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\">\n      {toasts.map((toast) => (\n        <div\n          key={toast.id}\n          className={getToastStyles(toast.type)}\n        >\n          <div className=\"flex items-start space-x-3 flex-1\">\n            {getIcon(toast.type)}\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium\">{toast.message}</p>\n            </div>\n          </div>\n          \n          {toast.dismissible !== false && (\n            <button\n              onClick={() => removeToast(toast.id)}\n              className=\"ml-3 flex-shrink-0 p-1 rounded-full hover:bg-gray-200 transition-colors\"\n              aria-label=\"Dismiss notification\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ToastContainer;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/TradingInsights.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateInsight'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [symbol, price, generateInsight]","fix":{"range":[891,906],"text":"[symbol, price, generateInsight]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"fix":{"range":[1547,1592],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Brain, TrendingUp, AlertTriangle, Clock, Zap, RefreshCw } from 'lucide-react';\nimport { openAITradingService, TradingInsight, TradingData } from '../services/openAIService';\n\ninterface TradingInsightsProps {\n  symbol?: string;\n  price?: number;\n  change24h?: number;\n  volume?: number;\n  className?: string;\n}\n\nconst TradingInsights: React.FC<TradingInsightsProps> = ({\n  symbol = 'BTC-USDT',\n  price = 41704,\n  change24h = -5.91,\n  volume = 569500,\n  className = ''\n}) => {\n  const [insights, setInsights] = useState<TradingInsight[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [userQuery, setUserQuery] = useState('');\n\n  // Load initial insights\n  useEffect(() => {\n    generateInsight();\n  }, [symbol, price]);\n\n  const generateInsight = async (customQuery?: string) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const tradingData: TradingData = {\n        symbol,\n        price,\n        change24h,\n        volume,\n        technicalIndicators: {\n          rsi: Math.random() * 100,\n          macd: (Math.random() - 0.5) * 10\n        }\n      };\n\n      const insight = await openAITradingService.generateTradingInsight(\n        tradingData,\n        customQuery\n      );\n\n      setInsights(prev => [insight, ...prev.slice(0, 4)]); // Keep last 5 insights\n    } catch (err) {\n      setError('Failed to generate trading insight');\n      console.error('Trading insight error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCustomQuery = async () => {\n    if (!userQuery.trim()) return;\n    await generateInsight(userQuery);\n    setUserQuery('');\n  };\n\n  const getInsightIcon = (type: TradingInsight['type']) => {\n    switch (type) {\n      case 'recommendation':\n        return <TrendingUp className=\"h-4 w-4\" />;\n      case 'risk_assessment':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'market_outlook':\n        return <Brain className=\"h-4 w-4\" />;\n      default:\n        return <Zap className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return 'text-green-600';\n    if (confidence >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const connectionStatus = openAITradingService.getConnectionStatus();\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Brain className=\"h-5 w-5 text-blue-600\" />\n            <h3 className=\"text-lg font-semibold text-gray-900\">AI Trading Insights</h3>\n            <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n              connectionStatus === 'connected' \n                ? 'bg-green-100 text-green-800' \n                : 'bg-yellow-100 text-yellow-800'\n            }`}>\n              {connectionStatus === 'connected' ? '🤖 GPT-4.1' : '🧪 Mock'}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => generateInsight()}\n              disabled={loading}\n              className=\"p-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded\"\n              title=\"Refresh insights\"\n            >\n              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\n            </button>\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"text-sm text-blue-600 hover:text-blue-800 focus:outline-none focus:underline\"\n            >\n              {isExpanded ? 'Collapse' : 'Expand'}\n            </button>\n          </div>\n        </div>\n\n        {connectionStatus === 'mock' && (\n          <p className=\"text-xs text-gray-500 mt-2\">\n            Add VITE_OPENAI_API_KEY to enable real GPT-4.1 insights\n          </p>\n        )}\n      </div>\n\n      <div className=\"p-4\">\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n            <p className=\"text-sm text-red-600\">{error}</p>\n          </div>\n        )}\n\n        {isExpanded && (\n          <div className=\"mb-4 p-3 bg-gray-50 rounded-md\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Ask AI about {symbol}:\n            </label>\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                value={userQuery}\n                onChange={(e) => setUserQuery(e.target.value)}\n                placeholder=\"e.g., What's the risk level? Should I buy now?\"\n                className=\"flex-1 text-sm border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                onKeyPress={(e) => e.key === 'Enter' && handleCustomQuery()}\n              />\n              <button\n                onClick={handleCustomQuery}\n                disabled={loading || !userQuery.trim()}\n                className=\"px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                Ask\n              </button>\n            </div>\n          </div>\n        )}\n\n        {loading && insights.length === 0 && (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n            <span className=\"ml-2 text-sm text-gray-600\">Generating insights...</span>\n          </div>\n        )}\n\n        <div className=\"space-y-3\">\n          {insights.map((insight, index) => (\n            <div key={index} className=\"border border-gray-200 rounded-md p-3\">\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {getInsightIcon(insight.type)}\n                  <h4 className=\"text-sm font-medium text-gray-900\">{insight.title}</h4>\n                </div>\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                  <Clock className=\"h-3 w-3\" />\n                  <span>{insight.timeframe}</span>\n                  <span className={`font-medium ${getConfidenceColor(insight.confidence)}`}>\n                    {insight.confidence}%\n                  </span>\n                </div>\n              </div>\n              \n              <p className=\"text-sm text-gray-600 leading-relaxed\">{insight.content}</p>\n              \n              <div className=\"flex items-center justify-between mt-2 pt-2 border-t border-gray-100\">\n                <span className={`text-xs px-2 py-1 rounded-full ${\n                  insight.type === 'recommendation' ? 'bg-blue-100 text-blue-800' :\n                  insight.type === 'risk_assessment' ? 'bg-red-100 text-red-800' :\n                  insight.type === 'market_outlook' ? 'bg-purple-100 text-purple-800' :\n                  'bg-gray-100 text-gray-800'\n                }`}>\n                  {insight.type.replace('_', ' ').toUpperCase()}\n                </span>\n                <span className=\"text-xs text-gray-400\">\n                  {insight.createdAt.toLocaleTimeString()}\n                </span>\n              </div>\n            </div>\n          ))}\n\n          {insights.length === 0 && !loading && (\n            <div className=\"text-center py-6 text-gray-500\">\n              <Brain className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n              <p className=\"text-sm\">No insights yet. Click refresh to generate AI analysis.</p>\n            </div>\n          )}\n        </div>\n\n        {!isExpanded && insights.length > 0 && (\n          <div className=\"mt-3 text-center\">\n            <button\n              onClick={() => setIsExpanded(true)}\n              className=\"text-xs text-blue-600 hover:text-blue-800 focus:outline-none focus:underline\"\n            >\n              View more insights and ask questions\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TradingInsights;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/account/ApiKeyManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadApiCredentials' function makes the dependencies of useEffect Hook (at line 105) change on every render. To fix this, wrap the definition of 'loadApiCredentials' in its own useCallback() Hook.","line":66,"column":9,"nodeType":"VariableDeclarator","endLine":100,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadApiCredentials' in its own useCallback() Hook.","fix":{"range":[1724,2622],"text":"useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const token = getAccessToken();\n      if (!token) {\n        setError('You must be logged in to view API credentials');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE}/api/keys`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load API credentials');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setApiCredentials(data.credentials);\n      } else {\n        throw new Error(data.error || 'Failed to load API credentials');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load API credentials');\n    } finally {\n      setLoading(false);\n    }\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertTriangle, CheckCircle, Plus, RefreshCw, Shield, Trash2, XCircle } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { getAccessToken } from '@/utils/auth';\n\ninterface ApiCredential {\n  id: string;\n  exchange: string;\n  credentialName: string;\n  permissions: {\n    read: boolean;\n    trade: boolean;\n    withdraw: boolean;\n  };\n  isActive: boolean;\n  lastUsedAt: string | null;\n  createdAt: string;\n}\n\ninterface NewCredentialForm {\n  credentialName: string;\n  apiKey: string;\n  apiSecret: string;\n  passphrase: string;\n  permissions: {\n    read: boolean;\n    trade: boolean;\n    withdraw: boolean;\n  };\n}\n\nconst ApiKeyManagement: React.FC = () => {\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n  const [apiCredentials, setApiCredentials] = useState<ApiCredential[]>([]);\n\n  const [newCredentialForm, setNewCredentialForm] = useState<NewCredentialForm>({\n    credentialName: '',\n    apiKey: '',\n    apiSecret: '',\n    passphrase: '',\n    permissions: {\n      read: true,\n      trade: false,\n      withdraw: false\n    }\n  });\n\n  // API base URL\n  const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:3000';\n\n  // Clear messages after 5 seconds\n  useEffect(() => {\n    if (successMessage || error) {\n      const timer = setTimeout(() => {\n        setSuccessMessage(null);\n        setError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [successMessage, error]);\n\n  const loadApiCredentials = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const token = getAccessToken();\n      if (!token) {\n        setError('You must be logged in to view API credentials');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE}/api/keys`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load API credentials');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setApiCredentials(data.credentials);\n      } else {\n        throw new Error(data.error || 'Failed to load API credentials');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load API credentials');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load API credentials on component mount\n  useEffect(() => {\n    loadApiCredentials();\n  }, [loadApiCredentials]);\n\n  const handleFormChange = (field: keyof NewCredentialForm, value: string) => {\n    setNewCredentialForm(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handlePermissionChange = (permission: 'read' | 'trade' | 'withdraw') => {\n    setNewCredentialForm(prev => ({\n      ...prev,\n      permissions: {\n        ...prev.permissions,\n        [permission]: !prev.permissions[permission]\n      }\n    }));\n  };\n\n  const handleCreateCredentials = async () => {\n    if (!newCredentialForm.credentialName.trim() || !newCredentialForm.apiKey.trim() || !newCredentialForm.apiSecret.trim()) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError(null);\n\n      const token = getAccessToken();\n      if (!token) {\n        setError('You must be logged in to create API credentials');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE}/api/keys`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          credentialName: newCredentialForm.credentialName,\n          apiKey: newCredentialForm.apiKey,\n          apiSecret: newCredentialForm.apiSecret,\n          passphrase: newCredentialForm.passphrase || undefined,\n          permissions: newCredentialForm.permissions\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create API credentials');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setSuccessMessage('API credentials created successfully');\n        setShowCreateForm(false);\n        setNewCredentialForm({\n          credentialName: '',\n          apiKey: '',\n          apiSecret: '',\n          passphrase: '',\n          permissions: {\n            read: true,\n            trade: false,\n            withdraw: false\n          }\n        });\n        // Reload credentials\n        await loadApiCredentials();\n      } else {\n        throw new Error(data.error || 'Failed to create API credentials');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create API credentials');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleDeleteCredentials = async (id: string) => {\n    if (!confirm('Are you sure you want to delete these API credentials? This action cannot be undone.')) {\n      return;\n    }\n\n    try {\n      const token = getAccessToken();\n      if (!token) {\n        setError('You must be logged in to delete API credentials');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE}/api/keys/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to delete API credentials');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setSuccessMessage('API credentials deleted successfully');\n        // Reload credentials\n        await loadApiCredentials();\n      } else {\n        throw new Error(data.error || 'Failed to delete API credentials');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete API credentials');\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Success Message */}\n      {successMessage && (\n        <div className=\"bg-green-50 border-l-4 border-green-500 p-4 text-green-700\">\n          <div className=\"flex\">\n            <CheckCircle className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n            <p>{successMessage}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"bg-red-50 border-l-4 border-red-500 p-4 text-red-700\">\n          <div className=\"flex\">\n            <XCircle className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n            <p>{error}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Security Warning */}\n      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-4 text-blue-700\">\n        <div className=\"flex\">\n          <Shield className=\"h-6 w-6 mr-3 flex-shrink-0\" />\n          <div>\n            <h3 className=\"font-medium\">API Key Security</h3>\n            <p className=\"mt-1 text-sm\">\n              Keep your API keys secure. Never share them with others or expose them in client-side code.\n              Keys with trade and withdraw permissions should be used with extreme caution.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-medium\">Your API Keys</h2>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={loadApiCredentials}\n            disabled={loading}\n            className=\"flex items-center px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 disabled:opacity-50\"\n            title=\"Refresh API credentials list\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Refresh\n          </button>\n          <button\n            onClick={() => setShowCreateForm(true)}\n            className=\"flex items-center px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add API Keys\n          </button>\n        </div>\n      </div>\n\n      {/* Create Form */}\n      {showCreateForm && (\n        <div className=\"bg-white rounded-lg border border-neutral-200 overflow-hidden\">\n          <div className=\"px-4 py-3 bg-neutral-50 border-b border-neutral-200\">\n            <h3 className=\"font-medium\">Add Poloniex API Keys</h3>\n          </div>\n          <div className=\"p-4 space-y-4\">\n            <div>\n              <label htmlFor=\"credential-name\" className=\"block text-sm font-medium text-neutral-700\">\n                Credential Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"credential-name\"\n                value={newCredentialForm.credentialName}\n                onChange={(e) => handleFormChange('credentialName', e.target.value)}\n                className=\"mt-1 block w-full border border-neutral-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"e.g., Main Trading Account\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"api-key\" className=\"block text-sm font-medium text-neutral-700\">\n                API Key *\n              </label>\n              <input\n                type=\"text\"\n                id=\"api-key\"\n                value={newCredentialForm.apiKey}\n                onChange={(e) => handleFormChange('apiKey', e.target.value)}\n                className=\"mt-1 block w-full border border-neutral-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono\"\n                placeholder=\"Enter your Poloniex API Key\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"api-secret\" className=\"block text-sm font-medium text-neutral-700\">\n                API Secret *\n              </label>\n              <input\n                type=\"password\"\n                id=\"api-secret\"\n                value={newCredentialForm.apiSecret}\n                onChange={(e) => handleFormChange('apiSecret', e.target.value)}\n                className=\"mt-1 block w-full border border-neutral-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono\"\n                placeholder=\"Enter your Poloniex API Secret\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"passphrase\" className=\"block text-sm font-medium text-neutral-700\">\n                Passphrase (Optional)\n              </label>\n              <input\n                type=\"password\"\n                id=\"passphrase\"\n                value={newCredentialForm.passphrase}\n                onChange={(e) => handleFormChange('passphrase', e.target.value)}\n                className=\"mt-1 block w-full border border-neutral-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 font-mono\"\n                placeholder=\"Enter passphrase if required\"\n              />\n            </div>\n\n            <div>\n              <span className=\"block text-sm font-medium text-neutral-700 mb-2\">\n                Permissions\n              </span>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center\">\n                  <input\n                    id=\"permission-read\"\n                    type=\"checkbox\"\n                    checked={newCredentialForm.permissions.read}\n                    onChange={() => handlePermissionChange('read')}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                  />\n                  <label htmlFor=\"permission-read\" className=\"ml-2 block text-sm text-neutral-700\">\n                    Read (View account balances and trades)\n                  </label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input\n                    id=\"permission-trade\"\n                    type=\"checkbox\"\n                    checked={newCredentialForm.permissions.trade}\n                    onChange={() => handlePermissionChange('trade')}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                  />\n                  <label htmlFor=\"permission-trade\" className=\"ml-2 block text-sm text-neutral-700\">\n                    Trade (Place and cancel orders)\n                  </label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input\n                    id=\"permission-withdraw\"\n                    type=\"checkbox\"\n                    checked={newCredentialForm.permissions.withdraw}\n                    onChange={() => handlePermissionChange('withdraw')}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                  />\n                  <label htmlFor=\"permission-withdraw\" className=\"ml-2 flex items-center text-sm text-neutral-700\">\n                    Withdraw (Transfer funds out of your account)\n                    <span className=\"ml-2 text-red-600 flex items-center text-xs\">\n                      <AlertTriangle className=\"h-3 w-3 mr-0.5\" />\n                      High Risk\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-2\">\n              <button\n                type=\"button\"\n                onClick={() => setShowCreateForm(false)}\n                disabled={submitting}\n                className=\"px-4 py-2 border border-neutral-300 rounded-md shadow-sm text-sm font-medium text-neutral-700 bg-white hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                onClick={handleCreateCredentials}\n                disabled={submitting || !newCredentialForm.credentialName.trim() || !newCredentialForm.apiKey.trim() || !newCredentialForm.apiSecret.trim()}\n                className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n              >\n                {submitting ? 'Creating...' : 'Create Credentials'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Credentials List */}\n      <div className=\"bg-white rounded-lg border border-neutral-200 overflow-hidden\">\n        <div className=\"px-4 py-3 bg-neutral-50 border-b border-neutral-200\">\n          <h3 className=\"font-medium\">Your API Credentials</h3>\n        </div>\n        <div className=\"overflow-x-auto\">\n          {loading ? (\n            <div className=\"p-8 text-center\">\n              <RefreshCw className=\"h-8 w-8 animate-spin mx-auto text-neutral-400 mb-2\" />\n              <p className=\"text-neutral-500\">Loading API credentials...</p>\n            </div>\n          ) : apiCredentials.length === 0 ? (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-neutral-500\">No API credentials found. Add your first set of credentials to get started.</p>\n            </div>\n          ) : (\n            <table className=\"min-w-full divide-y divide-neutral-200\">\n              <thead className=\"bg-neutral-50\">\n                <tr>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Name\n                  </th>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Exchange\n                  </th>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Permissions\n                  </th>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Created\n                  </th>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Last Used\n                  </th>\n                  <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th scope=\"col\" className=\"relative px-4 py-3\">\n                    <span className=\"sr-only\">Actions</span>\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-neutral-200\">\n                {apiCredentials.map((credential) => (\n                  <tr key={credential.id}>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-neutral-900\">\n                      {credential.credentialName}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-neutral-500\">\n                      <span className=\"capitalize\">{credential.exchange}</span>\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-neutral-500\">\n                      <div className=\"space-x-2\">\n                        {credential.permissions.read && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                            Read\n                          </span>\n                        )}\n                        {credential.permissions.trade && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800\">\n                            Trade\n                          </span>\n                        )}\n                        {credential.permissions.withdraw && (\n                          <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800\">\n                            Withdraw\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-neutral-500\">\n                      {formatDate(credential.createdAt)}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-neutral-500\">\n                      {credential.lastUsedAt ? formatDate(credential.lastUsedAt) : 'Never'}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-neutral-500\">\n                      <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${credential.isActive\n                        ? 'bg-green-100 text-green-800'\n                        : 'bg-red-100 text-red-800'\n                        }`}>\n                        {credential.isActive ? 'Active' : 'Inactive'}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={() => handleDeleteCredentials(credential.id)}\n                        className=\"text-red-600 hover:text-red-900\"\n                        title=\"Delete API credentials\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ApiKeyManagement;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/account/TransactionHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/auth/Login.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":20,"suggestions":[{"fix":{"range":[920,952],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"fix":{"range":[1267,1302],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Button, Input, Card, CardHeader, CardBody, CardFooter, Alert } from '@/components/ui';\n\ninterface LoginProps {\n  onSuccess?: () => void;\n}\n\nconst Login: React.FC<LoginProps> = ({ onSuccess }) => {\n  const { login } = useAuth();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      setError('Please enter both username and password');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Use new JWT login method\n      const success = await login(username, password);\n      \n      if (success) {\n        console.log('Login successful');\n        if (onSuccess) {\n          onSuccess();\n        }\n      } else {\n        setError('Invalid username or password. Try demo/password');\n      }\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Login failed. Please try again.';\n      setError(errorMessage);\n      console.error('Login error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <h2 className=\"text-xl font-bold\">Login to Your Account</h2>\n      </CardHeader>\n      <CardBody>\n        {error && (\n          <Alert variant=\"error\" className=\"mb-4\">\n            {error}\n          </Alert>\n        )}\n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label htmlFor=\"username\" className=\"block text-sm font-medium mb-1\">\n              Username\n            </label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Enter your username\"\n              disabled={isLoading}\n              autoComplete=\"username\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label htmlFor=\"password\" className=\"block text-sm font-medium mb-1\">\n              Password\n            </label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              disabled={isLoading}\n              autoComplete=\"current-password\"\n            />\n          </div>\n          <div className=\"mt-2 text-sm text-neutral-500\">\n            <p>Demo credentials: username: <strong>demo</strong>, password: <strong>password</strong></p>\n            <p>Or try: username: <strong>trader</strong>, password: <strong>password</strong></p>\n          </div>\n        </form>\n      </CardBody>\n      <CardFooter className=\"flex justify-between\">\n        <Button variant=\"outline\" disabled={isLoading}>\n          Register\n        </Button>\n        <Button \n          type=\"submit\" \n          onClick={handleSubmit}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Logging in...' : 'Login'}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default Login;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/auth/LogoutButton.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"fix":{"range":[652,690],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Button } from '@/components/ui';\n\ninterface LogoutButtonProps {\n  onSuccess?: () => void;\n  variant?: 'primary' | 'secondary' | 'outline' | 'danger';\n  className?: string;\n}\n\nconst LogoutButton: React.FC<LogoutButtonProps> = ({ \n  onSuccess, \n  variant = 'outline',\n  className = ''\n}) => {\n  const { logout } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogout = async () => {\n    setIsLoading(true);\n    \n    try {\n      await logout();\n      if (onSuccess) {\n        onSuccess();\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button \n      variant={variant} \n      onClick={handleLogout}\n      disabled={isLoading}\n      className={className}\n    >\n      {isLoading ? 'Logging out...' : 'Logout'}\n    </Button>\n  );\n};\n\nexport default LogoutButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/auth/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/backtesting/HistoricalDataManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/charts/PriceChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/AccountSummary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connectionState' is assigned a value but never used.","line":8,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"fix":{"range":[1810,1865],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":20,"suggestions":[{"fix":{"range":[2136,2192],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { TrendingUp, TrendingDown, DollarSign, Wifi, WifiOff, RefreshCw } from 'lucide-react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { useWebSocket } from '../../services/websocketService';\n\nconst AccountSummary: React.FC = () => {\n  const { accountBalance, isLoading, isMockMode, refreshApiConnection } = useTradingContext();\n  const { isConnected, connectionState } = useWebSocket();\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  // Update last update time when account balance changes\n  useEffect(() => {\n    if (accountBalance) {\n      setLastUpdateTime(new Date());\n    }\n  }, [accountBalance]);\n  \n  // Default values if data is not available\n  const defaultAccountData = {\n    balance: 15478.23,\n    availableBalance: 12345.67,\n    equity: 15820.45,\n    unrealizedPnL: 342.22,\n    todayPnL: 156.78,\n    todayPnLPercentage: 1.02\n  };\n  \n  // Process account data from API if available\n  const processAccountData = () => {\n    if (!accountBalance || isLoading) return defaultAccountData;\n    \n    try {\n      // This mapping will depend on the exact format of your Poloniex API response\n      // Adjust as needed based on the actual response structure\n      return {\n        balance: parseFloat(accountBalance.totalAmount || \"0\"),\n        availableBalance: parseFloat(accountBalance.availableAmount || \"0\"),\n        equity: parseFloat(accountBalance.accountEquity || \"0\"),\n        unrealizedPnL: parseFloat(accountBalance.unrealizedPnL || \"0\"),\n        todayPnL: parseFloat(accountBalance.todayPnL || \"0\"),\n        todayPnLPercentage: parseFloat(accountBalance.todayPnLPercentage || \"0\")\n      };\n    } catch (error) {\n      console.error('Error processing account data:', error);\n      return defaultAccountData;\n    }\n  };\n  \n  const accountData = processAccountData();\n  \n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    try {\n      await refreshApiConnection();\n      setLastUpdateTime(new Date());\n    } catch (error) {\n      console.error('Failed to refresh account data:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n  \n  const getConnectionStatusIcon = () => {\n    if (isConnected) {\n      return <Wifi className=\"h-4 w-4 text-green-600\" aria-label=\"Connected\" />;\n    } else {\n      return <WifiOff className=\"h-4 w-4 text-red-600\" aria-label=\"Disconnected\" />;\n    }\n  };\n  \n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n  \n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-xl font-bold flex items-center\">\n          Account Summary \n          {isLoading && <span className=\"text-sm text-neutral-500 ml-2\">Loading...</span>}\n        </h2>\n        <div className=\"flex items-center space-x-2\">\n          {getConnectionStatusIcon()}\n          <button\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"p-1 rounded-md hover:bg-gray-100 disabled:opacity-50\"\n            title=\"Refresh account data\"\n          >\n            <RefreshCw className={`h-4 w-4 text-gray-600 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Connection Status Bar */}\n      <div className={`mb-4 p-2 rounded-md text-xs flex items-center justify-between ${\n        isConnected ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'\n      }`}>\n        <span className=\"flex items-center\">\n          {getConnectionStatusIcon()}\n          <span className=\"ml-1\">\n            {isMockMode ? 'Mock Mode' : isConnected ? 'Live Data' : 'Offline'}\n          </span>\n        </span>\n        <span>\n          Last updated: {formatTime(lastUpdateTime)}\n        </span>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-neutral-50 p-3 rounded-md relative\">\n            <div className=\"text-sm text-neutral-500\">Total Balance</div>\n            <div className=\"text-xl font-bold flex items-center\">\n              <DollarSign className=\"h-4 w-4 mr-1 text-neutral-500\" />\n              {accountData.balance?.toFixed(2)}\n            </div>\n            {/* Real-time indicator */}\n            {isConnected && !isMockMode && (\n              <div className=\"absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full animate-pulse\" \n                   title=\"Live data\"></div>\n            )}\n          </div>\n          \n          <div className=\"bg-neutral-50 p-3 rounded-md relative\">\n            <div className=\"text-sm text-neutral-500\">Available</div>\n            <div className=\"text-xl font-bold flex items-center\">\n              <DollarSign className=\"h-4 w-4 mr-1 text-neutral-500\" />\n              {accountData.availableBalance?.toFixed(2)}\n            </div>\n            {/* Real-time indicator */}\n            {isConnected && !isMockMode && (\n              <div className=\"absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full animate-pulse\" \n                   title=\"Live data\"></div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"bg-neutral-50 p-3 rounded-md relative\">\n          <div className=\"text-sm text-neutral-500\">Equity</div>\n          <div className=\"text-xl font-bold\">${accountData.equity.toFixed(2)}</div>\n          <div className=\"text-sm mt-1\">\n            Unrealized P&L: \n            <span className={`font-medium ml-1 ${(accountData.unrealizedPnL || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {(accountData.unrealizedPnL || 0) >= 0 ? '+' : ''}{accountData.unrealizedPnL?.toFixed(2)}\n            </span>\n          </div>\n          {/* Real-time indicator */}\n          {isConnected && !isMockMode && (\n            <div className=\"absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full animate-pulse\" \n                 title=\"Live data\"></div>\n          )}\n        </div>\n        \n        <div className=\"bg-neutral-50 p-3 rounded-md relative\">\n          <div className=\"text-sm text-neutral-500\">Today's P&L</div>\n          <div className=\"flex items-center\">\n            <span className={`text-xl font-bold ${(accountData.todayPnL || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {(accountData.todayPnL || 0) >= 0 ? '+' : ''}{accountData.todayPnL?.toFixed(2)}\n            </span>\n            <span className={`ml-2 flex items-center text-sm ${(accountData.todayPnLPercentage || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {(accountData.todayPnLPercentage || 0) >= 0 ? (\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\n              ) : (\n                <TrendingDown className=\"h-4 w-4 mr-1\" />\n              )}\n              {accountData.todayPnLPercentage?.toFixed(2)}%\n            </span>\n          </div>\n          {/* Real-time indicator */}\n          {isConnected && !isMockMode && (\n            <div className=\"absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full animate-pulse\" \n                 title=\"Live data\"></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountSummary;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/ExtensionBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/LiveDataDashboard.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"fix":{"range":[2340,2390],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":20,"suggestions":[{"fix":{"range":[2774,2823],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":20,"suggestions":[{"fix":{"range":[3124,3169],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":20,"suggestions":[{"fix":{"range":[3491,3544],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { \n  LiveDataService, \n  liveDataService, \n  liveDataEvents,\n  LiveDataConfig,\n  MarketDataPoint,\n  OrderBook,\n  TradeEntry,\n  MarketSummary\n} from '@/services/advancedLiveData';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/Tabs';\n\nconst LiveDataDashboard: React.FC = () => {\n  const [marketData, setMarketData] = useState<MarketDataPoint[]>([]);\n  const [orderBook, setOrderBook] = useState<OrderBook | null>(null);\n  const [trades, setTrades] = useState<TradeEntry[]>([]);\n  const [marketSummary, setMarketSummary] = useState<MarketSummary | null>(null);\n  const [selectedSymbol, setSelectedSymbol] = useState<string>('BTC_USDT');\n  const [timeframe, setTimeframe] = useState<string>('1h');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [anomalies, setAnomalies] = useState<MarketDataPoint[]>([]);\n  const [serviceStatus, setServiceStatus] = useState<'stopped' | 'running'>('stopped');\n  const [config, setConfig] = useState<LiveDataConfig>({\n    primarySource: 'aggregated',\n    fallbackSources: ['poloniex', 'websocket', 'rest'],\n    updateInterval: 1000,\n    aggregationMethod: 'weighted',\n    enableAnomalyDetection: true,\n    anomalyThreshold: 3.0,\n    enableDataNormalization: true,\n    cacheDuration: 60000,\n    maxRetries: 3,\n    retryDelay: 1000,\n    enableCompression: true,\n    logLevel: 'info'\n  });\n  \n  // Available symbols\n  const symbols = [\n    'BTC_USDT', 'ETH_USDT', 'SOL_USDT', 'XRP_USDT', 'ADA_USDT',\n    'DOGE_USDT', 'MATIC_USDT', 'DOT_USDT', 'AVAX_USDT', 'LINK_USDT'\n  ];\n  \n  // Available timeframes\n  const timeframes = ['5m', '15m', '30m', '1h', '4h', '1d'];\n  \n  // Fetch market data\n  const fetchMarketData = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const data = await liveDataService.getAggregatedData(selectedSymbol, timeframe, 100);\n      setMarketData(data);\n      \n      // Extract anomalies\n      const anomalyPoints = data.filter(point => point.isAnomaly);\n      setAnomalies(anomalyPoints);\n      \n      setIsLoading(false);\n    } catch (err) {\n      console.error('Error fetching market data:', err);\n      setError(`Failed to fetch market data: ${err instanceof Error ? err.message : 'Unknown error'}`);\n      setIsLoading(false);\n    }\n  }, [selectedSymbol, timeframe]);\n  \n  // Fetch order book\n  const fetchOrderBook = useCallback(async () => {\n    try {\n      const book = await liveDataService.fetchOrderBook(selectedSymbol);\n      setOrderBook(book);\n    } catch (err) {\n      console.error('Error fetching order book:', err);\n      // Don't set error state to avoid disrupting the UI\n    }\n  }, [selectedSymbol]);\n  \n  // Fetch trades\n  const fetchTrades = useCallback(async () => {\n    try {\n      const tradeData = await liveDataService.fetchTrades(selectedSymbol, 50);\n      setTrades(tradeData);\n    } catch (err) {\n      console.error('Error fetching trades:', err);\n      // Don't set error state to avoid disrupting the UI\n    }\n  }, [selectedSymbol]);\n  \n  // Fetch market summary\n  const fetchMarketSummary = useCallback(async () => {\n    try {\n      const summary = await liveDataService.fetchMarketSummary(selectedSymbol);\n      setMarketSummary(summary);\n    } catch (err) {\n      console.error('Error fetching market summary:', err);\n      // Don't set error state to avoid disrupting the UI\n    }\n  }, [selectedSymbol]);\n  \n  // Start/stop live data service\n  const toggleLiveDataService = () => {\n    if (serviceStatus === 'stopped') {\n      liveDataService.start();\n      setServiceStatus('running');\n    } else {\n      liveDataService.stop();\n      setServiceStatus('stopped');\n    }\n  };\n  \n  // Update configuration\n  const updateConfig = (newConfig: Partial<LiveDataConfig>) => {\n    const updatedConfig = { ...config, ...newConfig };\n    setConfig(updatedConfig);\n    \n    // Restart service if running\n    if (serviceStatus === 'running') {\n      liveDataService.stop();\n      \n      // Create new service with updated config\n      const newService = new LiveDataService(updatedConfig);\n      newService.start();\n    }\n  };\n  \n  // Initial data fetch\n  useEffect(() => {\n    fetchMarketData();\n    fetchOrderBook();\n    fetchTrades();\n    fetchMarketSummary();\n    \n    // Set up event listeners\n    const handleDataProcessed = (data: MarketDataPoint) => {\n      if (data.symbol === selectedSymbol) {\n        setMarketData(prevData => {\n          // Add new data point and keep the last 100\n          const newData = [...prevData, data];\n          if (newData.length > 100) {\n            return newData.slice(-100);\n          }\n          return newData;\n        });\n        \n        // Check for anomaly\n        if (data.isAnomaly) {\n          setAnomalies(prevAnomalies => [...prevAnomalies, data]);\n        }\n      }\n    };\n    \n    const handleServiceStarted = () => {\n      setServiceStatus('running');\n    };\n    \n    const handleServiceStopped = () => {\n      setServiceStatus('stopped');\n    };\n    \n    liveDataEvents.on('data_processed', handleDataProcessed);\n    liveDataEvents.on('service_started', handleServiceStarted);\n    liveDataEvents.on('service_stopped', handleServiceStopped);\n    \n    // Clean up\n    return () => {\n      liveDataEvents.off('data_processed', handleDataProcessed);\n      liveDataEvents.off('service_started', handleServiceStarted);\n      liveDataEvents.off('service_stopped', handleServiceStopped);\n    };\n  }, [fetchMarketData, fetchOrderBook, fetchTrades, fetchMarketSummary, selectedSymbol]);\n  \n  // Set up polling for order book, trades, and summary\n  useEffect(() => {\n    const orderBookInterval = setInterval(fetchOrderBook, 10000); // 10 seconds\n    const tradesInterval = setInterval(fetchTrades, 5000); // 5 seconds\n    const summaryInterval = setInterval(fetchMarketSummary, 30000); // 30 seconds\n    \n    return () => {\n      clearInterval(orderBookInterval);\n      clearInterval(tradesInterval);\n      clearInterval(summaryInterval);\n    };\n  }, [fetchOrderBook, fetchTrades, fetchMarketSummary]);\n  \n  // Format market data for chart\n  const formatChartData = () => {\n    return marketData.map(point => ({\n      timestamp: new Date(point.timestamp).toLocaleTimeString(),\n      close: point.close,\n      volume: point.volume / 1000, // Scale down for better visualization\n      isAnomaly: point.isAnomaly ? point.close : null\n    }));\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-neutral-800 rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-xl font-semibold text-neutral-800 dark:text-white\">Advanced Live Data Dashboard</h2>\n        \n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={toggleLiveDataService}\n            className={`px-4 py-2 rounded-md text-white ${\n              serviceStatus === 'running' \n                ? 'bg-red-600 hover:bg-red-700' \n                : 'bg-green-600 hover:bg-green-700'\n            }`}\n          >\n            {serviceStatus === 'running' ? 'Stop Live Data' : 'Start Live Data'}\n          </button>\n          \n          <div className=\"relative\">\n            <select\n              value={selectedSymbol}\n              onChange={(e) => setSelectedSymbol(e.target.value)}\n              className=\"block w-full pl-3 pr-10 py-2 text-base border-neutral-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              {symbols.map(symbol => (\n                <option key={symbol} value={symbol}>{symbol}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"relative\">\n            <select\n              value={timeframe}\n              onChange={(e) => setTimeframe(e.target.value)}\n              className=\"block w-full pl-3 pr-10 py-2 text-base border-neutral-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              {timeframes.map(tf => (\n                <option key={tf} value={tf}>{tf}</option>\n              ))}\n            </select>\n          </div>\n          \n          <button\n            onClick={fetchMarketData}\n            disabled={isLoading}\n            className={`px-4 py-2 rounded-md text-white ${\n              isLoading ? 'bg-neutral-400' : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            {isLoading ? 'Loading...' : 'Refresh'}\n          </button>\n        </div>\n      </div>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        {marketSummary && (\n          <>\n            <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n              <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Price</h3>\n              <div className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\n                ${marketSummary.lastPrice.toFixed(2)}\n              </div>\n              <div className={`text-sm font-medium ${\n                marketSummary.percentChange24h >= 0 \n                  ? 'text-green-600' \n                  : 'text-red-600'\n              }`}>\n                {marketSummary.percentChange24h >= 0 ? '+' : ''}\n                {marketSummary.percentChange24h.toFixed(2)}%\n              </div>\n            </div>\n            \n            <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n              <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">24h Range</h3>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <div className=\"text-sm text-neutral-500 dark:text-neutral-400\">Low</div>\n                  <div className=\"text-lg font-semibold text-neutral-800 dark:text-white\">\n                    ${marketSummary.low24h.toFixed(2)}\n                  </div>\n                </div>\n                <div className=\"w-full mx-4\">\n                  <div className=\"w-full bg-neutral-200 rounded-full h-2.5 dark:bg-neutral-600\">\n                    <div \n                      className=\"h-2.5 rounded-full bg-blue-600\" \n                      style={{ \n                        width: `${((marketSummary.lastPrice - marketSummary.low24h) / \n                                (marketSummary.high24h - marketSummary.low24h) * 100).toFixed(0)}%` \n                      }}\n                    ></div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-neutral-500 dark:text-neutral-400\">High</div>\n                  <div className=\"text-lg font-semibold text-neutral-800 dark:text-white\">\n                    ${marketSummary.high24h.toFixed(2)}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n              <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">24h Volume</h3>\n              <div className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\n                {marketSummary.volume24h.toLocaleString(undefined, { maximumFractionDigits: 2 })}\n              </div>\n              <div className=\"text-sm text-neutral-500 dark:text-neutral-400\">\n                ${marketSummary.quoteVolume24h.toLocaleString(undefined, { maximumFractionDigits: 2 })}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Price Chart</h3>\n        \n        <div className=\"h-80 bg-neutral-50 dark:bg-neutral-700 p-4 rounded-md\">\n          {marketData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={formatChartData()}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"timestamp\" />\n                <YAxis yAxisId=\"left\" />\n                <YAxis yAxisId=\"right\" orientation=\"right\" />\n                <Tooltip />\n                <Legend />\n                <Line \n                  yAxisId=\"left\"\n                  type=\"monotone\" \n                  dataKey=\"close\" \n                  stroke=\"#2563eb\" \n                  dot={false} \n                  activeDot={{ r: 8 }} \n                />\n                <Line \n                  yAxisId=\"right\"\n                  type=\"monotone\" \n                  dataKey=\"volume\" \n                  stroke=\"#9ca3af\" \n                  dot={false}\n                />\n                <Line \n                  yAxisId=\"left\"\n                  type=\"monotone\" \n                  dataKey=\"isAnomaly\" \n                  stroke=\"#ef4444\" \n                  strokeWidth={0}\n                  dot={{ r: 6, fill: '#ef4444' }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <p className=\"text-neutral-500 dark:text-neutral-400\">No data available</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <Tabs defaultValue=\"order-book\">\n        <TabsList>\n          <TabsTrigger value=\"order-book\">Order Book</TabsTrigger>\n          <TabsTrigger value=\"recent-trades\">Recent Trades</TabsTrigger>\n          <TabsTrigger value=\"anomalies\">Anomalies</TabsTrigger>\n          <TabsTrigger value=\"configuration\">Configuration</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"order-book\">\n          {orderBook ? (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"text-md font-medium mb-2 text-green-600\">Bids</h4>\n                <div className=\"overflow-y-auto max-h-60\">\n                  <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n                    <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Price\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Total\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                      {orderBook.bids.map((bid, index) => (\n                        <tr key={index}>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm font-medium text-green-600\">\n                            {bid.price.toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                            {bid.amount.toFixed(6)}\n                          </td>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                            {(bid.price * bid.amount).toFixed(2)}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-md font-medium mb-2 text-red-600\">Asks</h4>\n                <div className=\"overflow-y-auto max-h-60\">\n                  <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n                    <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Price\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                          Total\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                      {orderBook.asks.map((ask, index) => (\n                        <tr key={index}>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm font-medium text-red-600\">\n                            {ask.price.toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                            {ask.amount.toFixed(6)}\n                          </td>\n                          <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                            {(ask.price * ask.amount).toFixed(2)}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-40\">\n              <p className=\"text-neutral-500 dark:text-neutral-400\">No order book data available</p>\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"recent-trades\">\n          {trades.length > 0 ? (\n            <div className=\"overflow-y-auto max-h-60\">\n              <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n                <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Time\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Price\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Side\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                  {trades.map((trade) => (\n                    <tr key={trade.id}>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                        {new Date(trade.timestamp).toLocaleTimeString()}\n                      </td>\n                      <td className={`px-6 py-2 whitespace-nowrap text-sm font-medium ${\n                        trade.side === 'buy' ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {trade.price.toFixed(2)}\n                      </td>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                        {trade.amount.toFixed(6)}\n                      </td>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm\">\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                          trade.side === 'buy' \n                            ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' \n                            : 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'\n                        }`}>\n                          {trade.side.toUpperCase()}\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-40\">\n              <p className=\"text-neutral-500 dark:text-neutral-400\">No trade data available</p>\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"anomalies\">\n          {anomalies.length > 0 ? (\n            <div className=\"overflow-y-auto max-h-60\">\n              <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n                <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Time\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Price\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Confidence\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                      Type\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                  {anomalies.map((anomaly, index) => (\n                    <tr key={index}>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                        {new Date(anomaly.timestamp).toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm font-medium text-neutral-800 dark:text-white\">\n                        {anomaly.close.toFixed(2)}\n                      </td>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                        <div className=\"w-full bg-neutral-200 rounded-full h-2.5 dark:bg-neutral-700\">\n                          <div \n                            className=\"h-2.5 rounded-full bg-red-600\" \n                            style={{ width: `${((anomaly.confidence || 0) * 100).toFixed(0)}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-xs\">{((anomaly.confidence || 0) * 100).toFixed(0)}%</span>\n                      </td>\n                      <td className=\"px-6 py-2 whitespace-nowrap text-sm\">\n                        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100\">\n                          PRICE ANOMALY\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center h-40\">\n              <p className=\"text-neutral-500 dark:text-neutral-400\">No anomalies detected</p>\n            </div>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"configuration\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"text-md font-medium mb-4 text-neutral-700 dark:text-neutral-300\">Data Sources</h4>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n                  Primary Source\n                </label>\n                <select\n                  value={config.primarySource}\n                  onChange={(e) => updateConfig({ primarySource: e.target.value as LiveDataConfig['primarySource'] })}\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n                >\n                  <option value=\"poloniex\">Poloniex API</option>\n                  <option value=\"websocket\">WebSocket</option>\n                  <option value=\"aggregated\">Aggregated (Multiple Sources)</option>\n                </select>\n              </div>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n                  Aggregation Method\n                </label>\n                <select\n                  value={config.aggregationMethod}\n                  onChange={(e) => updateConfig({ aggregationMethod: e.target.value as LiveDataConfig['aggregationMethod'] })}\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n                >\n                  <option value=\"weighted\">Weighted Average</option>\n                  <option value=\"median\">Median</option>\n                  <option value=\"mean\">Mean</option>\n                </select>\n              </div>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n                  Update Interval (ms)\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"100\"\n                  max=\"10000\"\n                  step=\"100\"\n                  value={config.updateInterval}\n                  onChange={(e) => updateConfig({ updateInterval: parseInt(e.target.value) })}\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-md font-medium mb-4 text-neutral-700 dark:text-neutral-300\">Data Processing</h4>\n              \n              <div className=\"flex items-center mb-4\">\n                <input\n                  type=\"checkbox\"\n                  id=\"enableAnomalyDetection\"\n                  checked={config.enableAnomalyDetection}\n                  onChange={(e) => updateConfig({ enableAnomalyDetection: e.target.checked })}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                />\n                <label htmlFor=\"enableAnomalyDetection\" className=\"ml-2 block text-sm text-neutral-700 dark:text-neutral-300\">\n                  Enable Anomaly Detection\n                </label>\n              </div>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n                  Anomaly Threshold (standard deviations)\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  step=\"0.1\"\n                  value={config.anomalyThreshold}\n                  onChange={(e) => updateConfig({ anomalyThreshold: parseFloat(e.target.value) })}\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n                />\n              </div>\n              \n              <div className=\"flex items-center mb-4\">\n                <input\n                  type=\"checkbox\"\n                  id=\"enableDataNormalization\"\n                  checked={config.enableDataNormalization}\n                  onChange={(e) => updateConfig({ enableDataNormalization: e.target.checked })}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                />\n                <label htmlFor=\"enableDataNormalization\" className=\"ml-2 block text-sm text-neutral-700 dark:text-neutral-300\">\n                  Enable Data Normalization\n                </label>\n              </div>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n                  Log Level\n                </label>\n                <select\n                  value={config.logLevel}\n                  onChange={(e) => updateConfig({ logLevel: e.target.value as LiveDataConfig['logLevel'] })}\n                  className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n                >\n                  <option value=\"debug\">Debug</option>\n                  <option value=\"info\">Info</option>\n                  <option value=\"warn\">Warning</option>\n                  <option value=\"error\">Error</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default LiveDataDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/QuickTrade.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":18,"suggestions":[{"fix":{"range":[926,963],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"fix":{"range":[1143,1190],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\n\nconst QuickTrade: React.FC = () => {\n  const { placeOrder, isLoading } = useTradingContext();\n  const [pair, setPair] = useState('BTC-USDT');\n  const [orderType, setOrderType] = useState('LIMIT');\n  const [side, setSide] = useState('BUY');\n  const [amount, setAmount] = useState('');\n  const [price, setPrice] = useState('');\n  const [orderStatus, setOrderStatus] = useState<string | null>(null);\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setOrderStatus(null);\n    \n    try {\n      // Place the order with the API\n      const result = await placeOrder(\n        pair,\n        side.toLowerCase() as 'buy' | 'sell',\n        orderType.toLowerCase() as 'limit' | 'market',\n        parseFloat(amount),\n        orderType === 'LIMIT' ? parseFloat(price) : undefined\n      );\n      \n      console.log('Order placed:', result);\n      setOrderStatus(`Order successfully placed: ${result.orderId || 'Success'}`);\n      \n      // Reset form\n      setAmount('');\n      setPrice('');\n    } catch (error) {\n      console.error('Failed to place order:', error);\n      setOrderStatus(`Order failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"space-y-3\">\n        <div>\n          <label className=\"block text-sm font-medium text-neutral-700\">Pair</label>\n          <select\n            value={pair}\n            onChange={(e) => setPair(e.target.value)}\n            className=\"mt-1 block w-full select\"\n            disabled={isLoading}\n          >\n            <option value=\"BTC-USDT\">BTC-USDT</option>\n            <option value=\"ETH-USDT\">ETH-USDT</option>\n            <option value=\"SOL-USDT\">SOL-USDT</option>\n          </select>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700\">Type</label>\n            <select\n              value={orderType}\n              onChange={(e) => setOrderType(e.target.value)}\n              className=\"mt-1 block w-full select\"\n              disabled={isLoading}\n            >\n              <option value=\"LIMIT\">Limit</option>\n              <option value=\"MARKET\">Market</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700\">Side</label>\n            <div className=\"mt-1 grid grid-cols-2 gap-2\">\n              <button\n                type=\"button\"\n                className={`py-2 text-center rounded-md ${\n                  side === 'BUY'\n                    ? 'bg-green-600 text-white'\n                    : 'bg-neutral-200 text-neutral-700'\n                }`}\n                onClick={() => setSide('BUY')}\n                disabled={isLoading}\n              >\n                Buy\n              </button>\n              <button\n                type=\"button\"\n                className={`py-2 text-center rounded-md ${\n                  side === 'SELL'\n                    ? 'bg-red-600 text-white'\n                    : 'bg-neutral-200 text-neutral-700'\n                }`}\n                onClick={() => setSide('SELL')}\n                disabled={isLoading}\n              >\n                Sell\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-neutral-700\">Amount</label>\n          <div className=\"mt-1 flex rounded-md shadow-sm\">\n            <input\n              type=\"number\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              className=\"flex-1 min-w-0 input\"\n              placeholder=\"0.00\"\n              step=\"0.0001\"\n              min=\"0\"\n              required\n              disabled={isLoading}\n            />\n            <span className=\"inline-flex items-center px-3 rounded-r-md border border-l-0 border-neutral-300 bg-neutral-50 text-neutral-500 text-sm\">\n              {pair.split('-')[0]}\n            </span>\n          </div>\n        </div>\n        \n        {orderType === 'LIMIT' && (\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700\">Price</label>\n            <div className=\"mt-1 flex rounded-md shadow-sm\">\n              <input\n                type=\"number\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n                className=\"flex-1 min-w-0 input\"\n                placeholder=\"0.00\"\n                step=\"0.01\"\n                min=\"0\"\n                required\n                disabled={isLoading}\n              />\n              <span className=\"inline-flex items-center px-3 rounded-r-md border border-l-0 border-neutral-300 bg-neutral-50 text-neutral-500 text-sm\">\n                USDT\n              </span>\n            </div>\n          </div>\n        )}\n        \n        {orderStatus && (\n          <div className={`text-sm p-2 rounded ${\n            orderStatus.includes('failed') || orderStatus.includes('Failed') \n              ? 'bg-red-100 text-red-700' \n              : 'bg-green-100 text-green-700'\n          }`}>\n            {orderStatus}\n          </div>\n        )}\n        \n        <div className=\"pt-2\">\n          <button\n            type=\"submit\"\n            className={`w-full btn ${\n              side === 'BUY' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'\n            } text-white`}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Processing...' : `${side === 'BUY' ? 'Buy' : 'Sell'} ${pair.split('-')[0]}`}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default QuickTrade;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/RealTimeAlerts.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":19,"suggestions":[{"fix":{"range":[4399,4450],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useWebSocket } from '../../services/websocketService';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { \n  Bell, \n  CheckCircle, \n  AlertTriangle, \n  XCircle, \n  Info,\n  X,\n  Volume2,\n  VolumeX,\n  Settings\n} from 'lucide-react';\n\ninterface MarketDataEvent {\n  symbol: string;\n  price: number;\n  changePercent: number;\n  volume: number;\n  timestamp: number;\n}\n\ninterface TradeExecutionEvent {\n  id: string;\n  symbol: string;\n  side: 'buy' | 'sell';\n  amount: number;\n  price: number;\n  profit?: number;\n  timestamp: number;\n}\n\nexport interface RealTimeAlert {\n  id: string;\n  type: 'success' | 'warning' | 'error' | 'info';\n  category: 'trade' | 'market' | 'strategy' | 'system' | 'risk';\n  title: string;\n  message: string;\n  timestamp: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  acknowledged: boolean;\n  data?: Record<string, unknown>; // Additional data for the alert\n}\n\ninterface AlertRules {\n  priceChange: {\n    enabled: boolean;\n    threshold: number; // percentage\n  };\n  volumeSpike: {\n    enabled: boolean;\n    threshold: number; // multiplier\n  };\n  portfolioChange: {\n    enabled: boolean;\n    threshold: number; // percentage\n  };\n  strategyStop: {\n    enabled: boolean;\n  };\n  connectionIssues: {\n    enabled: boolean;\n  };\n}\n\ninterface RealTimeAlertsProps {\n  maxAlerts?: number;\n  soundEnabled?: boolean;\n  onAlertClick?: (alert: RealTimeAlert) => void;\n}\n\nconst RealTimeAlerts: React.FC<RealTimeAlertsProps> = ({\n  maxAlerts = 50,\n  soundEnabled: initialSoundEnabled = true,\n  onAlertClick\n}) => {\n  const { isConnected, on, off } = useWebSocket();\n  const { activeStrategies } = useTradingContext();\n\n  const [alerts, setAlerts] = useState<RealTimeAlert[]>([]);\n  const [soundEnabled, setSoundEnabled] = useState(initialSoundEnabled);\n  const [showSettings, setShowSettings] = useState(false);\n  const [alertRules, setAlertRules] = useState<AlertRules>({\n    priceChange: { enabled: true, threshold: 5 },\n    volumeSpike: { enabled: true, threshold: 3 },\n    portfolioChange: { enabled: true, threshold: 2 },\n    strategyStop: { enabled: true },\n    connectionIssues: { enabled: true }\n  });\n\n  // Create alert utility function\n  const createAlert = useCallback((\n    type: RealTimeAlert['type'],\n    category: RealTimeAlert['category'],\n    title: string,\n    message: string,\n    priority: RealTimeAlert['priority'] = 'medium',\n    data?: Record<string, unknown>\n  ): RealTimeAlert => {\n    return {\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      category,\n      title,\n      message,\n      timestamp: Date.now(),\n      priority,\n      acknowledged: false,\n      data\n    };\n  }, []);\n\n  // Add alert function\n  const addAlert = useCallback((alert: RealTimeAlert) => {\n    setAlerts(prev => {\n      const newAlerts = [alert, ...prev];\n      \n      // Limit alerts to maxAlerts\n      if (newAlerts.length > maxAlerts) {\n        return newAlerts.slice(0, maxAlerts);\n      }\n      \n      return newAlerts;\n    });\n\n    // Play sound for high/critical priority alerts\n    if (soundEnabled && (alert.priority === 'high' || alert.priority === 'critical')) {\n      playAlertSound(alert.type);\n    }\n  }, [maxAlerts, soundEnabled]);\n\n  // Play alert sound\n  const playAlertSound = (type: RealTimeAlert['type']) => {\n    try {\n      const AudioContextClass = window.AudioContext || (window as typeof window & { webkitAudioContext?: typeof AudioContext }).webkitAudioContext;\n      if (!AudioContextClass) return;\n      \n      const audioContext = new AudioContextClass();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n\n      // Different frequencies for different alert types\n      const frequencies = {\n        success: 800,\n        info: 600,\n        warning: 400,\n        error: 200\n      };\n\n      oscillator.frequency.value = frequencies[type];\n      oscillator.type = 'sine';\n\n      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } catch (error) {\n      console.warn('Could not play alert sound:', error);\n    }\n  };\n\n  // Handle market data alerts\n  const handleMarketData = useCallback((marketData: MarketDataEvent) => {\n    if (!alertRules.priceChange.enabled) return;\n\n    const changePercent = Math.abs(marketData.changePercent || 0);\n    \n    if (changePercent >= alertRules.priceChange.threshold) {\n      const alert = createAlert(\n        changePercent >= 10 ? 'error' : 'warning',\n        'market',\n        'Significant Price Movement',\n        `${marketData.pair} moved ${marketData.changePercent > 0 ? '+' : ''}${marketData.changePercent.toFixed(2)}%`,\n        changePercent >= 10 ? 'high' : 'medium',\n        marketData\n      );\n      addAlert(alert);\n    }\n  }, [alertRules.priceChange, createAlert, addAlert]);\n\n  // Handle trade execution alerts\n  const handleTradeExecuted = useCallback((tradeData: TradeExecutionEvent) => {\n    const isProfit = (tradeData.profit || 0) > 0;\n    const alert = createAlert(\n      isProfit ? 'success' : 'error',\n      'trade',\n      'Trade Executed',\n      `${tradeData.side?.toUpperCase() || 'TRADE'} ${tradeData.amount || 0} ${tradeData.pair || ''} ${isProfit ? `+$${tradeData.profit?.toFixed(2) || '0.00'}` : `$${tradeData.profit?.toFixed(2) || '0.00'}`}`,\n      isProfit ? 'low' : 'medium',\n      tradeData\n    );\n    addAlert(alert);\n  }, [createAlert, addAlert]);\n\n  // Handle WebSocket connection changes\n  const handleConnectionChange = useCallback((connectionState: string) => {\n    if (!alertRules.connectionIssues.enabled) return;\n\n    if (connectionState === 'disconnected' || connectionState === 'failed') {\n      const alert = createAlert(\n        'error',\n        'system',\n        'Connection Lost',\n        'WebSocket connection lost. Trading may be affected.',\n        'high'\n      );\n      addAlert(alert);\n    } else if (connectionState === 'connected') {\n      const alert = createAlert(\n        'success',\n        'system',\n        'Connected',\n        'WebSocket connection restored.',\n        'low'\n      );\n      addAlert(alert);\n    }\n  }, [alertRules.connectionIssues, createAlert, addAlert]);\n\n  // Set up WebSocket listeners\n  useEffect(() => {\n    if (isConnected) {\n      on('marketData', handleMarketData);\n      on('tradeExecuted', handleTradeExecuted);\n      on('connectionStateChanged', handleConnectionChange);\n\n      return () => {\n        off('marketData', handleMarketData);\n        off('tradeExecuted', handleTradeExecuted);\n        off('connectionStateChanged', handleConnectionChange);\n      };\n    }\n  }, [isConnected, handleMarketData, handleTradeExecuted, handleConnectionChange, on, off]);\n\n  // Monitor strategy changes\n  useEffect(() => {\n    if (!alertRules.strategyStop.enabled) return;\n\n    const previousActiveCount = alerts.filter(a => a.category === 'strategy').length;\n    const currentActiveCount = activeStrategies.length;\n\n    if (previousActiveCount > currentActiveCount) {\n      const alert = createAlert(\n        'warning',\n        'strategy',\n        'Strategy Stopped',\n        `A trading strategy has stopped. ${currentActiveCount} strategies still active.`,\n        'medium'\n      );\n      addAlert(alert);\n    }\n  }, [activeStrategies.length, alertRules.strategyStop, createAlert, addAlert, alerts]);\n\n  // Acknowledge alert\n  const acknowledgeAlert = (alertId: string) => {\n    setAlerts(prev => \n      prev.map(alert => \n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\n      )\n    );\n  };\n\n  // Remove alert\n  const removeAlert = (alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  };\n\n  // Clear all alerts\n  const clearAllAlerts = () => {\n    setAlerts([]);\n  };\n\n  // Acknowledge all alerts\n  const acknowledgeAllAlerts = () => {\n    setAlerts(prev => prev.map(alert => ({ ...alert, acknowledged: true })));\n  };\n\n  // Get alert icon\n  const getAlertIcon = (alert: RealTimeAlert) => {\n    switch (alert.type) {\n      case 'success':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'info':\n      default:\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  // Get alert background color\n  const getAlertBgColor = (alert: RealTimeAlert) => {\n    const base = alert.acknowledged ? 'opacity-50 ' : '';\n    switch (alert.type) {\n      case 'success':\n        return base + 'bg-green-50 border-green-200';\n      case 'warning':\n        return base + 'bg-yellow-50 border-yellow-200';\n      case 'error':\n        return base + 'bg-red-50 border-red-200';\n      case 'info':\n      default:\n        return base + 'bg-blue-50 border-blue-200';\n    }\n  };\n\n  // Get priority badge color\n  const getPriorityColor = (priority: RealTimeAlert['priority']) => {\n    switch (priority) {\n      case 'critical':\n        return 'bg-red-100 text-red-800';\n      case 'high':\n        return 'bg-orange-100 text-orange-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const unacknowledgedCount = alerts.filter(a => !a.acknowledged).length;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Bell className=\"h-5 w-5 text-neutral-600\" />\n          <h3 className=\"text-lg font-medium text-neutral-800\">Real-time Alerts</h3>\n          {unacknowledgedCount > 0 && (\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n              {unacknowledgedCount} new\n            </span>\n          )}\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Sound Toggle */}\n          <button\n            onClick={() => setSoundEnabled(!soundEnabled)}\n            className={`p-2 rounded-md transition-colors ${\n              soundEnabled \n                ? 'bg-blue-100 text-blue-600 hover:bg-blue-200' \n                : 'bg-gray-100 text-gray-400 hover:bg-gray-200'\n            }`}\n            title={soundEnabled ? 'Disable sound' : 'Enable sound'}\n          >\n            {soundEnabled ? <Volume2 className=\"h-4 w-4\" /> : <VolumeX className=\"h-4 w-4\" />}\n          </button>\n\n          {/* Settings */}\n          <button\n            onClick={() => setShowSettings(!showSettings)}\n            className=\"p-2 rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors\"\n            title=\"Alert settings\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </button>\n\n          {/* Acknowledge All */}\n          {unacknowledgedCount > 0 && (\n            <button\n              onClick={acknowledgeAllAlerts}\n              className=\"px-3 py-1 text-sm bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 transition-colors\"\n            >\n              Acknowledge All\n            </button>\n          )}\n\n          {/* Clear All */}\n          {alerts.length > 0 && (\n            <button\n              onClick={clearAllAlerts}\n              className=\"px-3 py-1 text-sm bg-red-100 text-red-600 rounded-md hover:bg-red-200 transition-colors\"\n            >\n              Clear All\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Settings Panel */}\n      {showSettings && (\n        <div className=\"p-4 bg-neutral-50 rounded-md border\">\n          <h4 className=\"text-md font-medium mb-3\">Alert Settings</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={alertRules.priceChange.enabled}\n                  onChange={(e) => setAlertRules(prev => ({\n                    ...prev,\n                    priceChange: { ...prev.priceChange, enabled: e.target.checked }\n                  }))}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Price change alerts</span>\n              </label>\n              {alertRules.priceChange.enabled && (\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"50\"\n                  value={alertRules.priceChange.threshold}\n                  onChange={(e) => setAlertRules(prev => ({\n                    ...prev,\n                    priceChange: { ...prev.priceChange, threshold: parseFloat(e.target.value) }\n                  }))}\n                  className=\"mt-1 block w-full px-3 py-1 border border-gray-300 rounded-md text-sm\"\n                  placeholder=\"Threshold %\"\n                />\n              )}\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={alertRules.portfolioChange.enabled}\n                  onChange={(e) => setAlertRules(prev => ({\n                    ...prev,\n                    portfolioChange: { ...prev.portfolioChange, enabled: e.target.checked }\n                  }))}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Portfolio change alerts</span>\n              </label>\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={alertRules.strategyStop.enabled}\n                  onChange={(e) => setAlertRules(prev => ({\n                    ...prev,\n                    strategyStop: { ...prev.strategyStop, enabled: e.target.checked }\n                  }))}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Strategy alerts</span>\n              </label>\n            </div>\n\n            <div>\n              <label className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={alertRules.connectionIssues.enabled}\n                  onChange={(e) => setAlertRules(prev => ({\n                    ...prev,\n                    connectionIssues: { ...prev.connectionIssues, enabled: e.target.checked }\n                  }))}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Connection alerts</span>\n              </label>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Alerts List */}\n      <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n        {alerts.length > 0 ? (\n          alerts.map(alert => (\n            <div\n              key={alert.id}\n              className={`p-3 rounded-md border transition-all duration-200 cursor-pointer ${getAlertBgColor(alert)}`}\n              onClick={() => {\n                if (onAlertClick) {\n                  onAlertClick(alert);\n                }\n                if (!alert.acknowledged) {\n                  acknowledgeAlert(alert.id);\n                }\n              }}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-3 flex-1\">\n                  {getAlertIcon(alert)}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <h4 className=\"text-sm font-medium text-neutral-800 truncate\">\n                        {alert.title}\n                      </h4>\n                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(alert.priority)}`}>\n                        {alert.priority}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-neutral-600 mt-1\">\n                      {alert.message}\n                    </p>\n                    <p className=\"text-xs text-neutral-400 mt-1\">\n                      {new Date(alert.timestamp).toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeAlert(alert.id);\n                  }}\n                  className=\"ml-2 p-1 text-neutral-400 hover:text-neutral-600 transition-colors\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <Bell className=\"h-12 w-12 text-neutral-300 mx-auto mb-4\" />\n            <p className=\"text-neutral-500\">No alerts yet</p>\n            <p className=\"text-sm text-neutral-400 mt-1\">\n              Real-time alerts will appear here\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeAlerts;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/RealTimeMarketTicker.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedPairs'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [selectedPairs]","fix":{"range":[2792,2794],"text":"[selectedPairs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Activity, TrendingDown, TrendingUp, Wifi, WifiOff } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { useWebSocket } from '../../services/websocketService';\n\ninterface TickerData {\n  symbol: string;\n  price: number;\n  change24h: number;\n  changePercent24h: number;\n  volume24h: number;\n  high24h: number;\n  low24h: number;\n  lastUpdateTime: Date;\n}\n\nconst RealTimeMarketTicker: React.FC = () => {\n  const { isConnected, isMockMode } = useWebSocket();\n  const { isMockMode: contextMockMode } = useTradingContext();\n  const [tickerData, setTickerData] = useState<TickerData[]>([]);\n  const [selectedPairs] = useState(['BTC-USDT', 'ETH-USDT', 'ADA-USDT', 'DOT-USDT']);\n\n  // Generate mock ticker data for demonstration\n  useEffect(() => {\n    const generateMockTickerData = (): TickerData[] => {\n      const mockPairs = selectedPairs.map(pair => {\n        const basePrices: Record<string, number> = {\n          'BTC-USDT': 43000,\n          'ETH-USDT': 2500,\n          'ADA-USDT': 0.45,\n          'DOT-USDT': 6.5,\n          'SOL-USDT': 100,\n          'MATIC-USDT': 1.0,\n          'AVAX-USDT': 35,\n          'LINK-USDT': 15\n        };\n        return { symbol: pair, basePrice: basePrices[pair] || 100 };\n      });\n\n      return mockPairs.map(pair => {\n        const variance = (Math.random() - 0.5) * 0.1; // ±5% variance\n        const price = pair.basePrice * (1 + variance);\n        const change24h = pair.basePrice * (Math.random() - 0.5) * 0.2; // ±10% daily change\n        const changePercent24h = (change24h / pair.basePrice) * 100;\n\n        return {\n          symbol: pair.symbol,\n          price,\n          change24h,\n          changePercent24h,\n          volume24h: Math.random() * 1000000,\n          high24h: price * (1 + Math.random() * 0.05),\n          low24h: price * (1 - Math.random() * 0.05),\n          lastUpdateTime: new Date()\n        };\n      });\n    };\n\n    // Set initial mock data\n    setTickerData(generateMockTickerData());\n\n    // Update ticker data every 2 seconds to simulate real-time updates\n    const interval = setInterval(() => {\n      setTickerData(prevData =>\n        prevData.map(ticker => {\n          const priceChange = (Math.random() - 0.5) * ticker.price * 0.001; // ±0.1% change\n          const newPrice = Math.max(0.01, ticker.price + priceChange);\n          const change24h = ticker.change24h + priceChange;\n          const changePercent24h = (change24h / (newPrice - change24h)) * 100;\n\n          return {\n            ...ticker,\n            price: newPrice,\n            change24h,\n            changePercent24h,\n            lastUpdateTime: new Date()\n          };\n        })\n      );\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const formatPrice = (price: number, symbol: string) => {\n    if (symbol.includes('BTC')) return price.toFixed(0);\n    if (symbol.includes('ETH')) return price.toFixed(0);\n    return price.toFixed(4);\n  };\n\n  const formatVolume = (volume: number) => {\n    if (volume >= 1000000)\n    {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000)\n    {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toFixed(0);\n  };\n\n  const getConnectionStatusColor = () => {\n    if (isConnected && !isMockMode && !contextMockMode)\n    {\n      return 'bg-green-500';\n    } else if (isMockMode || contextMockMode)\n    {\n      return 'bg-yellow-500';\n    } else\n    {\n      return 'bg-red-500';\n    }\n  };\n\n  const getConnectionStatusText = () => {\n    if (isConnected && !isMockMode && !contextMockMode)\n    {\n      return 'Live Data';\n    } else if (isMockMode || contextMockMode)\n    {\n      return 'Mock Data';\n    } else\n    {\n      return 'Offline';\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold flex items-center\">\n          <Activity className=\"w-5 h-5 mr-2 text-blue-600\" />\n          Market Ticker\n        </h3>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-2 h-2 rounded-full ${getConnectionStatusColor()} animate-pulse`}></div>\n          <span className=\"text-xs text-gray-600\">{getConnectionStatusText()}</span>\n          {isConnected ?\n            <Wifi className=\"w-4 h-4 text-green-600\" /> :\n            <WifiOff className=\"w-4 h-4 text-red-600\" />\n          }\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {tickerData.map((ticker) => (\n          <div\n            key={ticker.symbol}\n            className=\"border border-gray-200 rounded-md p-3 hover:border-blue-300 transition-colors\"\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-medium text-gray-900\">{ticker.symbol}</span>\n              {ticker.changePercent24h >= 0 ? (\n                <TrendingUp className=\"w-4 h-4 text-green-600\" />\n              ) : (\n                <TrendingDown className=\"w-4 h-4 text-red-600\" />\n              )}\n            </div>\n\n            <div className=\"space-y-1\">\n              <div className=\"text-xl font-bold text-gray-900\">\n                ${formatPrice(ticker.price, ticker.symbol)}\n              </div>\n\n              <div className={`text-sm font-medium ${ticker.changePercent24h >= 0 ? 'text-green-600' : 'text-red-600'\n                }`}>\n                {ticker.changePercent24h >= 0 ? '+' : ''}{ticker.changePercent24h.toFixed(2)}%\n                <span className=\"ml-1 text-gray-500\">\n                  ({ticker.change24h >= 0 ? '+' : ''}${ticker.change24h.toFixed(2)})\n                </span>\n              </div>\n\n              <div className=\"text-xs text-gray-500 space-y-0.5\">\n                <div>Vol: {formatVolume(ticker.volume24h)}</div>\n                <div>H: ${formatPrice(ticker.high24h, ticker.symbol)} L: ${formatPrice(ticker.low24h, ticker.symbol)}</div>\n              </div>\n            </div>\n\n            <div className=\"mt-2 text-xs text-gray-400\">\n              {ticker.lastUpdateTime.toLocaleTimeString()}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Real-time status indicator */}\n      <div className=\"mt-4 flex items-center justify-center text-xs text-gray-500\">\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"w-1 h-1 bg-blue-500 rounded-full animate-pulse\"></div>\n          <span>Updates every 2 seconds</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeMarketTicker;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/RealTimePortfolio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/RecentTrades.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/dashboard/StrategyPerformance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ml/ModelRecalibrationPanel.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":22,"suggestions":[{"fix":{"range":[2801,2845],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":22,"suggestions":[{"fix":{"range":[3207,3257],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":20,"suggestions":[{"fix":{"range":[4410,4462],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"fix":{"range":[5796,5845],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":24,"suggestions":[{"fix":{"range":[6546,6616],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":24,"suggestions":[{"fix":{"range":[7640,7696],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  monitorMLModelPerformance, \n  monitorDQNModelPerformance, \n  recalibrateMLModel,\n  recalibrateDQNModel,\n  scheduleModelRecalibration,\n  RecalibrationConfig,\n  ModelPerformanceMetrics,\n  RecalibrationResult\n} from '@/ml/modelRecalibration';\nimport { usePoloniexData } from '@/hooks/usePoloniexData';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\ninterface ModelData {\n  id: string;\n  name: string;\n  type: string;\n  performance: number;\n}\n\ninterface MarketDataPoint {\n  timestamp: number;\n  price: number;\n  volume: number;\n}\n\nconst ModelRecalibrationPanel: React.FC = () => {\n  const { marketData: poloniexMarketData, fetchMarketData } = usePoloniexData();\n  \n  const [mlModels, setMlModels] = useState<ModelData[]>([]);\n  const [dqnModels, setDqnModels] = useState<ModelData[]>([]);\n  const [selectedModel, setSelectedModel] = useState<ModelData | null>(null);\n  const [marketData, setMarketData] = useState<MarketDataPoint[]>([]);\n  const [performanceMetrics, setPerformanceMetrics] = useState<ModelPerformanceMetrics | null>(null);\n  const [recalibrationResult, setRecalibrationResult] = useState<RecalibrationResult | null>(null);\n  const [performanceHistory, setPerformanceHistory] = useState<ModelPerformanceMetrics[]>([]);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [isRecalibrating, setIsRecalibrating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [recalibrationConfig, setRecalibrationConfig] = useState<RecalibrationConfig>({\n    monitoringFrequency: 'daily',\n    driftThreshold: 0.15,\n    autoRecalibrate: true,\n    performanceMetrics: ['accuracy', 'f1Score', 'sharpeRatio', 'winRate'],\n    validationSplit: 0.3,\n    maxHistoricalModels: 5,\n    recalibrationStrategy: 'incremental'\n  });\n  const [recalibrationStrategy, setRecalibrationStrategy] = useState<'full' | 'incremental' | 'transfer'>('incremental');\n  const [autoRecalibrationEnabled, setAutoRecalibrationEnabled] = useState(false);\n  const [cleanupFunction, setCleanupFunction] = useState<(() => void) | null>(null);\n  \n  // Load models from storage\n  useEffect(() => {\n    const loadModels = async () => {\n      try {\n        // In a real implementation, this would load from a database or file storage\n        // For now, we'll just check if there are any models in localStorage\n        const mlModelsJson = localStorage.getItem('mlModels');\n        const dqnModelsJson = localStorage.getItem('dqnModels');\n        \n        if (mlModelsJson) {\n          setMlModels(JSON.parse(mlModelsJson));\n        }\n        \n        if (dqnModelsJson) {\n          setDqnModels(JSON.parse(dqnModelsJson));\n        }\n      } catch (err) {\n        console.error('Error loading models:', err);\n        setError('Failed to load models');\n      }\n    };\n    \n    loadModels();\n  }, []);\n  \n  // Fetch market data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get market data for monitoring and recalibration\n        await fetchMarketData('BTC_USDT');\n        setMarketData(poloniexMarketData);\n      } catch (err) {\n        console.error('Error fetching market data:', err);\n        setError('Failed to fetch market data');\n      }\n    };\n    \n    fetchData();\n    \n    // Set up interval to refresh data\n    const intervalId = setInterval(fetchData, 4 * 60 * 60 * 1000); // Refresh every 4 hours\n    \n    return () => clearInterval(intervalId);\n  }, [fetchMarketData, poloniexMarketData]);\n  \n  // Monitor model performance\n  const handleMonitorPerformance = async () => {\n    if (!selectedModel) {\n      setError('No model selected');\n      return;\n    }\n    \n    if (marketData.length === 0) {\n      setError('No market data available');\n      return;\n    }\n    \n    setIsMonitoring(true);\n    setError(null);\n    \n    try {\n      let metrics;\n      \n      if (selectedModel.config.modelType) {\n        // ML model\n        metrics = await monitorMLModelPerformance(selectedModel, marketData);\n      } else {\n        // DQN model\n        metrics = await monitorDQNModelPerformance(selectedModel, marketData);\n      }\n      \n      setPerformanceMetrics(metrics);\n      \n      // Add to performance history\n      setPerformanceHistory(prev => [...prev, metrics]);\n      \n      setIsMonitoring(false);\n    } catch (err) {\n      console.error('Error monitoring performance:', err);\n      setError('Failed to monitor performance');\n      setIsMonitoring(false);\n    }\n  };\n  \n  // Recalibrate model\n  const handleRecalibrate = async () => {\n    if (!selectedModel) {\n      setError('No model selected');\n      return;\n    }\n    \n    if (marketData.length === 0) {\n      setError('No market data available');\n      return;\n    }\n    \n    setIsRecalibrating(true);\n    setError(null);\n    \n    try {\n      let result;\n      \n      if (selectedModel.config.modelType) {\n        // ML model\n        result = await recalibrateMLModel(selectedModel, marketData, recalibrationStrategy);\n      } else {\n        // DQN model\n        result = await recalibrateDQNModel(selectedModel, marketData, recalibrationStrategy);\n      }\n      \n      setRecalibrationResult(result);\n      \n      // Add to recalibration history\n      setRecalibrationHistory(prev => [...prev, result]);\n      \n      // Update model list with new model\n      if (selectedModel.config.modelType) {\n        // ML model\n        setMlModels(prev => [...prev, { id: result.newModelId, name: `${selectedModel.name} (Recalibrated)` }]);\n      } else {\n        // DQN model\n        setDqnModels(prev => [...prev, { id: result.newModelId, name: `${selectedModel.name} (Recalibrated)` }]);\n      }\n      \n      setIsRecalibrating(false);\n    } catch (err) {\n      console.error('Error recalibrating model:', err);\n      setError('Failed to recalibrate model');\n      setIsRecalibrating(false);\n    }\n  };\n  \n  // Toggle auto-recalibration\n  const handleToggleAutoRecalibration = () => {\n    if (autoRecalibrationEnabled) {\n      // Disable auto-recalibration\n      if (cleanupFunction) {\n        cleanupFunction();\n        setCleanupFunction(null);\n      }\n      setAutoRecalibrationEnabled(false);\n    } else {\n      // Enable auto-recalibration\n      if (!selectedModel) {\n        setError('No model selected');\n        return;\n      }\n      \n      const getNewData = async () => {\n        try {\n          await fetchMarketData('BTC_USDT');\n          return poloniexMarketData;\n        } catch (err) {\n          console.error('Error fetching new data for auto-recalibration:', err);\n          return [];\n        }\n      };\n      \n      // Schedule recalibration\n      const scheduleRecalibration = async () => {\n        try {\n          const newData = await getNewData();\n          if (newData.length === 0) return;\n          \n          const result = await scheduleModelRecalibration(\n            selectedModel,\n            recalibrationConfig,\n            newData\n          );\n          \n          if (result) {\n            // Update recalibration history\n            setRecalibrationHistory(prev => [...prev, result]);\n            \n            // Update model list with new model\n            if (selectedModel.config.modelType) {\n              // ML model\n              setMlModels(prev => [...prev, { id: result.newModelId, name: `${selectedModel.name} (Recalibrated)` }]);\n            } else {\n              // DQN model\n              setDqnModels(prev => [...prev, { id: result.newModelId, name: `${selectedModel.name} (Recalibrated)` }]);\n            }\n          }\n        } catch (err) {\n          console.error('Error in scheduled recalibration:', err);\n        }\n      };\n      \n      // Set up interval based on monitoring frequency\n      let intervalMs = 24 * 60 * 60 * 1000; // Default: daily\n      \n      if (recalibrationConfig.monitoringFrequency === 'hourly') {\n        intervalMs = 60 * 60 * 1000;\n      } else if (recalibrationConfig.monitoringFrequency === 'weekly') {\n        intervalMs = 7 * 24 * 60 * 60 * 1000;\n      }\n      \n      // Initial run\n      scheduleRecalibration();\n      \n      // Set up interval\n      const intervalId = setInterval(scheduleRecalibration, intervalMs);\n      \n      // Cleanup function\n      const cleanup = () => clearInterval(intervalId);\n      \n      setCleanupFunction(() => cleanup);\n      setAutoRecalibrationEnabled(true);\n    }\n  };\n  \n  // Format performance metrics for display\n  const formatMetrics = (metrics: ModelPerformanceMetrics) => {\n    const result = [];\n    \n    for (const [key, value] of Object.entries(metrics)) {\n      if (key !== 'timestamp' && key !== 'modelId' && key !== 'modelType' && typeof value === 'number') {\n        result.push({\n          name: key.charAt(0).toUpperCase() + key.slice(1),\n          value: value.toFixed(4)\n        });\n      }\n    }\n    \n    return result;\n  };\n  \n  // Prepare performance history data for chart\n  const prepareChartData = () => {\n    return performanceHistory.map((metrics, index) => ({\n      index,\n      timestamp: new Date(metrics.timestamp).toLocaleDateString(),\n      driftScore: metrics.driftScore,\n      accuracy: metrics.accuracy,\n      f1Score: metrics.f1Score,\n      sharpeRatio: metrics.sharpeRatio,\n      winRate: metrics.winRate\n    }));\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-neutral-800 rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold mb-4 text-neutral-800 dark:text-white\">Model Recalibration</h2>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Select Model</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              ML Models\n            </label>\n            <select\n              value={selectedModel?.id || ''}\n              onChange={(e) => {\n                const model = mlModels.find(m => m.id === e.target.value);\n                setSelectedModel(model || null);\n              }}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"\">Select ML Model</option>\n              {mlModels.map(model => (\n                <option key={model.id} value={model.id}>{model.name}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              DQN Models\n            </label>\n            <select\n              value={selectedModel?.id || ''}\n              onChange={(e) => {\n                const model = dqnModels.find(m => m.id === e.target.value);\n                setSelectedModel(model || null);\n              }}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"\">Select DQN Model</option>\n              {dqnModels.map(model => (\n                <option key={model.id} value={model.id}>{model.name}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Recalibration Settings</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Recalibration Strategy\n            </label>\n            <select\n              value={recalibrationStrategy}\n              onChange={(e) => setRecalibrationStrategy(e.target.value as 'full' | 'incremental' | 'transfer')}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"incremental\">Incremental (Fine-tune existing model)</option>\n              <option value=\"full\">Full (Retrain from scratch)</option>\n              <option value=\"transfer\">Transfer Learning (Optimize for new data)</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Drift Threshold\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.01\"\n              max=\"0.5\"\n              step=\"0.01\"\n              value={recalibrationConfig.driftThreshold}\n              onChange={(e) => setRecalibrationConfig({ ...recalibrationConfig, driftThreshold: parseFloat(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Monitoring Frequency\n            </label>\n            <select\n              value={recalibrationConfig.monitoringFrequency}\n              onChange={(e) => setRecalibrationConfig({ ...recalibrationConfig, monitoringFrequency: e.target.value as 'hourly' | 'daily' | 'weekly' })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"hourly\">Hourly</option>\n              <option value=\"daily\">Daily</option>\n              <option value=\"weekly\">Weekly</option>\n            </select>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"autoRecalibrate\"\n              checked={recalibrationConfig.autoRecalibrate}\n              onChange={(e) => setRecalibrationConfig({ ...recalibrationConfig, autoRecalibrate: e.target.checked })}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n            />\n            <label htmlFor=\"autoRecalibrate\" className=\"ml-2 block text-sm text-neutral-700 dark:text-neutral-300\">\n              Auto-recalibrate when drift exceeds threshold\n            </label>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex flex-wrap gap-4 mb-6\">\n        <button\n          onClick={handleMonitorPerformance}\n          disabled={isMonitoring || !selectedModel}\n          className={`px-4 py-2 rounded-md text-white ${\n            isMonitoring || !selectedModel ? 'bg-neutral-400' : 'bg-blue-600 hover:bg-blue-700'\n          }`}\n        >\n          {isMonitoring ? 'Monitoring...' : 'Monitor Performance'}\n        </button>\n        \n        <button\n          onClick={handleRecalibrate}\n          disabled={isRecalibrating || !selectedModel}\n          className={`px-4 py-2 rounded-md text-white ${\n            isRecalibrating || !selectedModel ? 'bg-neutral-400' : 'bg-green-600 hover:bg-green-700'\n          }`}\n        >\n          {isRecalibrating ? 'Recalibrating...' : 'Recalibrate Model'}\n        </button>\n        \n        <button\n          onClick={handleToggleAutoRecalibration}\n          disabled={!selectedModel}\n          className={`px-4 py-2 rounded-md text-white ${\n            !selectedModel ? 'bg-neutral-400' : autoRecalibrationEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-purple-600 hover:bg-purple-700'\n          }`}\n        >\n          {autoRecalibrationEnabled ? 'Disable Auto-Recalibration' : 'Enable Auto-Recalibration'}\n        </button>\n      </div>\n      \n      {performanceMetrics && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Performance Metrics</h3>\n          \n          <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {formatMetrics(performanceMetrics).map((metric, index) => (\n                <div key={index}>\n                  <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">{metric.name}</p>\n                  <p className=\"text-neutral-800 dark:text-white\">{metric.value}</p>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Drift Status</p>\n              <div className=\"flex items-center mt-1\">\n                <div className=\"w-full bg-neutral-200 rounded-full h-2.5 dark:bg-neutral-700\">\n                  <div \n                    className={`h-2.5 rounded-full ${\n                      performanceMetrics.driftScore! > recalibrationConfig.driftThreshold\n                        ? 'bg-red-600'\n                        : 'bg-green-600'\n                    }`} \n                    style={{ width: `${performanceMetrics.driftScore! * 100}%` }}\n                  ></div>\n                </div>\n                <span className=\"ml-2 text-sm text-neutral-700 dark:text-neutral-300\">\n                  {(performanceMetrics.driftScore! * 100).toFixed(1)}%\n                </span>\n              </div>\n              {performanceMetrics.driftScore! > recalibrationConfig.driftThreshold && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  Significant drift detected. Recalibration recommended.\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {recalibrationResult && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Recalibration Results</h3>\n          \n          <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Original Model</p>\n                <p className=\"text-neutral-800 dark:text-white\">{recalibrationResult.originalModelId}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">New Model</p>\n                <p className=\"text-neutral-800 dark:text-white\">{recalibrationResult.newModelId}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Recalibration Strategy</p>\n                <p className=\"text-neutral-800 dark:text-white\">{recalibrationResult.recalibrationStrategy}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Performance Improvement</p>\n                <p className={`${recalibrationResult.performanceImprovement > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {(recalibrationResult.performanceImprovement * 100).toFixed(1)}%\n                </p>\n              </div>\n              \n              <div className=\"col-span-2\">\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Reason</p>\n                <p className=\"text-neutral-800 dark:text-white\">{recalibrationResult.reason}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {performanceHistory.length > 1 && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Performance History</h3>\n          \n          <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\" style={{ height: '300px' }}>\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={prepareChartData()}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"timestamp\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"driftScore\" stroke=\"#ff0000\" name=\"Drift Score\" />\n                <Line type=\"monotone\" dataKey=\"accuracy\" stroke=\"#00ff00\" name=\"Accuracy\" />\n                <Line type=\"monotone\" dataKey=\"f1Score\" stroke=\"#0000ff\" name=\"F1 Score\" />\n                <Line type=\"monotone\" dataKey=\"sharpeRatio\" stroke=\"#ff00ff\" name=\"Sharpe Ratio\" />\n                <Line type=\"monotone\" dataKey=\"winRate\" stroke=\"#00ffff\" name=\"Win Rate\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { ModelRecalibrationPanel };","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/settings/MockModeSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/settings/SettingsExportImport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/settings/TradingSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/strategy/NewStrategyForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1110,1113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1110,1113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { Strategy, StrategyType } from '../../types';\nimport { X } from 'lucide-react';\n\ninterface NewStrategyFormProps {\n  onClose: () => void;\n}\n\nconst NewStrategyForm: React.FC<NewStrategyFormProps> = ({ onClose }) => {\n  const { addStrategy } = useTradingContext();\n  const [name, setName] = useState('');\n  const [type, setType] = useState<StrategyType>(StrategyType.MA_CROSSOVER);\n  const [pair, setPair] = useState('BTC-USDT');\n  \n  // MA Crossover parameters\n  const [shortPeriod, setShortPeriod] = useState(10);\n  const [longPeriod, setLongPeriod] = useState(50);\n  \n  // RSI parameters\n  const [rsiPeriod, setRsiPeriod] = useState(14);\n  const [overbought, setOverbought] = useState(70);\n  const [oversold, setOversold] = useState(30);\n  \n  // Breakout parameters\n  const [lookbackPeriod, setLookbackPeriod] = useState(24);\n  const [breakoutThreshold, setBreakoutThreshold] = useState(2.5);\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    let parameters: any = { pair };\n    \n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        parameters = {\n          ...parameters,\n          shortPeriod,\n          longPeriod\n        };\n        break;\n      case StrategyType.RSI:\n        parameters = {\n          ...parameters,\n          period: rsiPeriod,\n          overbought,\n          oversold\n        };\n        break;\n      case StrategyType.BREAKOUT:\n        parameters = {\n          ...parameters,\n          lookbackPeriod,\n          breakoutThreshold\n        };\n        break;\n    }\n    \n    const newStrategy: Strategy = {\n      id: Date.now().toString(),\n      name,\n      type,\n      parameters,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      performance: {\n        totalPnL: 0,\n        winRate: 0,\n        tradesCount: 0\n      }\n    };\n    \n    addStrategy(newStrategy);\n    onClose();\n  };\n  \n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Create New Strategy</h2>\n        <button \n          className=\"p-1.5 rounded-md bg-neutral-100 text-neutral-500 hover:bg-neutral-200\"\n          onClick={onClose}\n        >\n          <X className=\"h-5 w-5\" />\n        </button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700\">Strategy Name</label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"mt-1 block w-full input\"\n              placeholder=\"My Trading Strategy\"\n              required\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700\">Strategy Type</label>\n              <select\n                value={type}\n                onChange={(e) => setType(e.target.value as StrategyType)}\n                className=\"mt-1 block w-full select\"\n              >\n                <option value={StrategyType.MA_CROSSOVER}>Moving Average Crossover</option>\n                <option value={StrategyType.RSI}>RSI</option>\n                <option value={StrategyType.BREAKOUT}>Breakout</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700\">Trading Pair</label>\n              <select\n                value={pair}\n                onChange={(e) => setPair(e.target.value)}\n                className=\"mt-1 block w-full select\"\n              >\n                <option value=\"BTC-USDT\">BTC-USDT</option>\n                <option value=\"ETH-USDT\">ETH-USDT</option>\n                <option value=\"SOL-USDT\">SOL-USDT</option>\n              </select>\n            </div>\n          </div>\n          \n          {type === StrategyType.MA_CROSSOVER && (\n            <div className=\"bg-blue-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">Moving Average Crossover Parameters</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Short Period</label>\n                  <input\n                    type=\"number\"\n                    value={shortPeriod}\n                    onChange={(e) => setShortPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    max={longPeriod - 1}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Long Period</label>\n                  <input\n                    type=\"number\"\n                    value={longPeriod}\n                    onChange={(e) => setLongPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min={shortPeriod + 1}\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {type === StrategyType.RSI && (\n            <div className=\"bg-purple-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">RSI Parameters</h3>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Period</label>\n                  <input\n                    type=\"number\"\n                    value={rsiPeriod}\n                    onChange={(e) => setRsiPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Overbought</label>\n                  <input\n                    type=\"number\"\n                    value={overbought}\n                    onChange={(e) => setOverbought(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min={oversold + 1}\n                    max=\"100\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Oversold</label>\n                  <input\n                    type=\"number\"\n                    value={oversold}\n                    onChange={(e) => setOversold(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"0\"\n                    max={overbought - 1}\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {type === StrategyType.BREAKOUT && (\n            <div className=\"bg-orange-50 p-4 rounded-md\">\n              <h3 className=\"font-medium mb-3\">Breakout Parameters</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Lookback Period</label>\n                  <input\n                    type=\"number\"\n                    value={lookbackPeriod}\n                    onChange={(e) => setLookbackPeriod(parseInt(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"1\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-neutral-700\">Breakout Threshold (%)</label>\n                  <input\n                    type=\"number\"\n                    value={breakoutThreshold}\n                    onChange={(e) => setBreakoutThreshold(parseFloat(e.target.value))}\n                    className=\"mt-1 block w-full input\"\n                    min=\"0.1\"\n                    step=\"0.1\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Create Strategy\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default NewStrategyForm;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/strategy/StrategyAutomation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/strategy/StrategyDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2998,3001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2998,3001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":123,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":126,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3042,3045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3042,3045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3295,3298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3295,3298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":122,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":125,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3338,3341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3338,3341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3711,3714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3711,3714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3959,3962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3959,3962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4209,4212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4209,4212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4594,4597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4594,4597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4858,4861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4858,4861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9536,9539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9536,9539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9894,9897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9894,9897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Strategy, StrategyType } from '../../types';\nimport { BacktestResult } from '../../types/backtest';\nimport PriceChart from '../charts/PriceChart';\nimport { useTradingContext } from '../../hooks/useTradingContext';\nimport { Clock, Zap, BarChart2, History, Sparkles, RefreshCw } from 'lucide-react';\n\ninterface StrategyDetailsProps {\n  strategy: Strategy;\n  backtestResults?: BacktestResult | null;\n  isBacktesting?: boolean;\n  isOptimizing?: boolean;\n}\n\nconst StrategyDetails: React.FC<StrategyDetailsProps> = ({ \n  strategy,\n  backtestResults,\n  isBacktesting,\n  isOptimizing\n}) => {\n  const { marketData } = useTradingContext();\n  const [timeframe, setTimeframe] = useState<'1h' | '4h' | '1d'>('1h');\n  const [chartType, setChartType] = useState<'candlestick' | 'line'>('candlestick');\n  \n  const getStrategyTypeIcon = (type: string) => {\n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        return <Zap className=\"h-6 w-6 text-blue-500\" />;\n      case StrategyType.RSI:\n        return <BarChart2 className=\"h-6 w-6 text-purple-500\" />;\n      case StrategyType.BREAKOUT:\n        return <RefreshCw className=\"h-6 w-6 text-orange-500\" />;\n      default:\n        return <Zap className=\"h-6 w-6 text-neutral-500\" />;\n    }\n  };\n  \n  const getStrategyTypeName = (type: string) => {\n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        return 'Moving Average Crossover';\n      case StrategyType.RSI:\n        return 'Relative Strength Index (RSI)';\n      case StrategyType.BREAKOUT:\n        return 'Breakout';\n      default:\n        return type;\n    }\n  };\n  \n  const getStrategyDescription = (type: string) => {\n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        return 'This strategy generates signals when the short-term moving average crosses the long-term moving average. A buy signal is generated when the short MA crosses above the long MA, and a sell signal when it crosses below.';\n      case StrategyType.RSI:\n        return 'The RSI strategy measures the magnitude of recent price changes to evaluate overbought or oversold conditions. It generates buy signals when RSI crosses above the oversold threshold and sell signals when it crosses below the overbought threshold.';\n      case StrategyType.BREAKOUT:\n        return 'The Breakout strategy identifies significant price movements beyond established support and resistance levels. It generates buy signals when the price breaks above resistance and sell signals when it breaks below support.';\n      default:\n        return 'Custom trading strategy.';\n    }\n  };\n  \n  const renderParameters = () => {\n    switch (strategy.type) {\n      case StrategyType.MA_CROSSOVER:\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Short Period</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).shortPeriod || (strategy.parameters as any).fastPeriod}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Long Period</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).longPeriod || (strategy.parameters as any).slowPeriod}</div>\n            </div>\n          </div>\n        );\n      case StrategyType.RSI:\n        return (\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Period</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).period}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Overbought</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).overbought}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Oversold</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).oversold}</div>\n            </div>\n          </div>\n        );\n      case StrategyType.BREAKOUT:\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Lookback Period</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).lookbackPeriod}</div>\n            </div>\n            <div className=\"bg-neutral-50 p-3 rounded-md\">\n              <div className=\"text-sm text-neutral-500\">Breakout Threshold</div>\n              <div className=\"text-lg font-semibold\">{(strategy.parameters as any).breakoutThreshold}%</div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div>\n      <div className=\"flex items-start justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <div className=\"mr-4\">\n            {getStrategyTypeIcon(strategy.type)}\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold\">{strategy.name}</h2>\n            <div className=\"flex items-center text-sm text-neutral-500 mt-1\">\n              <span>{getStrategyTypeName(strategy.type)}</span>\n              <span className=\"mx-2\">•</span>\n              <span>{strategy.parameters.pair}</span>\n              <span className=\"mx-2\">•</span>\n              <Clock className=\"h-4 w-4 mr-1\" />\n              <span>Created {new Date(strategy.createdAt).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          {isBacktesting && (\n            <div className=\"flex items-center text-blue-600\">\n              <History className=\"h-4 w-4 mr-1 animate-spin\" />\n              <span>Backtesting...</span>\n            </div>\n          )}\n          {isOptimizing && (\n            <div className=\"flex items-center text-purple-600\">\n              <Sparkles className=\"h-4 w-4 mr-1 animate-spin\" />\n              <span>Optimizing...</span>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        <div className=\"text-neutral-700 mb-4\">{getStrategyDescription(strategy.type)}</div>\n        {renderParameters()}\n      </div>\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-3\">Performance</h3>\n        <div className=\"grid grid-cols-3 gap-4 mb-4\">\n          {strategy.performance && (\n            <>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Total P&L</div>\n                <div className={`text-lg font-semibold ${\n                  strategy.performance.totalPnL >= 0 ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {strategy.performance.totalPnL >= 0 ? '+' : ''}\n                  {strategy.performance.totalPnL.toFixed(2)}\n                </div>\n              </div>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Win Rate</div>\n                <div className=\"text-lg font-semibold\">\n                  {(strategy.performance.winRate * 100).toFixed(1)}%\n                </div>\n              </div>\n              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                <div className=\"text-sm text-neutral-500\">Total Trades</div>\n                <div className=\"text-lg font-semibold\">{strategy.performance.tradesCount}</div>\n              </div>\n            </>\n          )}\n        </div>\n        \n        {backtestResults && (\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium mb-3\">Backtest Results</h4>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-sm text-neutral-600\">Initial Balance</div>\n                <div className=\"font-medium\">${backtestResults.initialBalance.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Final Balance</div>\n                <div className=\"font-medium\">${backtestResults.finalBalance.toFixed(2)}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Total Trades</div>\n                <div className=\"font-medium\">{backtestResults.totalTrades}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Win Rate</div>\n                <div className=\"font-medium\">{(backtestResults.winRate * 100).toFixed(1)}%</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Max Drawdown</div>\n                <div className=\"font-medium\">{(backtestResults.maxDrawdown * 100).toFixed(1)}%</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-neutral-600\">Sharpe Ratio</div>\n                <div className=\"font-medium\">{backtestResults.sharpeRatio.toFixed(2)}</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-3\">Market Data</h3>\n        <div className=\"flex space-x-4 mb-4\">\n          <select\n            value={timeframe}\n            onChange={(e) => setTimeframe(e.target.value as any)}\n            className=\"px-3 py-1 border border-neutral-300 rounded-md\"\n          >\n            <option value=\"1h\">1 Hour</option>\n            <option value=\"4h\">4 Hours</option>\n            <option value=\"1d\">1 Day</option>\n          </select>\n          <select\n            value={chartType}\n            onChange={(e) => setChartType(e.target.value as any)}\n            className=\"px-3 py-1 border border-neutral-300 rounded-md\"\n          >\n            <option value=\"candlestick\">Candlestick</option>\n            <option value=\"line\">Line</option>\n          </select>\n        </div>\n        <PriceChart data={marketData} pair={strategy.parameters.pair} />\n      </div>\n    </div>\n  );\n};\n\nexport default StrategyDetails;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/AutomationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[832,835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[832,835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":22,"suggestions":[{"fix":{"range":[1315,1371],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"fix":{"range":[4118,4137],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useSettings } from '../../hooks/useSettings';\nimport { tradingEngine } from '@/trading/tradingEngine';\nimport { executeStrategy } from '@/utils/strategyExecutors';\nimport { poloniexApi } from '@/services/poloniexAPI';\nimport { logger } from '@/utils/logger';\nimport { Card, CardHeader, CardBody, CardFooter, Button, Switch, Label, Alert } from '@/components/ui';\n\nconst AutomationPanel: React.FC = () => {\n  const { \n    autoTradingEnabled, \n    defaultPair,\n    // Removed unused timeframe variable\n    leverage,\n    riskPerTrade,\n    stopLossPercent,\n    takeProfitPercent,\n    updateSettings\n  } = useSettings();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [strategies, setStrategies] = useState<any[]>([]);\n  const [activeStrategy, setActiveStrategy] = useState<string | null>(null);\n  const [lastSignal, setLastSignal] = useState<{\n    time: string;\n    pair: string;\n    signal: string | null;\n    reason: string;\n  } | null>(null);\n  \n  // Load saved strategies\n  useEffect(() => {\n    const savedStrategies = localStorage.getItem('trading_strategies');\n    if (savedStrategies) {\n      try {\n        setStrategies(JSON.parse(savedStrategies));\n      } catch (err) {\n        console.error('Failed to parse saved strategies:', err);\n      }\n    }\n    \n    // Load active strategy\n    const active = localStorage.getItem('active_strategy');\n    if (active) {\n      setActiveStrategy(active);\n    }\n  }, []);\n  \n  // Start/stop automation\n  const toggleAutomation = async () => {\n    try {\n      if (autoTradingEnabled) {\n        await tradingEngine.stopTrading();\n        updateSettings({ autoTradingEnabled: false });\n      } else {\n        if (!activeStrategy) {\n          setError('Please select a strategy to activate automation');\n          return;\n        }\n        \n        await tradingEngine.startTradingLoop();\n        updateSettings({ autoTradingEnabled: true });\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to toggle automation');\n    }\n  };\n  \n  // Activate a strategy\n  const activateStrategy = (strategyId: string) => {\n    setActiveStrategy(strategyId);\n    localStorage.setItem('active_strategy', strategyId);\n  };\n  \n  // Run strategy once\n  const runStrategyOnce = async (strategyId: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const strategy = strategies.find(s => s.id === strategyId);\n      if (!strategy) {\n        throw new Error('Strategy not found');\n      }\n      \n      // Get market data\n      const pair = strategy.parameters.pair || defaultPair;\n      const data = await poloniexApi.getMarketData(pair);\n      \n      // Execute strategy\n      const result = executeStrategy(strategy, data);\n      \n      // Record signal\n      setLastSignal({\n        time: new Date().toLocaleTimeString(),\n        pair,\n        signal: result.signal,\n        reason: result.reason\n      });\n      \n      // Execute trade if signal is present and confidence is high enough\n      if (result.signal && result.confidence > 0.7) {\n        const side = result.signal === 'BUY' ? 'buy' : 'sell';\n        \n        // Check if we're in paper or live mode\n        if (tradingEngine.modeManager.isLiveMode()) {\n          // For live trading, use the API - fixed parameter count\n          await poloniexApi.placeOrder(\n            pair,\n            side,\n            'market',\n            0.001 // Minimum order size\n          );\n        } else {\n          // For paper trading, use the paper engine\n          const paperEngine = tradingEngine.modeManager.getPaperEngine();\n          await paperEngine.placeOrder({\n            symbol: pair,\n            side: side.toLowerCase() as 'buy' | 'sell',\n            type: 'market',\n            size: 0.001,\n            leverage\n          });\n        }\n        \n        logger.info(`Executed ${side} order based on strategy ${strategy.name}`);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to run strategy');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <h3 className=\"text-lg font-medium\">Trading Automation</h3>\n      </CardHeader>\n      <CardBody>\n        {error && (\n          <Alert variant=\"error\" className=\"mb-4\">\n            {error}\n          </Alert>\n        )}\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"automation\">Automated Trading</Label>\n              <p className=\"text-xs text-neutral-500\">\n                Automatically execute trades based on your active strategy\n              </p>\n            </div>\n            <Switch\n              id=\"automation\"\n              checked={autoTradingEnabled}\n              onCheckedChange={toggleAutomation}\n              disabled={isLoading || !activeStrategy}\n            />\n          </div>\n          \n          {lastSignal && (\n            <div className=\"p-4 border rounded-md\">\n              <h4 className=\"font-medium mb-2\">Last Signal:</h4>\n              <p><strong>Time:</strong> {lastSignal.time}</p>\n              <p><strong>Pair:</strong> {lastSignal.pair}</p>\n              <p><strong>Signal:</strong> {lastSignal.signal || 'No signal'}</p>\n              <p><strong>Reason:</strong> {lastSignal.reason}</p>\n            </div>\n          )}\n          \n          <div className=\"mt-6\">\n            <h4 className=\"font-medium mb-2\">Available Strategies</h4>\n            {strategies.length === 0 ? (\n              <p className=\"text-neutral-500\">No strategies available. Create one in the Strategy Builder.</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {strategies.map(strategy => (\n                  <div \n                    key={strategy.id} \n                    className={`p-3 border rounded-md flex justify-between items-center ${\n                      activeStrategy === strategy.id ? 'border-blue-500 bg-blue-50' : ''\n                    }`}\n                  >\n                    <div>\n                      <p className=\"font-medium\">{strategy.name}</p>\n                      <p className=\"text-sm text-neutral-500\">{strategy.type} - {strategy.parameters.pair}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant={activeStrategy === strategy.id ? \"default\" : \"outline\"}\n                        onClick={() => activateStrategy(strategy.id)}\n                      >\n                        {activeStrategy === strategy.id ? 'Active' : 'Activate'}\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        onClick={() => runStrategyOnce(strategy.id)}\n                        disabled={isLoading}\n                      >\n                        Run Once\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </CardBody>\n      <CardFooter>\n        <p className=\"text-sm text-neutral-500\">\n          Trading parameters: {leverage}x leverage, {riskPerTrade}% risk per trade, \n          {stopLossPercent}% stop loss, {takeProfitPercent}% take profit\n        </p>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default AutomationPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/AutonomousTradingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/DQNTradingPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2391,2394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2391,2394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2639,2642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2639,2642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":22,"suggestions":[{"fix":{"range":[2951,2970],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":20,"suggestions":[{"fix":{"range":[3778,3797],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":20,"suggestions":[{"fix":{"range":[4405,4424],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":20,"suggestions":[{"fix":{"range":[5312,5331],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":18,"suggestions":[{"fix":{"range":[5763,6018],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":18,"suggestions":[{"fix":{"range":[6160,6417],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { default as dqnTrading } from '@/ml/dqnTrading';\nimport { usePoloniexData } from '@/hooks/usePoloniexData';\nimport { useSettings } from '../../hooks/useSettings';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\ninterface DQNConfig {\n  stateDimension: number;\n  actionDimension: number;\n  learningRate: number;\n  gamma: number;\n  epsilonStart: number;\n  epsilonEnd: number;\n  epsilonDecay: number;\n  memorySize: number;\n  batchSize: number;\n  updateTargetFreq: number;\n  hiddenLayers: number[];\n  activationFunction: string;\n  optimizer: string;\n}\n\ninterface DQNModelInfo {\n  id: string;\n  name: string;\n  description: string;\n  config: DQNConfig;\n  performance: {\n    averageReward: number;\n    cumulativeReward: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    episodeRewards: number[];\n    trainingEpisodes: number;\n  };\n  createdAt: number;\n  updatedAt: number;\n  lastTrainedAt: number;\n  status: 'training' | 'ready' | 'error';\n  episodesCompleted: number;\n  totalTrainingSteps: number;\n}\n\ninterface DQNAction {\n  timestamp: number;\n  symbol: string;\n  action: 'buy' | 'sell' | 'hold';\n  confidence: number;\n  position?: number;\n  price?: number;\n}\n\nconst DQNTradingPanel: React.FC = () => {\n  const { marketData: poloniexMarketData, fetchMarketData } = usePoloniexData();\n  const { defaultPair, timeframe } = useSettings();\n  \n  const [modelConfig, setModelConfig] = useState<Partial<DQNConfig>>({\n    stateDimension: 8, // Default state dimension\n    actionDimension: 3, // Default action dimension (buy, sell, hold)\n    learningRate: 0.0001,\n    gamma: 0.99,\n    epsilonStart: 1.0,\n    epsilonEnd: 0.01,\n    epsilonDecay: 0.995,\n    memorySize: 10000,\n    batchSize: 32,\n    updateTargetFreq: 100,\n    hiddenLayers: [128, 64],\n    activationFunction: 'relu',\n    optimizer: 'adam',\n  });\n  \n  const [modelInfo, setModelInfo] = useState<DQNModelInfo | null>(null);\n  const [actions, setActions] = useState<DQNAction[]>([]);\n  const [isTraining, setIsTraining] = useState(false);\n  const [isGettingActions, setIsGettingActions] = useState(false);\n  const [isContinuingTraining, setIsContinuingTraining] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [marketData, setMarketData] = useState<any[]>([]);\n  const [modelName, setModelName] = useState('My DQN Model');\n  const [episodes, setEpisodes] = useState(100);\n  const [additionalEpisodes, setAdditionalEpisodes] = useState(50);\n  const [performanceData, setPerformanceData] = useState<any[]>([]);\n  \n  // Fetch market data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get market data for training\n        await fetchMarketData(defaultPair);\n        setMarketData(poloniexMarketData);\n      } catch (err) {\n        setError('Failed to fetch market data');\n        console.error(err);\n      }\n    };\n    \n    fetchData();\n  }, [defaultPair, timeframe, fetchMarketData, poloniexMarketData]);\n  \n  // Train model\n  const handleTrainModel = async () => {\n    if (marketData.length === 0) {\n      setError('No market data available for training');\n      return;\n    }\n    \n    setIsTraining(true);\n    setError(null);\n    \n    try {\n      const info = await dqnTrading.trainDQNModel(marketData, modelConfig as DQNConfig, modelName, episodes);\n      setModelInfo(info);\n      \n      // Prepare performance data for chart\n      const chartData = info.performance.episodeRewards.map((reward, index) => ({\n        episode: index + 1,\n        reward,\n      }));\n      setPerformanceData(chartData);\n      \n      setIsTraining(false);\n    } catch (err) {\n      setError('Failed to train model');\n      console.error(err);\n      setIsTraining(false);\n    }\n  };\n  \n  // Get trading actions\n  const handleGetActions = async () => {\n    if (!modelInfo) {\n      setError('No trained model available');\n      return;\n    }\n    \n    if (marketData.length === 0) {\n      setError('No market data available for prediction');\n      return;\n    }\n    \n    setIsGettingActions(true);\n    setError(null);\n    \n    try {\n      const actionsList = await dqnTrading.getDQNActions(modelInfo, marketData);\n      setActions(actionsList);\n      setIsGettingActions(false);\n    } catch (err) {\n      setError('Failed to get trading actions');\n      console.error(err);\n      setIsGettingActions(false);\n    }\n  };\n  \n  // Continue training\n  const handleContinueTraining = async () => {\n    if (!modelInfo) {\n      setError('No trained model available');\n      return;\n    }\n    \n    if (marketData.length === 0) {\n      setError('No market data available for training');\n      return;\n    }\n    \n    setIsContinuingTraining(true);\n    setError(null);\n    \n    try {\n      const updatedInfo = await dqnTrading.continueDQNTraining(modelInfo, marketData, additionalEpisodes);\n      setModelInfo(updatedInfo);\n      \n      // Update performance data for chart\n      const chartData = updatedInfo.performance.episodeRewards.map((reward, index) => ({\n        episode: index + 1,\n        reward,\n      }));\n      setPerformanceData(chartData);\n      \n      setIsContinuingTraining(false);\n    } catch (err) {\n      setError('Failed to continue training');\n      console.error(err);\n      setIsContinuingTraining(false);\n    }\n  };\n  \n  // Execute trades based on DQN actions\n  const handleExecuteTrades = () => {\n    if (actions.length === 0) {\n      setError('No actions available');\n      return;\n    }\n    \n    // Get the latest action\n    const latestAction = actions[0];\n    \n    if (latestAction.action === 'buy') {\n      // Execute buy strategy\n      // TODO: Implement executeStrategy functionality\n      console.log('DQN Strategy - BUY signal:', {\n        type: 'DQN_STRATEGY',\n        action: 'BUY',\n        symbol: defaultPair,\n        amount: 0.01, // Small fixed amount\n        confidence: latestAction.confidence,\n        modelId: modelInfo?.id\n      });\n    } else if (latestAction.action === 'sell') {\n      // Execute sell strategy\n      // TODO: Implement executeStrategy functionality\n      console.log('DQN Strategy - SELL signal:', {\n        type: 'DQN_STRATEGY',\n        action: 'SELL',\n        symbol: defaultPair,\n        amount: 0.01, // Small fixed amount\n        confidence: latestAction.confidence,\n        modelId: modelInfo?.id\n      });\n    }\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-neutral-800 rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold mb-4 text-neutral-800 dark:text-white\">DQN Reinforcement Learning Trading</h2>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Model Configuration</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Model Name\n            </label>\n            <input\n              type=\"text\"\n              value={modelName}\n              onChange={(e) => setModelName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Training Episodes\n            </label>\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"1000\"\n              value={episodes}\n              onChange={(e) => setEpisodes(parseInt(e.target.value))}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Learning Rate\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.00001\"\n              max=\"0.1\"\n              step=\"0.00001\"\n              value={modelConfig.learningRate}\n              onChange={(e) => setModelConfig({ ...modelConfig, learningRate: parseFloat(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Discount Factor (Gamma)\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.5\"\n              max=\"0.999\"\n              step=\"0.001\"\n              value={modelConfig.gamma}\n              onChange={(e) => setModelConfig({ ...modelConfig, gamma: parseFloat(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Initial Exploration Rate\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.1\"\n              max=\"1.0\"\n              step=\"0.1\"\n              value={modelConfig.epsilonStart}\n              onChange={(e) => setModelConfig({ ...modelConfig, epsilonStart: parseFloat(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Final Exploration Rate\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.001\"\n              max=\"0.5\"\n              step=\"0.001\"\n              value={modelConfig.epsilonEnd}\n              onChange={(e) => setModelConfig({ ...modelConfig, epsilonEnd: parseFloat(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex flex-wrap gap-4 mb-6\">\n        <button\n          onClick={handleTrainModel}\n          disabled={isTraining || marketData.length === 0}\n          className={`px-4 py-2 rounded-md text-white ${\n            isTraining ? 'bg-neutral-400' : 'bg-blue-600 hover:bg-blue-700'\n          }`}\n        >\n          {isTraining ? 'Training...' : 'Train DQN Model'}\n        </button>\n        \n        <button\n          onClick={handleGetActions}\n          disabled={isGettingActions || !modelInfo}\n          className={`px-4 py-2 rounded-md text-white ${\n            isGettingActions || !modelInfo ? 'bg-neutral-400' : 'bg-purple-600 hover:bg-purple-700'\n          }`}\n        >\n          {isGettingActions ? 'Getting Actions...' : 'Get Trading Actions'}\n        </button>\n        \n        <button\n          onClick={handleExecuteTrades}\n          disabled={actions.length === 0}\n          className={`px-4 py-2 rounded-md text-white ${\n            actions.length === 0 ? 'bg-neutral-400' : 'bg-red-600 hover:bg-red-700'\n          }`}\n        >\n          Execute Trades\n        </button>\n      </div>\n      \n      {modelInfo && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Model Information</h3>\n          \n          <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Name</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.name}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Episodes</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.episodesCompleted}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Average Reward</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.performance.averageReward.toFixed(4)}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Sharpe Ratio</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.performance.sharpeRatio.toFixed(4)}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Win Rate</p>\n                <p className=\"text-neutral-800 dark:text-white\">{(modelInfo.performance.winRate * 100).toFixed(2)}%</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Last Trained</p>\n                <p className=\"text-neutral-800 dark:text-white\">\n                  {new Date(modelInfo.lastTrainedAt).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {performanceData.length > 0 && (\n            <div className=\"mt-4\">\n              <h4 className=\"text-md font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Training Performance</h4>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={performanceData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"episode\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"reward\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"mt-6\">\n            <h4 className=\"text-md font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Continue Training</h4>\n            <div className=\"flex items-center gap-4\">\n              <input\n                type=\"number\"\n                min=\"10\"\n                max=\"500\"\n                value={additionalEpisodes}\n                onChange={(e) => setAdditionalEpisodes(parseInt(e.target.value))}\n                className=\"w-32 px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n              />\n              <button\n                onClick={handleContinueTraining}\n                disabled={isContinuingTraining}\n                className={`px-4 py-2 rounded-md text-white ${\n                  isContinuingTraining ? 'bg-neutral-400' : 'bg-green-600 hover:bg-green-700'\n                }`}\n              >\n                {isContinuingTraining ? 'Training...' : 'Continue Training'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {actions.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Trading Actions</h3>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n              <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Time\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Symbol\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Action\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Confidence\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Price\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                {actions.slice(0, 10).map((action, index) => (\n                  <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {new Date(action.timestamp).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {action.symbol}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                          action.action === 'buy'\n                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                            : action.action === 'sell'\n                            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                            : 'bg-neutral-100 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-300'\n                        }`}\n                      >\n                        {action.action.toUpperCase()}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {(action.confidence * 100).toFixed(2)}%\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {action.price ? `$${action.price.toFixed(2)}` : '-'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { DQNTradingPanel };","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/FuturesTradingPanel.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"fix":{"range":[2453,2499],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":20,"suggestions":[{"fix":{"range":[3296,3341],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"fix":{"range":[4162,4210],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Select, SelectOption } from '@/components/ui/Select';\nimport { Switch } from '@/components/ui/Switch';\nimport { useFutures } from '../../hooks/useFutures';\nimport { MarginMode, OrderSide, OrderType, PositionSide } from '@/services/poloniexFuturesAPI';\n\ninterface FuturesTradingPanelProps {\n  symbol: string;\n}\n\nconst FuturesTradingPanel: React.FC<FuturesTradingPanelProps> = ({ symbol }) => {\n  const { \n    api, \n    positions, \n    accountBalance, \n    positionMode, \n    isLoading, \n    error,\n    refreshPositions,\n    setLeverage\n  } = useFutures();\n\n  // Trading form state\n  const [orderSide, setOrderSide] = useState<OrderSide>(OrderSide.BUY);\n  const [orderType, setOrderType] = useState<OrderType>(OrderType.LIMIT);\n  const [positionSide, setPositionSide] = useState<PositionSide>(PositionSide.LONG);\n  const [price, setPrice] = useState<string>('');\n  const [quantity, setQuantity] = useState<string>('');\n  const [leverage, setLeverageState] = useState<string>('10');\n  const [marginMode, setMarginMode] = useState<MarginMode>(MarginMode.CROSS);\n  const [isReduceOnly, setIsReduceOnly] = useState<boolean>(false);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [orderError, setOrderError] = useState<string | null>(null);\n\n  // Get current position for this symbol\n  const currentPosition = positions.find(pos => pos.symbol === symbol);\n\n  // Calculate max quantity based on account balance and leverage\n  const calculateMaxQuantity = (): string => {\n    if (!accountBalance || !price) return '0';\n    \n    const availableBalance = parseFloat(accountBalance.eq);\n    const currentPrice = parseFloat(price);\n    const currentLeverage = parseFloat(leverage);\n    \n    if (isNaN(availableBalance) || isNaN(currentPrice) || isNaN(currentLeverage) || currentPrice === 0) {\n      return '0';\n    }\n    \n    // Max quantity = (Available Balance * Leverage) / Price\n    const maxQty = (availableBalance * currentLeverage) / currentPrice;\n    return maxQty.toFixed(8);\n  };\n\n  // Handle leverage change\n  const handleLeverageChange = async (newLeverage: string) => {\n    setLeverageState(newLeverage);\n    \n    try {\n      await setLeverage(symbol, newLeverage, marginMode);\n    } catch (err) {\n      console.error('Failed to set leverage:', err);\n    }\n  };\n\n  // Handle order submission\n  const handleSubmitOrder = async () => {\n    if (!symbol || !quantity || (orderType === OrderType.LIMIT && !price)) {\n      setOrderError('Please fill all required fields');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setOrderError(null);\n    \n    try {\n      await api.placeOrder({\n        symbol,\n        side: orderSide,\n        type: orderType,\n        price: orderType === OrderType.LIMIT ? price : undefined,\n        size: quantity,\n        posSide: positionSide\n      });\n      \n      // Reset form after successful order\n      setQuantity('');\n      if (orderType === OrderType.LIMIT) {\n        setPrice('');\n      }\n      \n      // Refresh positions to show the new position\n      await refreshPositions();\n    } catch (err) {\n      console.error('Failed to place order:', err);\n      setOrderError(err instanceof Error ? err.message : 'Failed to place order');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Handle close position\n  const handleClosePosition = async () => {\n    if (!currentPosition) return;\n    \n    setIsSubmitting(true);\n    setOrderError(null);\n    \n    try {\n      // To close a position, place an order in the opposite direction with the same size\n      const closeSide = currentPosition.side === OrderSide.BUY ? OrderSide.SELL : OrderSide.BUY;\n      \n      await api.placeOrder({\n        symbol,\n        side: closeSide,\n        type: OrderType.MARKET,\n        size: currentPosition.qty,\n        posSide: currentPosition.posSide\n      });\n      \n      // Refresh positions to show the closed position\n      await refreshPositions();\n    } catch (err) {\n      console.error('Failed to close position:', err);\n      setOrderError(err instanceof Error ? err.message : 'Failed to close position');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n      {/* Trading Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Futures Trading</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Order Type */}\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Order Type</label>\n              <Select \n                value={orderType} \n                onChange={(e) => setOrderType(e.target.value as OrderType)}\n                className=\"w-full\"\n              >\n                <SelectOption value={OrderType.LIMIT}>Limit</SelectOption>\n                <SelectOption value={OrderType.MARKET}>Market</SelectOption>\n                <SelectOption value={OrderType.POST_ONLY}>Post Only</SelectOption>\n              </Select>\n            </div>\n            \n            {/* Order Side */}\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Side</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button\n                  type=\"button\"\n                  className={`w-full ${orderSide === OrderSide.BUY ? 'bg-green-600' : 'bg-neutral-200 text-neutral-800'}`}\n                  onClick={() => setOrderSide(OrderSide.BUY)}\n                >\n                  Buy/Long\n                </Button>\n                <Button\n                  type=\"button\"\n                  className={`w-full ${orderSide === OrderSide.SELL ? 'bg-red-600' : 'bg-neutral-200 text-neutral-800'}`}\n                  onClick={() => setOrderSide(OrderSide.SELL)}\n                >\n                  Sell/Short\n                </Button>\n              </div>\n            </div>\n            \n            {/* Position Side (only visible in Hedge mode) */}\n            {positionMode === 'HEDGE' && (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Position Side</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    type=\"button\"\n                    className={`w-full ${positionSide === PositionSide.LONG ? 'bg-blue-600' : 'bg-neutral-200 text-neutral-800'}`}\n                    onClick={() => setPositionSide(PositionSide.LONG)}\n                  >\n                    Long\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    className={`w-full ${positionSide === PositionSide.SHORT ? 'bg-blue-600' : 'bg-neutral-200 text-neutral-800'}`}\n                    onClick={() => setPositionSide(PositionSide.SHORT)}\n                  >\n                    Short\n                  </Button>\n                </div>\n              </div>\n            )}\n            \n            {/* Price (only for Limit orders) */}\n            {orderType !== OrderType.MARKET && (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Price</label>\n                <Input\n                  type=\"number\"\n                  value={price}\n                  onChange={(e) => setPrice(e.target.value)}\n                  placeholder=\"Enter price\"\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n              </div>\n            )}\n            \n            {/* Quantity */}\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Quantity</label>\n              <Input\n                type=\"number\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                placeholder=\"Enter quantity\"\n                min=\"0\"\n                step=\"0.001\"\n              />\n              <div className=\"flex justify-between mt-1\">\n                <button \n                  className=\"text-xs text-blue-600\"\n                  onClick={() => setQuantity((parseFloat(calculateMaxQuantity()) * 0.25).toFixed(8))}\n                >\n                  25%\n                </button>\n                <button \n                  className=\"text-xs text-blue-600\"\n                  onClick={() => setQuantity((parseFloat(calculateMaxQuantity()) * 0.5).toFixed(8))}\n                >\n                  50%\n                </button>\n                <button \n                  className=\"text-xs text-blue-600\"\n                  onClick={() => setQuantity((parseFloat(calculateMaxQuantity()) * 0.75).toFixed(8))}\n                >\n                  75%\n                </button>\n                <button \n                  className=\"text-xs text-blue-600\"\n                  onClick={() => setQuantity(calculateMaxQuantity())}\n                >\n                  Max\n                </button>\n              </div>\n            </div>\n            \n            {/* Leverage */}\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Leverage: {leverage}x</label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"75\"\n                value={leverage}\n                onChange={(e) => handleLeverageChange(e.target.value)}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs\">\n                <span>1x</span>\n                <span>25x</span>\n                <span>50x</span>\n                <span>75x</span>\n              </div>\n            </div>\n            \n            {/* Margin Mode */}\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Margin Mode</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button\n                  type=\"button\"\n                  className={`w-full ${marginMode === MarginMode.CROSS ? 'bg-blue-600' : 'bg-neutral-200 text-neutral-800'}`}\n                  onClick={() => setMarginMode(MarginMode.CROSS)}\n                >\n                  Cross\n                </Button>\n                <Button\n                  type=\"button\"\n                  className={`w-full ${marginMode === MarginMode.ISOLATED ? 'bg-blue-600' : 'bg-neutral-200 text-neutral-800'}`}\n                  onClick={() => setMarginMode(MarginMode.ISOLATED)}\n                >\n                  Isolated\n                </Button>\n              </div>\n            </div>\n            \n            {/* Reduce Only */}\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium\">Reduce Only</label>\n              <Switch\n                checked={isReduceOnly}\n                onCheckedChange={setIsReduceOnly}\n              />\n            </div>\n            \n            {/* Error message */}\n            {orderError && (\n              <div className=\"text-red-500 text-sm mt-2\">{orderError}</div>\n            )}\n            \n            {/* Submit Button */}\n            <Button\n              type=\"button\"\n              className={`w-full ${orderSide === OrderSide.BUY ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}`}\n              onClick={handleSubmitOrder}\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Submitting...' : `${orderSide === OrderSide.BUY ? 'Buy/Long' : 'Sell/Short'} ${symbol}`}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Position Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Position</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-4\">Loading position data...</div>\n          ) : error ? (\n            <div className=\"text-red-500 text-center py-4\">{error}</div>\n          ) : currentPosition ? (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Side</span>\n                  <p className={`font-medium ${currentPosition.side === OrderSide.BUY ? 'text-green-600' : 'text-red-600'}`}>\n                    {currentPosition.side === OrderSide.BUY ? 'Long' : 'Short'}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Size</span>\n                  <p className=\"font-medium\">{currentPosition.qty}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Entry Price</span>\n                  <p className=\"font-medium\">{currentPosition.openAvgPx}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Mark Price</span>\n                  <p className=\"font-medium\">{currentPosition.markPx}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Liquidation Price</span>\n                  <p className=\"font-medium\">{currentPosition.liqPx}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Margin Mode</span>\n                  <p className=\"font-medium\">{currentPosition.mgnMode}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Leverage</span>\n                  <p className=\"font-medium\">{currentPosition.lever}x</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Margin</span>\n                  <p className=\"font-medium\">{currentPosition.mgn}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">PnL</span>\n                  <p className={`font-medium ${parseFloat(currentPosition.pnl) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {currentPosition.pnl} ({parseFloat(currentPosition.uplRatio) * 100}%)\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">ADL</span>\n                  <p className=\"font-medium\">{currentPosition.adl}</p>\n                </div>\n              </div>\n              \n              <Button\n                type=\"button\"\n                className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n                onClick={handleClosePosition}\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? 'Closing...' : 'Close Position'}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">No open position for {symbol}</div>\n          )}\n          \n          {/* Account Balance Summary */}\n          {accountBalance && (\n            <div className=\"mt-6 pt-4 border-t border-neutral-200\">\n              <h3 className=\"font-medium mb-2\">Account Summary</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Equity</span>\n                  <p className=\"font-medium\">{accountBalance.eq}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Available</span>\n                  <p className=\"font-medium\">\n                    {(parseFloat(accountBalance.eq) - parseFloat(accountBalance.im)).toFixed(2)}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Initial Margin</span>\n                  <p className=\"font-medium\">{accountBalance.im}</p>\n                </div>\n                <div>\n                  <span className=\"text-sm text-neutral-500\">Maintenance Margin</span>\n                  <p className=\"font-medium\">{accountBalance.mm}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default FuturesTradingPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/LiveTradingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/LiveTradingPanel.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":22,"suggestions":[{"fix":{"range":[1225,1244],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useSettings } from '../../hooks/useSettings';\nimport { tradingEngine } from '@/trading/tradingEngine';\nimport { Card, CardHeader, CardBody, CardFooter, Button, Switch, Label, Alert } from '@/components/ui';\n\nconst LiveTradingPanel: React.FC = () => {\n  const { \n    isLiveTrading, \n    apiKey, \n    apiSecret, \n    // Removed unused variables\n    autoTradingEnabled,\n    updateSettings\n  } = useSettings();\n  \n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [status, setStatus] = useState('Idle');\n  const [balance, setBalance] = useState<number | null>(null);\n  \n  // Initialize trading engine\n  useEffect(() => {\n    const init = async () => {\n      try {\n        await tradingEngine.initialize();\n        setIsInitialized(true);\n        \n        // Get initial balance if in paper mode\n        if (!isLiveTrading) {\n          const paperEngine = tradingEngine.modeManager.getPaperEngine();\n          setBalance(paperEngine.getBalance());\n        }\n      } catch (err) {\n        setError('Failed to initialize trading engine');\n        console.error(err);\n      }\n    };\n    \n    init();\n    \n    return () => {\n      tradingEngine.stopTrading();\n    };\n  }, [isLiveTrading]);\n  \n  // Toggle trading mode\n  const toggleTradingMode = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const newMode = isLiveTrading ? 'paper' : 'live';\n      const result = await tradingEngine.switchMode(newMode);\n      \n      if (result.success) {\n        updateSettings({ isLiveTrading: !isLiveTrading });\n        setStatus(result.status);\n        \n        if (result.balance) {\n          setBalance(result.balance);\n        }\n      } else {\n        setError('Failed to switch trading mode');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Toggle auto trading\n  const toggleAutoTrading = async () => {\n    try {\n      if (autoTradingEnabled) {\n        await tradingEngine.stopTrading();\n      } else {\n        await tradingEngine.startTradingLoop();\n      }\n      \n      updateSettings({ autoTradingEnabled: !autoTradingEnabled });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to toggle auto trading');\n    }\n  };\n  \n  // Check if trading is possible\n  const canTrade = isInitialized && (isLiveTrading ? Boolean(apiKey && apiSecret) : true);\n  \n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <h3 className=\"text-lg font-medium\">Trading Controls</h3>\n      </CardHeader>\n      <CardBody>\n        {error && (\n          <Alert variant=\"error\" className=\"mb-4\">\n            {error}\n          </Alert>\n        )}\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"tradingMode\">Live Trading</Label>\n              <p className=\"text-xs text-neutral-500\">\n                {isLiveTrading \n                  ? 'Trading with real funds on Poloniex' \n                  : 'Paper trading with simulated funds'}\n              </p>\n            </div>\n            <Switch\n              id=\"tradingMode\"\n              checked={isLiveTrading}\n              onCheckedChange={toggleTradingMode}\n              disabled={isLoading || !isInitialized || (isLiveTrading && !apiKey)}\n            />\n          </div>\n          \n          {!isLiveTrading && balance !== null && (\n            <div>\n              <Label>Paper Trading Balance</Label>\n              <p className=\"text-lg font-medium\">${balance.toFixed(2)}</p>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"autoTrading\">Automated Trading</Label>\n              <p className=\"text-xs text-neutral-500\">\n                Automatically execute trades based on market analysis\n              </p>\n            </div>\n            <Switch\n              id=\"autoTrading\"\n              checked={autoTradingEnabled}\n              onCheckedChange={toggleAutoTrading}\n              disabled={!canTrade || isLoading}\n            />\n          </div>\n          \n          <div>\n            <Label>Current Status</Label>\n            <p className=\"text-sm\">{status}</p>\n            <p className=\"text-xs text-neutral-500 mt-1\">\n              {tradingEngine.getCurrentActivity()}\n            </p>\n          </div>\n        </div>\n      </CardBody>\n      <CardFooter className=\"flex justify-between\">\n        <Button \n          variant=\"outline\" \n          onClick={() => tradingEngine.stopTrading()}\n          disabled={!autoTradingEnabled || isLoading}\n        >\n          Stop Trading\n        </Button>\n        \n        <Button \n          onClick={() => tradingEngine.startTradingLoop()}\n          disabled={autoTradingEnabled || !canTrade || isLoading}\n        >\n          Start Trading\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default LiveTradingPanel;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/MLTradingPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1646,1649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1646,1649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1937,1940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1937,1940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":22,"suggestions":[{"fix":{"range":[2310,2329],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":20,"suggestions":[{"fix":{"range":[2880,2899],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":20,"suggestions":[{"fix":{"range":[3486,3505],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"fix":{"range":[4028,4047],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":18,"suggestions":[{"fix":{"range":[4532,4789],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":18,"suggestions":[{"fix":{"range":[4971,5230],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6688,6691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6688,6691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7569,7572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7569,7572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8414,8417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8414,8417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { default as mlTrading } from '@/ml/mlTrading';\nimport { usePoloniexData } from '@/hooks/usePoloniexData';\nimport { useSettings } from '../../hooks/useSettings';\n\ninterface MLModelConfig {\n  modelType: 'randomforest' | 'gradientboosting' | 'svm' | 'neuralnetwork';\n  featureSet: 'basic' | 'technical' | 'advanced' | 'custom';\n  predictionTarget: 'price_direction' | 'price_change' | 'volatility';\n  timeHorizon: number;\n  hyperParameters?: {\n    learningRate?: number;\n    maxDepth?: number;\n    numEstimators?: number;\n    epochs?: number;\n    batchSize?: number;\n  };\n}\n\ninterface MLModelInfo {\n  id: string;\n  name: string;\n  description: string;\n  config: MLModelConfig;\n  performance: {\n    accuracy: number;\n    precision: number;\n    recall: number;\n    f1Score: number;\n    trainingSamples: number;\n    validationSamples: number;\n  };\n  createdAt: number;\n  updatedAt: number;\n  lastTrainedAt: number;\n  status: 'training' | 'ready' | 'error';\n  filePath?: string;\n}\n\nconst MLTradingPanel: React.FC = () => {\n  const { marketData: poloniexMarketData, fetchMarketData } = usePoloniexData();\n  const { defaultPair, timeframe } = useSettings();\n  \n  const [modelConfig, setModelConfig] = useState<MLModelConfig>({\n    modelType: 'neuralnetwork',\n    featureSet: 'technical',\n    predictionTarget: 'price_direction',\n    timeHorizon: 12, // 12 candles ahead\n    hyperParameters: {\n      learningRate: 0.001,\n      epochs: 100,\n      batchSize: 32\n    }\n  });\n  \n  const [modelInfo, setModelInfo] = useState<MLModelInfo | null>(null);\n  const [predictions, setPredictions] = useState<any[]>([]);\n  const [isTraining, setIsTraining] = useState(false);\n  const [isPredicting, setIsPredicting] = useState(false);\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [marketData, setMarketData] = useState<any[]>([]);\n  const [modelName, setModelName] = useState('My ML Model');\n  \n  // Fetch market data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Get market data for training\n        await fetchMarketData(defaultPair);\n        setMarketData(poloniexMarketData);\n      } catch (err) {\n        setError('Failed to fetch market data');\n        console.error(err);\n      }\n    };\n    \n    fetchData();\n  }, [defaultPair, timeframe, fetchMarketData, poloniexMarketData]);\n  \n  // Train model\n  const handleTrainModel = async () => {\n    if (marketData.length === 0) {\n      setError('No market data available for training');\n      return;\n    }\n    \n    setIsTraining(true);\n    setError(null);\n    \n    try {\n      const info = await mlTrading.trainMLModel(marketData, modelConfig, modelName);\n      setModelInfo(info);\n      setIsTraining(false);\n    } catch (err) {\n      setError('Failed to train model');\n      console.error(err);\n      setIsTraining(false);\n    }\n  };\n  \n  // Make predictions\n  const handlePredict = async () => {\n    if (!modelInfo) {\n      setError('No trained model available');\n      return;\n    }\n    \n    if (marketData.length === 0) {\n      setError('No market data available for prediction');\n      return;\n    }\n    \n    setIsPredicting(true);\n    setError(null);\n    \n    try {\n      const preds = await mlTrading.predictWithMLModel(modelInfo, marketData);\n      setPredictions(preds);\n      setIsPredicting(false);\n    } catch (err) {\n      setError('Failed to make predictions');\n      console.error(err);\n      setIsPredicting(false);\n    }\n  };\n  \n  // Optimize model\n  const handleOptimizeModel = async () => {\n    if (marketData.length === 0) {\n      setError('No market data available for optimization');\n      return;\n    }\n    \n    setIsOptimizing(true);\n    setError(null);\n    \n    try {\n      const info = await mlTrading.optimizeMLModel(marketData, modelConfig, `${modelName} (Optimized)`);\n      setModelInfo(info);\n      setIsOptimizing(false);\n    } catch (err) {\n      setError('Failed to optimize model');\n      console.error(err);\n      setIsOptimizing(false);\n    }\n  };\n  \n  // Execute trades based on predictions\n  const handleExecuteTrades = () => {\n    if (predictions.length === 0) {\n      setError('No predictions available');\n      return;\n    }\n    \n    // Get the latest prediction\n    const latestPrediction = predictions[0];\n    \n    if (latestPrediction.prediction === 1 && latestPrediction.confidence > 0.6) {\n      // Execute buy strategy\n      // TODO: Implement executeStrategy functionality\n      console.log('ML Strategy - BUY signal:', {\n        type: 'ML_STRATEGY',\n        action: 'BUY',\n        symbol: defaultPair,\n        amount: 0.01, // Small fixed amount\n        confidence: latestPrediction.confidence,\n        modelId: modelInfo?.id\n      });\n    } else if (latestPrediction.prediction === 0 && latestPrediction.confidence > 0.6) {\n      // Execute sell strategy\n      // TODO: Implement executeStrategy functionality\n      console.log('ML Strategy - SELL signal:', {\n        type: 'ML_STRATEGY',\n        action: 'SELL',\n        symbol: defaultPair,\n        amount: 0.01, // Small fixed amount\n        confidence: latestPrediction.confidence,\n        modelId: modelInfo?.id\n      });\n    }\n  };\n  \n  return (\n    <div className=\"bg-white dark:bg-neutral-800 rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold mb-4 text-neutral-800 dark:text-white\">ML Trading</h2>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Model Configuration</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Model Name\n            </label>\n            <input\n              type=\"text\"\n              value={modelName}\n              onChange={(e) => setModelName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Model Type\n            </label>\n            <select\n              value={modelConfig.modelType}\n              onChange={(e) => setModelConfig({ ...modelConfig, modelType: e.target.value as any })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"randomforest\">Random Forest</option>\n              <option value=\"gradientboosting\">Gradient Boosting</option>\n              <option value=\"svm\">Support Vector Machine</option>\n              <option value=\"neuralnetwork\">Neural Network</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Feature Set\n            </label>\n            <select\n              value={modelConfig.featureSet}\n              onChange={(e) => setModelConfig({ ...modelConfig, featureSet: e.target.value as any })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"basic\">Basic</option>\n              <option value=\"technical\">Technical</option>\n              <option value=\"advanced\">Advanced</option>\n              <option value=\"custom\">Custom</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Prediction Target\n            </label>\n            <select\n              value={modelConfig.predictionTarget}\n              onChange={(e) => setModelConfig({ ...modelConfig, predictionTarget: e.target.value as any })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            >\n              <option value=\"price_direction\">Price Direction</option>\n              <option value=\"price_change\">Price Change</option>\n              <option value=\"volatility\">Volatility</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Time Horizon (candles)\n            </label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"100\"\n              value={modelConfig.timeHorizon}\n              onChange={(e) => setModelConfig({ ...modelConfig, timeHorizon: parseInt(e.target.value) })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Learning Rate\n            </label>\n            <input\n              type=\"number\"\n              min=\"0.0001\"\n              max=\"0.1\"\n              step=\"0.0001\"\n              value={modelConfig.hyperParameters?.learningRate || 0.001}\n              onChange={(e) => setModelConfig({ \n                ...modelConfig, \n                hyperParameters: { \n                  ...modelConfig.hyperParameters, \n                  learningRate: parseFloat(e.target.value) \n                } \n              })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1\">\n              Epochs\n            </label>\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"1000\"\n              step=\"10\"\n              value={modelConfig.hyperParameters?.epochs || 100}\n              onChange={(e) => setModelConfig({ \n                ...modelConfig, \n                hyperParameters: { \n                  ...modelConfig.hyperParameters, \n                  epochs: parseInt(e.target.value) \n                } \n              })}\n              className=\"w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex flex-wrap gap-4 mb-6\">\n        <button\n          onClick={handleTrainModel}\n          disabled={isTraining || marketData.length === 0}\n          className={`px-4 py-2 rounded-md text-white ${\n            isTraining ? 'bg-neutral-400' : 'bg-blue-600 hover:bg-blue-700'\n          }`}\n        >\n          {isTraining ? 'Training...' : 'Train Model'}\n        </button>\n        \n        <button\n          onClick={handleOptimizeModel}\n          disabled={isOptimizing || marketData.length === 0}\n          className={`px-4 py-2 rounded-md text-white ${\n            isOptimizing ? 'bg-neutral-400' : 'bg-green-600 hover:bg-green-700'\n          }`}\n        >\n          {isOptimizing ? 'Optimizing...' : 'Optimize Model'}\n        </button>\n        \n        <button\n          onClick={handlePredict}\n          disabled={isPredicting || !modelInfo}\n          className={`px-4 py-2 rounded-md text-white ${\n            isPredicting || !modelInfo ? 'bg-neutral-400' : 'bg-purple-600 hover:bg-purple-700'\n          }`}\n        >\n          {isPredicting ? 'Predicting...' : 'Make Predictions'}\n        </button>\n        \n        <button\n          onClick={handleExecuteTrades}\n          disabled={predictions.length === 0}\n          className={`px-4 py-2 rounded-md text-white ${\n            predictions.length === 0 ? 'bg-neutral-400' : 'bg-red-600 hover:bg-red-700'\n          }`}\n        >\n          Execute Trades\n        </button>\n      </div>\n      \n      {modelInfo && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Model Information</h3>\n          \n          <div className=\"bg-neutral-100 dark:bg-neutral-700 p-4 rounded-md\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Name</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.name}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Type</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.config.modelType}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Accuracy</p>\n                <p className=\"text-neutral-800 dark:text-white\">{(modelInfo.performance.accuracy * 100).toFixed(2)}%</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">F1 Score</p>\n                <p className=\"text-neutral-800 dark:text-white\">{(modelInfo.performance.f1Score * 100).toFixed(2)}%</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Training Samples</p>\n                <p className=\"text-neutral-800 dark:text-white\">{modelInfo.performance.trainingSamples}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-neutral-500 dark:text-neutral-400\">Last Trained</p>\n                <p className=\"text-neutral-800 dark:text-white\">\n                  {new Date(modelInfo.lastTrainedAt).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {predictions.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-medium mb-2 text-neutral-700 dark:text-neutral-300\">Latest Predictions</h3>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-neutral-200 dark:divide-neutral-700\">\n              <thead className=\"bg-neutral-50 dark:bg-neutral-800\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Time\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Symbol\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Prediction\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider\">\n                    Confidence\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700\">\n                {predictions.slice(0, 10).map((pred, index) => (\n                  <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {new Date(pred.timestamp).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {pred.symbol}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                          pred.prediction === 1\n                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                            : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                        }`}\n                      >\n                        {pred.prediction === 1 ? 'UP' : 'DOWN'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400\">\n                      {(pred.confidence * 100).toFixed(2)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { MLTradingPanel };","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/MockTradingDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/StrategyBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2803,2806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2803,2806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":22,"suggestions":[{"fix":{"range":[3285,3340],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":22,"suggestions":[{"fix":{"range":[3935,3984],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":20,"suggestions":[{"fix":{"range":[4395,4414],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":20,"suggestions":[{"fix":{"range":[4866,4885],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useSettings } from '../../hooks/useSettings';\nimport { Strategy, MarketData } from '@/types';\nimport { executeStrategy } from '@/utils/strategyExecutors';\nimport { poloniexApi } from '@/services/poloniexAPI';\nimport { Card } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Select, SelectOption } from '@/components/ui/Select';\nimport { Input } from '@/components/ui/Input';\nimport { Label } from '@/components/ui/Label';\nimport { getExtensionData, setExtensionData, isChromeExtension } from '@/utils/chromeExtension';\n\n// Strategy types\nexport type StrategyType = 'MovingAverageCrossover' | 'RSI' | 'MACD' | 'BollingerBands' | 'Custom';\n\n// Strategy parameters interfaces\ninterface BaseParameters {\n  pair: string;\n  timeframe: string;\n}\n\ninterface MovingAverageCrossoverParameters extends BaseParameters {\n  fastPeriod: number;\n  slowPeriod: number;\n}\n\ninterface RSIParameters extends BaseParameters {\n  period: number;\n  overbought: number;\n  oversold: number;\n}\n\ninterface MACDParameters extends BaseParameters {\n  fastPeriod: number;\n  slowPeriod: number;\n  signalPeriod: number;\n}\n\ninterface BollingerBandsParameters extends BaseParameters {\n  period: number;\n  stdDev: number;\n}\n\ninterface CustomParameters extends BaseParameters {\n  // Add any custom parameters here\n  lookbackPeriod: number;\n  breakoutThreshold: number;\n}\n\n// Union type for all parameter types\nexport type StrategyParameters = \n  | MovingAverageCrossoverParameters \n  | RSIParameters \n  | MACDParameters \n  | BollingerBandsParameters\n  | CustomParameters;\n\n// Test result interface\ninterface TestResult {\n  signal: 'BUY' | 'SELL' | null;\n  reason: string;\n  confidence: number;\n}\n\nconst StrategyBuilder: React.FC = () => {\n  const { defaultPair, timeframe } = useSettings();\n  \n  const [strategies, setStrategies] = useState<Strategy[]>([]);\n  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);\n  const [newStrategy, setNewStrategy] = useState<Partial<Strategy>>({\n    id: '',\n    name: '',\n    type: 'MovingAverageCrossover',\n    parameters: {\n      pair: defaultPair,\n      timeframe: timeframe,\n      fastPeriod: 9,\n      slowPeriod: 21\n    } as StrategyParameters\n  });\n  const [marketData, setMarketData] = useState<MarketData[]>([]);\n  const [testResult, setTestResult] = useState<TestResult | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Load saved strategies from storage\n  useEffect(() => {\n    const loadStrategies = async () => {\n      try {\n        if (isChromeExtension()) {\n          // Load from Chrome storage if in extension\n          getExtensionData('trading_strategies')\n            .then((data: any) => {\n              if (data) {\n                setStrategies(data);\n              }\n            })\n            .catch(err => console.error('Failed to load strategies from extension:', err));\n        } else {\n          // Load from localStorage if in browser\n          const savedStrategies = localStorage.getItem('trading_strategies');\n          if (savedStrategies) {\n            setStrategies(JSON.parse(savedStrategies));\n          }\n        }\n      } catch (err) {\n        console.error('Failed to load saved strategies:', err);\n      }\n    };\n    \n    loadStrategies();\n  }, []);\n  \n  // Save strategies to storage when they change\n  useEffect(() => {\n    if (strategies.length > 0) {\n      try {\n        if (isChromeExtension()) {\n          // Save to Chrome storage if in extension\n          setExtensionData('trading_strategies', strategies)\n            .catch(err => console.error('Failed to save strategies to extension:', err));\n        } else {\n          // Save to localStorage if in browser\n          localStorage.setItem('trading_strategies', JSON.stringify(strategies));\n        }\n      } catch (err) {\n        console.error('Failed to save strategies:', err);\n      }\n    }\n  }, [strategies]);\n  \n  // Load market data for testing\n  const loadMarketData = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const pair = (newStrategy.parameters as BaseParameters)?.pair || defaultPair;\n      const data = await poloniexApi.getMarketData(pair);\n      setMarketData(data);\n    } catch (err) {\n      setError('Failed to load market data');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Test strategy with current market data\n  const testStrategy = () => {\n    if (!newStrategy.type || !marketData.length) {\n      setError('Strategy or market data not available');\n      return;\n    }\n    \n    try {\n      const result = executeStrategy(newStrategy as Strategy, marketData);\n      setTestResult(result);\n    } catch (err) {\n      setError('Failed to execute strategy');\n      console.error(err);\n    }\n  };\n  \n  // Save new strategy\n  const saveStrategy = () => {\n    if (!newStrategy.id || !newStrategy.name || !newStrategy.type) {\n      setError('Strategy ID, name, and type are required');\n      return;\n    }\n    \n    // Check if ID already exists\n    if (strategies.some(s => s.id === newStrategy.id)) {\n      setError('Strategy ID already exists');\n      return;\n    }\n    \n    const strategy = {\n      ...newStrategy,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    } as Strategy;\n    \n    setStrategies([...strategies, strategy]);\n    resetNewStrategy();\n    setError(null);\n  };\n  \n  // Delete strategy\n  const deleteStrategy = (id: string) => {\n    setStrategies(strategies.filter(s => s.id !== id));\n  };\n  \n  // Select strategy for editing\n  const selectStrategy = (strategy: Strategy) => {\n    setSelectedStrategy(strategy);\n    setNewStrategy(strategy);\n  };\n  \n  // Reset new strategy form\n  const resetNewStrategy = () => {\n    setNewStrategy({\n      id: '',\n      name: '',\n      type: 'MovingAverageCrossover',\n      parameters: {\n        pair: defaultPair,\n        timeframe: timeframe,\n        fastPeriod: 9,\n        slowPeriod: 21\n      } as StrategyParameters\n    });\n    setSelectedStrategy(null);\n  };\n  \n  // Update strategy parameters based on type\n  const updateStrategyType = (type: StrategyType) => {\n    let parameters: StrategyParameters;\n    \n    switch (type) {\n      case 'MovingAverageCrossover':\n        parameters = { \n          pair: defaultPair, \n          timeframe, \n          fastPeriod: 9, \n          slowPeriod: 21 \n        } as MovingAverageCrossoverParameters;\n        break;\n      case 'RSI':\n        parameters = { \n          pair: defaultPair, \n          timeframe, \n          period: 14, \n          overbought: 70, \n          oversold: 30 \n        } as RSIParameters;\n        break;\n      case 'MACD':\n        parameters = { \n          pair: defaultPair, \n          timeframe, \n          fastPeriod: 12, \n          slowPeriod: 26, \n          signalPeriod: 9 \n        } as MACDParameters;\n        break;\n      case 'BollingerBands':\n        parameters = { \n          pair: defaultPair, \n          timeframe, \n          period: 20, \n          stdDev: 2 \n        } as BollingerBandsParameters;\n        break;\n      default:\n        parameters = { \n          pair: defaultPair, \n          timeframe,\n          lookbackPeriod: 20,\n          breakoutThreshold: 2\n        } as CustomParameters;\n    }\n    \n    setNewStrategy({\n      ...newStrategy,\n      type,\n      parameters\n    });\n  };\n  \n  // Render parameter inputs based on strategy type\n  const renderParameterInputs = () => {\n    const type = newStrategy.type as StrategyType;\n    const parameters = newStrategy.parameters || {};\n    \n    switch (type) {\n      case 'MovingAverageCrossover': {\n        const params = parameters as MovingAverageCrossoverParameters;\n        return (\n          <>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"fastPeriod\">Fast Period</Label>\n              <Input\n                id=\"fastPeriod\"\n                type=\"number\"\n                value={params.fastPeriod || 9}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    fastPeriod: parseInt(e.target.value) \n                  } as MovingAverageCrossoverParameters\n                })}\n                min=\"2\"\n                max=\"50\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"slowPeriod\">Slow Period</Label>\n              <Input\n                id=\"slowPeriod\"\n                type=\"number\"\n                value={params.slowPeriod || 21}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    slowPeriod: parseInt(e.target.value) \n                  } as MovingAverageCrossoverParameters\n                })}\n                min=\"5\"\n                max=\"200\"\n              />\n            </div>\n          </>\n        );\n      }\n        \n      case 'RSI': {\n        const params = parameters as RSIParameters;\n        return (\n          <>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"period\">RSI Period</Label>\n              <Input\n                id=\"period\"\n                type=\"number\"\n                value={params.period || 14}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    period: parseInt(e.target.value) \n                  } as RSIParameters\n                })}\n                min=\"2\"\n                max=\"50\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"overbought\">Overbought Level</Label>\n              <Input\n                id=\"overbought\"\n                type=\"number\"\n                value={params.overbought || 70}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    overbought: parseInt(e.target.value) \n                  } as RSIParameters\n                })}\n                min=\"50\"\n                max=\"90\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"oversold\">Oversold Level</Label>\n              <Input\n                id=\"oversold\"\n                type=\"number\"\n                value={params.oversold || 30}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    oversold: parseInt(e.target.value) \n                  } as RSIParameters\n                })}\n                min=\"10\"\n                max=\"50\"\n              />\n            </div>\n          </>\n        );\n      }\n        \n      case 'MACD': {\n        const params = parameters as MACDParameters;\n        return (\n          <>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"fastPeriod\">Fast Period</Label>\n              <Input\n                id=\"fastPeriod\"\n                type=\"number\"\n                value={params.fastPeriod || 12}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    fastPeriod: parseInt(e.target.value) \n                  } as MACDParameters\n                })}\n                min=\"2\"\n                max=\"50\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"slowPeriod\">Slow Period</Label>\n              <Input\n                id=\"slowPeriod\"\n                type=\"number\"\n                value={params.slowPeriod || 26}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    slowPeriod: parseInt(e.target.value) \n                  } as MACDParameters\n                })}\n                min=\"5\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"signalPeriod\">Signal Period</Label>\n              <Input\n                id=\"signalPeriod\"\n                type=\"number\"\n                value={params.signalPeriod || 9}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    signalPeriod: parseInt(e.target.value) \n                  } as MACDParameters\n                })}\n                min=\"2\"\n                max=\"50\"\n              />\n            </div>\n          </>\n        );\n      }\n        \n      case 'BollingerBands': {\n        const params = parameters as BollingerBandsParameters;\n        return (\n          <>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"period\">Period</Label>\n              <Input\n                id=\"period\"\n                type=\"number\"\n                value={params.period || 20}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    period: parseInt(e.target.value) \n                  } as BollingerBandsParameters\n                })}\n                min=\"5\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"stdDev\">Standard Deviations</Label>\n              <Input\n                id=\"stdDev\"\n                type=\"number\"\n                value={params.stdDev || 2}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    stdDev: parseFloat(e.target.value) \n                  } as BollingerBandsParameters\n                })}\n                min=\"0.5\"\n                max=\"4\"\n                step=\"0.1\"\n              />\n            </div>\n          </>\n        );\n      }\n      \n      case 'Custom': {\n        const params = parameters as CustomParameters;\n        return (\n          <>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"lookbackPeriod\">Lookback Period</Label>\n              <Input\n                id=\"lookbackPeriod\"\n                type=\"number\"\n                value={params.lookbackPeriod || 20}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    lookbackPeriod: parseInt(e.target.value) \n                  } as CustomParameters\n                })}\n                min=\"5\"\n                max=\"100\"\n              />\n            </div>\n            <div className=\"mb-4\">\n              <Label htmlFor=\"breakoutThreshold\">Breakout Threshold</Label>\n              <Input\n                id=\"breakoutThreshold\"\n                type=\"number\"\n                value={params.breakoutThreshold || 2}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...parameters, \n                    breakoutThreshold: parseFloat(e.target.value) \n                  } as CustomParameters\n                })}\n                min=\"0.5\"\n                max=\"5\"\n                step=\"0.1\"\n              />\n            </div>\n          </>\n        );\n      }\n        \n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <Card className=\"w-full\">\n        <div className=\"p-4 border-b\">\n          <h3 className=\"text-lg font-medium\">Strategy Builder</h3>\n        </div>\n        <div className=\"p-4\">\n          {error && (\n            <div className=\"p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg\">\n              {error}\n            </div>\n          )}\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"strategyId\">Strategy ID</Label>\n              <Input\n                id=\"strategyId\"\n                value={newStrategy.id || ''}\n                onChange={(e) => setNewStrategy({ ...newStrategy, id: e.target.value })}\n                placeholder=\"unique-strategy-id\"\n                disabled={!!selectedStrategy}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"strategyName\">Strategy Name</Label>\n              <Input\n                id=\"strategyName\"\n                value={newStrategy.name || ''}\n                onChange={(e) => setNewStrategy({ ...newStrategy, name: e.target.value })}\n                placeholder=\"My Trading Strategy\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"strategyType\">Strategy Type</Label>\n              <Select\n                id=\"strategyType\"\n                value={newStrategy.type || 'MovingAverageCrossover'}\n                onChange={(e) => updateStrategyType(e.target.value as StrategyType)}\n              >\n                <SelectOption value=\"MovingAverageCrossover\">Moving Average Crossover</SelectOption>\n                <SelectOption value=\"RSI\">Relative Strength Index (RSI)</SelectOption>\n                <SelectOption value=\"MACD\">MACD</SelectOption>\n                <SelectOption value=\"BollingerBands\">Bollinger Bands</SelectOption>\n                <SelectOption value=\"Custom\">Custom</SelectOption>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"pair\">Trading Pair</Label>\n              <Input\n                id=\"pair\"\n                value={(newStrategy.parameters as BaseParameters)?.pair || defaultPair}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...newStrategy.parameters, \n                    pair: e.target.value \n                  } as StrategyParameters\n                })}\n                placeholder=\"BTC-USDT\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"timeframe\">Timeframe</Label>\n              <Select\n                id=\"timeframe\"\n                value={(newStrategy.parameters as BaseParameters)?.timeframe || timeframe}\n                onChange={(e) => setNewStrategy({\n                  ...newStrategy,\n                  parameters: { \n                    ...newStrategy.parameters, \n                    timeframe: e.target.value \n                  } as StrategyParameters\n                })}\n              >\n                <SelectOption value=\"1m\">1 Minute</SelectOption>\n                <SelectOption value=\"5m\">5 Minutes</SelectOption>\n                <SelectOption value=\"15m\">15 Minutes</SelectOption>\n                <SelectOption value=\"1h\">1 Hour</SelectOption>\n                <SelectOption value=\"4h\">4 Hours</SelectOption>\n                <SelectOption value=\"1d\">1 Day</SelectOption>\n              </Select>\n            </div>\n            \n            {renderParameterInputs()}\n            \n            <div className=\"flex space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                onClick={resetNewStrategy}\n                variant=\"outline\"\n              >\n                Reset\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={saveStrategy}\n                disabled={!newStrategy.id || !newStrategy.name}\n              >\n                {selectedStrategy ? 'Update Strategy' : 'Save Strategy'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Card>\n      \n      <Card className=\"w-full\">\n        <div className=\"p-4 border-b\">\n          <h3 className=\"text-lg font-medium\">Test & Manage Strategies</h3>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"mb-6\">\n            <h4 className=\"font-medium mb-2\">Test Current Strategy</h4>\n            <div className=\"flex space-x-2 mb-4\">\n              <Button\n                type=\"button\"\n                onClick={loadMarketData}\n                disabled={isLoading}\n                variant=\"outline\"\n              >\n                {isLoading ? 'Loading...' : 'Load Market Data'}\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={testStrategy}\n                disabled={!marketData.length || isLoading}\n              >\n                Test Strategy\n              </Button>\n            </div>\n            \n            {testResult && (\n              <div className={`p-4 rounded-lg ${\n                testResult.signal === 'BUY' \n                  ? 'bg-green-100 text-green-800' \n                  : testResult.signal === 'SELL' \n                    ? 'bg-red-100 text-red-800' \n                    : 'bg-neutral-100 text-neutral-800'\n              }`}>\n                <div className=\"font-medium\">\n                  Signal: {testResult.signal || 'NEUTRAL'}\n                </div>\n                <div className=\"text-sm mt-1\">\n                  {testResult.reason}\n                </div>\n                <div className=\"text-sm mt-2\">\n                  Confidence: {testResult.confidence}%\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium mb-2\">Saved Strategies</h4>\n            <div className=\"space-y-2\">\n              {strategies.map(strategy => (\n                <div \n                  key={strategy.id}\n                  className={`p-3 border rounded-md cursor-pointer ${\n                    selectedStrategy?.id === strategy.id ? 'border-blue-500 bg-blue-50' : 'border-neutral-200'\n                  }`}\n                  onClick={() => selectStrategy(strategy)}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <div className=\"font-medium\">{strategy.name}</div>\n                      <div className=\"text-xs text-neutral-500\">{strategy.type}</div>\n                    </div>\n                    <button\n                      className=\"text-red-500 hover:text-red-700\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        deleteStrategy(strategy.id);\n                      }}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              ))}\n              \n              {strategies.length === 0 && (\n                <div className=\"text-center py-4 text-neutral-500\">\n                  No saved strategies yet\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default StrategyBuilder;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/trading/StrategyTester.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1946,1949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1946,1949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":20,"suggestions":[{"fix":{"range":[3105,3145],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3742,3745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3742,3745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":20,"suggestions":[{"fix":{"range":[3954,3998],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":20,"suggestions":[{"fix":{"range":[4613,4667],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":20,"suggestions":[{"fix":{"range":[5512,5565],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'losingTrades' is assigned a value but never used.","line":290,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":290,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'medianCase' is assigned a value but never used.","line":615,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":615,"endColumn":65}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Strategy, MarketData } from '@/types';\nimport { \n  backtestStrategy, \n  optimizeStrategy, \n  monteCarloSimulation, \n  walkForwardAnalysis,\n  BacktestResult,\n  StrategyTestOptions,\n  StrategyOptimizationResult\n} from '@/utils/strategyTester';\nimport { Line } from 'react-chartjs-2';\nimport { \n  Chart as ChartJS, \n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  Filler\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface StrategyTesterProps {\n  strategy: Strategy;\n  marketData: MarketData[];\n  initialOptions?: Partial<StrategyTestOptions>;\n  parameterRanges?: Record<string, [number, number, number]>;\n  onResultsChange?: (results: BacktestResult) => void;\n}\n\nconst StrategyTester: React.FC<StrategyTesterProps> = ({\n  strategy,\n  marketData,\n  initialOptions = {},\n  parameterRanges = {},\n  onResultsChange\n}) => {\n  // State for test options\n  const [testOptions, setTestOptions] = useState<StrategyTestOptions>({\n    initialBalance: 10000,\n    feePercent: 0.1,\n    slippagePercent: 0.05,\n    positionSizePercent: 10,\n    useStopLoss: false,\n    stopLossPercent: 5,\n    useTakeProfit: false,\n    takeProfitPercent: 10,\n    useTrailingStop: false,\n    trailingStopPercent: 2,\n    confidenceThreshold: 0.5,\n    allowSimultaneousPositions: false,\n    maxOpenPositions: 1,\n    reinvestProfits: true,\n    ...initialOptions\n  });\n\n  // State for test results\n  const [backtestResult, setBacktestResult] = useState<BacktestResult | null>(null);\n  const [optimizationResult, setOptimizationResult] = useState<StrategyOptimizationResult | null>(null);\n  const [monteCarloResult, setMonteCarloResult] = useState<any | null>(null);\n  const [walkForwardResult, setWalkForwardResult] = useState<any | null>(null);\n  \n  // State for active tab\n  const [activeTab, setActiveTab] = useState<'backtest' | 'optimize' | 'monteCarlo' | 'walkForward'>('backtest');\n  \n  // State for loading indicators\n  const [isLoading, setIsLoading] = useState<Record<string, boolean>>({\n    backtest: false,\n    optimize: false,\n    monteCarlo: false,\n    walkForward: false\n  });\n\n  // Run backtest when options change\n  useEffect(() => {\n    runBacktest();\n  }, [runBacktest]);\n\n  // Notify parent component when results change\n  useEffect(() => {\n    if (backtestResult && onResultsChange) {\n      onResultsChange(backtestResult);\n    }\n  }, [backtestResult, onResultsChange]);\n\n  // Run backtest\n  const runBacktest = useCallback(async () => {\n    if (!marketData.length) return;\n    \n    setIsLoading(prev => ({ ...prev, backtest: true }));\n    \n    try {\n      // Use setTimeout to allow UI to update before running the backtest\n      setTimeout(() => {\n        const result = backtestStrategy(strategy, marketData, testOptions);\n        setBacktestResult(result);\n        setIsLoading(prev => ({ ...prev, backtest: false }));\n      }, 50);\n    } catch (error) {\n      console.error('Backtest error:', error);\n      setIsLoading(prev => ({ ...prev, backtest: false }));\n    }\n  }, [strategy, marketData, testOptions]);\n\n  // Run optimization\n  const runOptimization = async (metric: string = 'netProfit') => {\n    if (!marketData.length || Object.keys(parameterRanges).length === 0) return;\n    \n    setIsLoading(prev => ({ ...prev, optimize: true }));\n    \n    try {\n      // Use setTimeout to allow UI to update before running the optimization\n      setTimeout(() => {\n        const result = optimizeStrategy(\n          strategy.type,\n          marketData,\n          parameterRanges,\n          metric as any,\n          strategy.parameters,\n          testOptions\n        );\n        setOptimizationResult(result);\n        setIsLoading(prev => ({ ...prev, optimize: false }));\n      }, 50);\n    } catch (error) {\n      console.error('Optimization error:', error);\n      setIsLoading(prev => ({ ...prev, optimize: false }));\n    }\n  };\n\n  // Run Monte Carlo simulation\n  const runMonteCarloSimulation = async (numSimulations: number = 1000) => {\n    if (!backtestResult) return;\n    \n    setIsLoading(prev => ({ ...prev, monteCarlo: true }));\n    \n    try {\n      // Use setTimeout to allow UI to update before running the simulation\n      setTimeout(() => {\n        const result = monteCarloSimulation(backtestResult, numSimulations);\n        setMonteCarloResult(result);\n        setIsLoading(prev => ({ ...prev, monteCarlo: false }));\n      }, 50);\n    } catch (error) {\n      console.error('Monte Carlo simulation error:', error);\n      setIsLoading(prev => ({ ...prev, monteCarlo: false }));\n    }\n  };\n\n  // Run walk-forward analysis\n  const runWalkForwardAnalysis = async (\n    inSamplePercent: number = 70,\n    numFolds: number = 5\n  ) => {\n    if (!marketData.length) return;\n    \n    setIsLoading(prev => ({ ...prev, walkForward: true }));\n    \n    try {\n      // Use setTimeout to allow UI to update before running the analysis\n      setTimeout(() => {\n        const result = walkForwardAnalysis(\n          strategy,\n          marketData,\n          {\n            inSamplePercent,\n            numFolds,\n            optimizationMetric: 'netProfit',\n            parameterRanges,\n            testOptions\n          }\n        );\n        setWalkForwardResult(result);\n        setIsLoading(prev => ({ ...prev, walkForward: false }));\n      }, 50);\n    } catch (error) {\n      console.error('Walk-forward analysis error:', error);\n      setIsLoading(prev => ({ ...prev, walkForward: false }));\n    }\n  };\n\n  // Prepare equity curve chart data\n  const prepareEquityCurveData = () => {\n    if (!backtestResult) return null;\n    \n    const labels = backtestResult.equityCurve.map(point => \n      new Date(point.date).toLocaleDateString()\n    );\n    \n    const equityData = backtestResult.equityCurve.map(point => point.equity);\n    const drawdownData = backtestResult.equityCurve.map(point => point.drawdownPercent);\n    \n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Equity',\n          data: equityData,\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.1)',\n          tension: 0.1,\n          fill: false\n        },\n        {\n          label: 'Drawdown %',\n          data: drawdownData,\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.1)',\n          tension: 0.1,\n          fill: false,\n          yAxisID: 'y1'\n        }\n      ]\n    };\n  };\n\n  // Prepare optimization heatmap data\n  // const prepareHeatmapData = () => {\n  //   if (!optimizationResult) return null;\n  //   \n  //   // Implementation depends on the charting library used\n  //   // This is a placeholder for the heatmap data preparation\n  //   return optimizationResult.parameterHeatmap;\n  // };\n\n  // Prepare Monte Carlo simulation chart data\n  const prepareMonteCarloData = () => {\n    if (!monteCarloResult) return null;\n    \n    const equityDistribution = monteCarloResult.distributions.finalBalance;\n    const sortedEquity = [...equityDistribution].sort((a, b) => a - b);\n    \n    // Create histogram data\n    const min = Math.floor(sortedEquity[0]);\n    const max = Math.ceil(sortedEquity[sortedEquity.length - 1]);\n    const binSize = Math.ceil((max - min) / 20); // 20 bins\n    \n    const bins: number[] = [];\n    const counts: number[] = [];\n    \n    for (let i = min; i <= max; i += binSize) {\n      bins.push(i);\n      counts.push(0);\n    }\n    \n    for (const value of equityDistribution) {\n      const binIndex = Math.floor((value - min) / binSize);\n      if (binIndex >= 0 && binIndex < counts.length) {\n        counts[binIndex]++;\n      }\n    }\n    \n    return {\n      labels: bins.map(bin => bin.toFixed(0)),\n      datasets: [\n        {\n          label: 'Final Equity Distribution',\n          data: counts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgb(75, 192, 192)',\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Render backtest results\n  const renderBacktestResults = () => {\n    if (!backtestResult) return null;\n    \n    const {\n      initialBalance,\n      finalBalance,\n      totalTrades,\n      winningTrades,\n      losingTrades,\n      winRate,\n      profitFactor,\n      maxDrawdown,\n      maxDrawdownPercent,\n      sharpeRatio,\n      metrics\n    } = backtestResult;\n    \n    const equityCurveData = prepareEquityCurveData();\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-sm font-medium text-neutral-500\">Profit/Loss</h3>\n            <p className={`text-2xl font-bold ${finalBalance > initialBalance ? 'text-green-600' : 'text-red-600'}`}>\n              ${(finalBalance - initialBalance).toFixed(2)}\n            </p>\n            <p className=\"text-sm text-neutral-500\">\n              {((finalBalance - initialBalance) / initialBalance * 100).toFixed(2)}%\n            </p>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-sm font-medium text-neutral-500\">Win Rate</h3>\n            <p className=\"text-2xl font-bold\">{winRate.toFixed(2)}%</p>\n            <p className=\"text-sm text-neutral-500\">\n              {winningTrades} / {totalTrades} trades\n            </p>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-sm font-medium text-neutral-500\">Profit Factor</h3>\n            <p className=\"text-2xl font-bold\">{profitFactor.toFixed(2)}</p>\n            <p className=\"text-sm text-neutral-500\">\n              Wins / Losses ratio\n            </p>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-sm font-medium text-neutral-500\">Max Drawdown</h3>\n            <p className=\"text-2xl font-bold text-red-600\">{maxDrawdownPercent.toFixed(2)}%</p>\n            <p className=\"text-sm text-neutral-500\">\n              ${maxDrawdown.toFixed(2)}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Equity Curve</h3>\n          {equityCurveData && (\n            <div className=\"h-64\">\n              <Line \n                data={equityCurveData} \n                options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    x: {\n                      ticks: {\n                        maxTicksLimit: 10\n                      }\n                    },\n                    y: {\n                      beginAtZero: false\n                    },\n                    y1: {\n                      position: 'right',\n                      beginAtZero: true,\n                      max: 100,\n                      reverse: true,\n                      grid: {\n                        drawOnChartArea: false\n                      }\n                    }\n                  }\n                }}\n              />\n            </div>\n          )}\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-4\">Performance Metrics</h3>\n            <table className=\"w-full\">\n              <tbody>\n                <tr>\n                  <td className=\"py-1 text-neutral-600\">Sharpe Ratio</td>\n                  <td className=\"py-1 text-right font-medium\">{sharpeRatio.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-1 text-neutral-600\">Annualized Return</td>\n                  <td className=\"py-1 text-right font-medium\">{(metrics.annualizedReturn * 100).toFixed(2)}%</td>\n                </tr>\n                <tr>\n                  <td className=\"py-1 text-neutral-600\">Average Trade</td>\n                  <td className=\"py-1 text-right font-medium\">${metrics.averageTrade.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-1 text-neutral-600\">Average Win</td>\n                  <td className=\"py-1 text-right font-medium\">${metrics.averageProfit.toFixed(2)}</td>\n                </tr>\n                <tr>\n                  <td className=\"py-1 text-neutral-600\">Average Loss</td>\n                  <td className=\"py-1 text-right font-medium\">${metrics.averageLoss.toFixed(2)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-4\">Strategy Parameters</h3>\n            <table className=\"w-full\">\n              <tbody>\n                {Object.entries(strategy.parameters).map(([key, value]) => (\n                  <tr key={key}>\n                    <td className=\"py-1 text-neutral-600\">{key}</td>\n                    <td className=\"py-1 text-right font-medium\">{value}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Recent Trades</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-neutral-200\">\n              <thead className=\"bg-neutral-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Date</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Type</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Entry Price</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Exit Price</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Profit</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Reason</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-neutral-200\">\n                {backtestResult.trades.slice(-10).reverse().map((trade, index) => (\n                  <tr key={index}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500\">\n                      {new Date(trade.entryDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                        trade.type === 'BUY' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {trade.type}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500\">\n                      ${trade.entryPrice.toFixed(2)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500\">\n                      ${trade.exitPrice ? trade.exitPrice.toFixed(2) : '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      <span className={trade.profit > 0 ? 'text-green-600' : 'text-red-600'}>\n                        ${trade.profit.toFixed(2)} ({trade.profitPercent.toFixed(2)}%)\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-neutral-500\">\n                      {trade.reason}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render optimization results\n  const renderOptimizationResults = () => {\n    if (!optimizationResult) {\n      return (\n        <div className=\"bg-white p-6 rounded-lg shadow text-center\">\n          <p className=\"text-neutral-600 mb-4\">\n            Run parameter optimization to find the best strategy parameters.\n          </p>\n          <button\n            onClick={() => runOptimization()}\n            disabled={isLoading.optimize}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.optimize ? 'Optimizing...' : 'Run Optimization'}\n          </button>\n        </div>\n      );\n    }\n    \n    const { bestParameters, bestResult, optimizationTime, parameterRanges } = optimizationResult;\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Optimization Results</h3>\n          <p className=\"text-sm text-neutral-600 mb-2\">\n            Completed in {(optimizationTime / 1000).toFixed(2)} seconds\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n            <div>\n              <h4 className=\"text-md font-medium mb-2\">Best Parameters</h4>\n              <table className=\"w-full\">\n                <tbody>\n                  {Object.entries(bestParameters).map(([key, value]) => (\n                    <tr key={key}>\n                      <td className=\"py-1 text-neutral-600\">{key}</td>\n                      <td className=\"py-1 text-right font-medium\">{value}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            \n            <div>\n              <h4 className=\"text-md font-medium mb-2\">Performance</h4>\n              <table className=\"w-full\">\n                <tbody>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Net Profit</td>\n                    <td className=\"py-1 text-right font-medium\">${bestResult.metrics.netProfit.toFixed(2)}</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Win Rate</td>\n                    <td className=\"py-1 text-right font-medium\">{bestResult.winRate.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Profit Factor</td>\n                    <td className=\"py-1 text-right font-medium\">{bestResult.profitFactor.toFixed(2)}</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Max Drawdown</td>\n                    <td className=\"py-1 text-right font-medium\">{bestResult.maxDrawdownPercent.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Sharpe Ratio</td>\n                    <td className=\"py-1 text-right font-medium\">{bestResult.sharpeRatio.toFixed(2)}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Parameter Ranges</h3>\n          <table className=\"w-full\">\n            <thead>\n              <tr>\n                <th className=\"text-left py-2\">Parameter</th>\n                <th className=\"text-right py-2\">Min</th>\n                <th className=\"text-right py-2\">Max</th>\n                <th className=\"text-right py-2\">Step</th>\n                <th className=\"text-right py-2\">Best Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(parameterRanges).map(([key, [min, max, step]]) => (\n                <tr key={key}>\n                  <td className=\"py-1 text-neutral-600\">{key}</td>\n                  <td className=\"py-1 text-right\">{min}</td>\n                  <td className=\"py-1 text-right\">{max}</td>\n                  <td className=\"py-1 text-right\">{step}</td>\n                  <td className=\"py-1 text-right font-medium\">{bestParameters[key]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2\">\n          <button\n            onClick={() => {\n              // Apply optimized parameters to strategy\n              const updatedStrategy = {\n                ...strategy,\n                parameters: bestParameters\n              };\n              // Run backtest with optimized parameters\n              backtestStrategy(updatedStrategy, marketData, testOptions);\n            }}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2\"\n          >\n            Apply Optimized Parameters\n          </button>\n          \n          <button\n            onClick={() => runOptimization()}\n            disabled={isLoading.optimize}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.optimize ? 'Optimizing...' : 'Run Again'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  // Render Monte Carlo simulation results\n  const renderMonteCarloResults = () => {\n    if (!monteCarloResult) {\n      return (\n        <div className=\"bg-white p-6 rounded-lg shadow text-center\">\n          <p className=\"text-neutral-600 mb-4\">\n            Run Monte Carlo simulation to assess strategy robustness.\n          </p>\n          <button\n            onClick={() => runMonteCarloSimulation()}\n            disabled={!backtestResult || isLoading.monteCarlo}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.monteCarlo ? 'Simulating...' : 'Run Monte Carlo Simulation'}\n          </button>\n        </div>\n      );\n    }\n    \n    const { confidenceIntervals, worstCase, bestCase, medianCase } = monteCarloResult;\n    const monteCarloChartData = prepareMonteCarloData();\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Monte Carlo Simulation Results</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-neutral-50 p-3 rounded\">\n              <h4 className=\"text-sm font-medium text-neutral-500 mb-2\">95% Confidence Interval</h4>\n              <table className=\"w-full\">\n                <tbody>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Final Balance</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      ${confidenceIntervals.finalBalance[0].toFixed(2)} to ${confidenceIntervals.finalBalance[1].toFixed(2)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Max Drawdown</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {confidenceIntervals.maxDrawdownPercent[0].toFixed(2)}% to {confidenceIntervals.maxDrawdownPercent[1].toFixed(2)}%\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Win Rate</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {confidenceIntervals.winRate[0].toFixed(2)}% to {confidenceIntervals.winRate[1].toFixed(2)}%\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Profit Factor</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {confidenceIntervals.profitFactor[0].toFixed(2)} to {confidenceIntervals.profitFactor[1].toFixed(2)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <div className=\"bg-neutral-50 p-3 rounded\">\n              <h4 className=\"text-sm font-medium text-neutral-500 mb-2\">Worst Case Scenario</h4>\n              <table className=\"w-full\">\n                <tbody>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Final Balance</td>\n                    <td className=\"py-1 text-right font-medium\">${worstCase.finalBalance.toFixed(2)}</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Max Drawdown</td>\n                    <td className=\"py-1 text-right font-medium\">{worstCase.maxDrawdownPercent.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Win Rate</td>\n                    <td className=\"py-1 text-right font-medium\">{worstCase.winRate.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Profit Factor</td>\n                    <td className=\"py-1 text-right font-medium\">{worstCase.profitFactor.toFixed(2)}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <div className=\"bg-neutral-50 p-3 rounded\">\n              <h4 className=\"text-sm font-medium text-neutral-500 mb-2\">Best Case Scenario</h4>\n              <table className=\"w-full\">\n                <tbody>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Final Balance</td>\n                    <td className=\"py-1 text-right font-medium\">${bestCase.finalBalance.toFixed(2)}</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Max Drawdown</td>\n                    <td className=\"py-1 text-right font-medium\">{bestCase.maxDrawdownPercent.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Win Rate</td>\n                    <td className=\"py-1 text-right font-medium\">{bestCase.winRate.toFixed(2)}%</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Profit Factor</td>\n                    <td className=\"py-1 text-right font-medium\">{bestCase.profitFactor.toFixed(2)}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Final Equity Distribution</h3>\n          {monteCarloChartData && (\n            <div className=\"h-64\">\n              <Line \n                data={monteCarloChartData}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    y: {\n                      beginAtZero: true\n                    }\n                  },\n                  plugins: {\n                    legend: {\n                      display: false\n                    }\n                  }\n                }}\n              />\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <button\n            onClick={() => runMonteCarloSimulation()}\n            disabled={!backtestResult || isLoading.monteCarlo}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.monteCarlo ? 'Simulating...' : 'Run Again'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  // Render walk-forward analysis results\n  const renderWalkForwardResults = () => {\n    if (!walkForwardResult) {\n      return (\n        <div className=\"bg-white p-6 rounded-lg shadow text-center\">\n          <p className=\"text-neutral-600 mb-4\">\n            Run walk-forward analysis to test strategy robustness across different time periods.\n          </p>\n          <button\n            onClick={() => runWalkForwardAnalysis()}\n            disabled={!marketData.length || isLoading.walkForward}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.walkForward ? 'Analyzing...' : 'Run Walk-Forward Analysis'}\n          </button>\n        </div>\n      );\n    }\n    \n    const { foldResults, aggregateResult } = walkForwardResult;\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Walk-Forward Analysis Results</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <h4 className=\"text-md font-medium mb-2\">In-Sample vs Out-of-Sample Performance</h4>\n              <table className=\"w-full\">\n                <thead>\n                  <tr>\n                    <th className=\"text-left py-2\">Metric</th>\n                    <th className=\"text-right py-2\">In-Sample</th>\n                    <th className=\"text-right py-2\">Out-of-Sample</th>\n                    <th className=\"text-right py-2\">Ratio</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Net Profit</td>\n                    <td className=\"py-1 text-right\">${aggregateResult.inSampleMetrics.netProfit.toFixed(2)}</td>\n                    <td className=\"py-1 text-right\">${aggregateResult.outOfSampleMetrics.netProfit.toFixed(2)}</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {(aggregateResult.outOfSampleMetrics.netProfit / aggregateResult.inSampleMetrics.netProfit).toFixed(2)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Win Rate</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.inSampleMetrics.winRate.toFixed(2)}%</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.outOfSampleMetrics.winRate.toFixed(2)}%</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {(aggregateResult.outOfSampleMetrics.winRate / aggregateResult.inSampleMetrics.winRate).toFixed(2)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Profit Factor</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.inSampleMetrics.profitFactor.toFixed(2)}</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.outOfSampleMetrics.profitFactor.toFixed(2)}</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {(aggregateResult.outOfSampleMetrics.profitFactor / aggregateResult.inSampleMetrics.profitFactor).toFixed(2)}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-1 text-neutral-600\">Max Drawdown</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.inSampleMetrics.maxDrawdownPercent.toFixed(2)}%</td>\n                    <td className=\"py-1 text-right\">{aggregateResult.outOfSampleMetrics.maxDrawdownPercent.toFixed(2)}%</td>\n                    <td className=\"py-1 text-right font-medium\">\n                      {(aggregateResult.outOfSampleMetrics.maxDrawdownPercent / aggregateResult.inSampleMetrics.maxDrawdownPercent).toFixed(2)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <div>\n              <h4 className=\"text-md font-medium mb-2\">Robustness Score</h4>\n              <div className=\"bg-neutral-50 p-4 rounded\">\n                <div className=\"text-center\">\n                  <span className=\"text-3xl font-bold\">\n                    {aggregateResult.robustnessScore.toFixed(2)}\n                  </span>\n                  <p className=\"text-sm text-neutral-600 mt-1\">\n                    {aggregateResult.robustnessScore >= 0.7 \n                      ? 'Good robustness (>= 0.7)' \n                      : aggregateResult.robustnessScore >= 0.5 \n                        ? 'Moderate robustness (>= 0.5)' \n                        : 'Poor robustness (< 0.5)'}\n                  </p>\n                </div>\n                <p className=\"text-xs text-neutral-500 mt-4\">\n                  A score close to 1.0 indicates that the strategy performs similarly on unseen data as it does on training data, suggesting good robustness.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <h4 className=\"text-md font-medium mb-2\">Fold Results</h4>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-neutral-200\">\n              <thead className=\"bg-neutral-50\">\n                <tr>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Fold</th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">In-Sample Profit</th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Out-of-Sample Profit</th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">In-Sample Win Rate</th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider\">Out-of-Sample Win Rate</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-neutral-200\">\n                {foldResults.map((fold, index) => (\n                  <tr key={index}>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-neutral-500\">\n                      {index + 1}\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm\">\n                      <span className={fold.inSample.metrics.netProfit > 0 ? 'text-green-600' : 'text-red-600'}>\n                        ${fold.inSample.metrics.netProfit.toFixed(2)}\n                      </span>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm\">\n                      <span className={fold.outOfSample.metrics.netProfit > 0 ? 'text-green-600' : 'text-red-600'}>\n                        ${fold.outOfSample.metrics.netProfit.toFixed(2)}\n                      </span>\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-neutral-500\">\n                      {fold.inSample.winRate.toFixed(2)}%\n                    </td>\n                    <td className=\"px-3 py-2 whitespace-nowrap text-sm text-neutral-500\">\n                      {fold.outOfSample.winRate.toFixed(2)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <button\n            onClick={() => runWalkForwardAnalysis()}\n            disabled={!marketData.length || isLoading.walkForward}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n          >\n            {isLoading.walkForward ? 'Analyzing...' : 'Run Again'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-neutral-100 p-4 rounded-lg\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-bold mb-4\">Strategy Tester</h2>\n        \n        <div className=\"bg-white p-4 rounded-lg shadow mb-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Test Options</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700 mb-1\">\n                Initial Balance\n              </label>\n              <input\n                type=\"number\"\n                value={testOptions.initialBalance}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  initialBalance: parseFloat(e.target.value)\n                })}\n                className=\"w-full p-2 border border-neutral-300 rounded-md\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700 mb-1\">\n                Position Size (%)\n              </label>\n              <input\n                type=\"number\"\n                value={testOptions.positionSizePercent}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  positionSizePercent: parseFloat(e.target.value)\n                })}\n                className=\"w-full p-2 border border-neutral-300 rounded-md\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700 mb-1\">\n                Fee (%)\n              </label>\n              <input\n                type=\"number\"\n                value={testOptions.feePercent}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  feePercent: parseFloat(e.target.value)\n                })}\n                className=\"w-full p-2 border border-neutral-300 rounded-md\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-neutral-700 mb-1\">\n                Slippage (%)\n              </label>\n              <input\n                type=\"number\"\n                value={testOptions.slippagePercent}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  slippagePercent: parseFloat(e.target.value)\n                })}\n                className=\"w-full p-2 border border-neutral-300 rounded-md\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"useStopLoss\"\n                checked={testOptions.useStopLoss}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  useStopLoss: e.target.checked\n                })}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n              />\n              <label htmlFor=\"useStopLoss\" className=\"ml-2 block text-sm text-neutral-700\">\n                Use Stop Loss\n              </label>\n              {testOptions.useStopLoss && (\n                <input\n                  type=\"number\"\n                  value={testOptions.stopLossPercent}\n                  onChange={(e) => setTestOptions({\n                    ...testOptions,\n                    stopLossPercent: parseFloat(e.target.value)\n                  })}\n                  className=\"ml-2 w-16 p-1 border border-neutral-300 rounded-md\"\n                />\n              )}\n              <span className=\"ml-1 text-sm text-neutral-500\">%</span>\n            </div>\n            \n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"useTakeProfit\"\n                checked={testOptions.useTakeProfit}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  useTakeProfit: e.target.checked\n                })}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n              />\n              <label htmlFor=\"useTakeProfit\" className=\"ml-2 block text-sm text-neutral-700\">\n                Use Take Profit\n              </label>\n              {testOptions.useTakeProfit && (\n                <input\n                  type=\"number\"\n                  value={testOptions.takeProfitPercent}\n                  onChange={(e) => setTestOptions({\n                    ...testOptions,\n                    takeProfitPercent: parseFloat(e.target.value)\n                  })}\n                  className=\"ml-2 w-16 p-1 border border-neutral-300 rounded-md\"\n                />\n              )}\n              <span className=\"ml-1 text-sm text-neutral-500\">%</span>\n            </div>\n            \n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"useTrailingStop\"\n                checked={testOptions.useTrailingStop}\n                onChange={(e) => setTestOptions({\n                  ...testOptions,\n                  useTrailingStop: e.target.checked\n                })}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n              />\n              <label htmlFor=\"useTrailingStop\" className=\"ml-2 block text-sm text-neutral-700\">\n                Use Trailing Stop\n              </label>\n              {testOptions.useTrailingStop && (\n                <input\n                  type=\"number\"\n                  value={testOptions.trailingStopPercent}\n                  onChange={(e) => setTestOptions({\n                    ...testOptions,\n                    trailingStopPercent: parseFloat(e.target.value)\n                  })}\n                  className=\"ml-2 w-16 p-1 border border-neutral-300 rounded-md\"\n                />\n              )}\n              <span className=\"ml-1 text-sm text-neutral-500\">%</span>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end mt-4\">\n            <button\n              onClick={runBacktest}\n              disabled={isLoading.backtest}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\n            >\n              {isLoading.backtest ? 'Running...' : 'Run Backtest'}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mb-4\">\n        <div className=\"border-b border-neutral-200\">\n          <nav className=\"-mb-px flex\">\n            <button\n              onClick={() => setActiveTab('backtest')}\n              className={`py-2 px-4 text-sm font-medium ${\n                activeTab === 'backtest'\n                  ? 'border-b-2 border-blue-500 text-blue-600'\n                  : 'text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'\n              }`}\n            >\n              Backtest Results\n            </button>\n            <button\n              onClick={() => setActiveTab('optimize')}\n              className={`py-2 px-4 text-sm font-medium ${\n                activeTab === 'optimize'\n                  ? 'border-b-2 border-blue-500 text-blue-600'\n                  : 'text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'\n              }`}\n            >\n              Optimization\n            </button>\n            <button\n              onClick={() => setActiveTab('monteCarlo')}\n              className={`py-2 px-4 text-sm font-medium ${\n                activeTab === 'monteCarlo'\n                  ? 'border-b-2 border-blue-500 text-blue-600'\n                  : 'text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'\n              }`}\n            >\n              Monte Carlo\n            </button>\n            <button\n              onClick={() => setActiveTab('walkForward')}\n              className={`py-2 px-4 text-sm font-medium ${\n                activeTab === 'walkForward'\n                  ? 'border-b-2 border-blue-500 text-blue-600'\n                  : 'text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'\n              }`}\n            >\n              Walk-Forward\n            </button>\n          </nav>\n        </div>\n      </div>\n      \n      <div>\n        {activeTab === 'backtest' && renderBacktestResults()}\n        {activeTab === 'optimize' && renderOptimizationResults()}\n        {activeTab === 'monteCarlo' && renderMonteCarloResults()}\n        {activeTab === 'walkForward' && renderWalkForwardResults()}\n      </div>\n    </div>\n  );\n};\n\nexport default StrategyTester;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/Textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/config/environment.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":19,"suggestions":[{"fix":{"range":[2303,2587],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":19,"suggestions":[{"fix":{"range":[2699,2970],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":19,"suggestions":[{"fix":{"range":[3041,3206],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced environment management for proper mock mode detection\ninterface EnvironmentConfig {\n  apiKey: string | null;\n  apiSecret: string | null;\n  forceMockMode: boolean;\n  isProduction: boolean;\n  wsUrl: string;\n  apiUrl: string;\n  liveTradingEnabled: boolean;\n}\n\nexport class EnvironmentManager {\n  private static instance: EnvironmentManager;\n  private config: EnvironmentConfig;\n  \n  private constructor() {\n    this.config = this.loadConfiguration();\n    this.validateConfiguration();\n  }\n  \n  static getInstance(): EnvironmentManager {\n    if (!EnvironmentManager.instance) {\n      EnvironmentManager.instance = new EnvironmentManager();\n    }\n    return EnvironmentManager.instance;\n  }\n  \n  private loadConfiguration(): EnvironmentConfig {\n    // Check for environment variables\n    const apiKey = import.meta.env.VITE_POLONIEX_API_KEY || null;\n    const apiSecret = import.meta.env.VITE_POLONIEX_API_SECRET || null;\n    const forceMockMode = import.meta.env.VITE_FORCE_MOCK_MODE === 'true';\n    \n    // Check for localStorage override (for testing)\n    const storedConfig = this.getStoredConfig();\n    \n    return {\n      apiKey: storedConfig?.apiKey || apiKey,\n      apiSecret: storedConfig?.apiSecret || apiSecret,\n      forceMockMode: storedConfig?.forceMockMode ?? forceMockMode,\n      isProduction: import.meta.env.PROD,\n      wsUrl: import.meta.env.VITE_WS_URL || 'wss://ws.poloniex.com/ws/public',\n      apiUrl: import.meta.env.VITE_API_URL || 'https://api.poloniex.com',\n      liveTradingEnabled: false // Will be set after validation\n    };\n  }\n  \n  private getStoredConfig(): Partial<EnvironmentConfig> | null {\n    try {\n      const stored = localStorage.getItem('poloniex_config');\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  }\n  \n  private validateConfiguration(): void {\n    const { apiKey, apiSecret, forceMockMode } = this.config;\n    \n    // Determine if live trading should be enabled\n    const hasValidCredentials = !!(apiKey && apiSecret && apiKey.length > 10 && apiSecret.length > 10);\n    const isExplicitlyMocked = forceMockMode === true;\n    \n    this.config.liveTradingEnabled = hasValidCredentials && !isExplicitlyMocked;\n    \n    // Log configuration status (only in development)\n    if (import.meta.env.DEV) {\n      console.info('Environment Configuration:', {\n        hasApiKey: !!apiKey,\n        hasApiSecret: !!apiSecret,\n        forceMockMode: isExplicitlyMocked,\n        liveTradingEnabled: this.config.liveTradingEnabled,\n        mode: this.config.liveTradingEnabled ? 'LIVE' : 'MOCK'\n      });\n    }\n    \n    // Warn about configuration issues\n    if (!hasValidCredentials && !isExplicitlyMocked) {\n      console.warn(\n        'API credentials missing or invalid. Running in MOCK mode.',\n        '\\nTo enable live trading:',\n        '\\n1. Set VITE_POLONIEX_API_KEY and VITE_POLONIEX_API_SECRET in .env',\n        '\\n2. Ensure VITE_FORCE_MOCK_MODE is not set to \"true\"'\n      );\n    }\n    \n    if (hasValidCredentials && isExplicitlyMocked) {\n      console.warn(\n        'Valid API credentials found but VITE_FORCE_MOCK_MODE is enabled.',\n        '\\nTo enable live trading, set VITE_FORCE_MOCK_MODE=false'\n      );\n    }\n  }\n  \n  getConfig(): EnvironmentConfig {\n    return { ...this.config };\n  }\n  \n  isLiveTradingEnabled(): boolean {\n    return this.config.liveTradingEnabled;\n  }\n  \n  isMockMode(): boolean {\n    return !this.config.liveTradingEnabled;\n  }\n  \n  // Allow runtime configuration updates (for testing)\n  updateConfig(updates: Partial<EnvironmentConfig>): void {\n    this.config = { ...this.config, ...updates };\n    this.validateConfiguration();\n    \n    // Persist to localStorage\n    localStorage.setItem('poloniex_config', JSON.stringify({\n      apiKey: this.config.apiKey,\n      apiSecret: this.config.apiSecret,\n      forceMockMode: this.config.forceMockMode\n    }));\n    \n    // Trigger configuration change event\n    window.dispatchEvent(new CustomEvent('config-updated', { \n      detail: this.config \n    }));\n  }\n  \n  // Clear stored configuration\n  clearStoredConfig(): void {\n    localStorage.removeItem('poloniex_config');\n    this.config = this.loadConfiguration();\n    this.validateConfiguration();\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/AppProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearAuthData' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":22,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":22,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":25,"suggestions":[{"fix":{"range":[1799,1854],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":22,"suggestions":[{"fix":{"range":[1937,1979],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":24,"suggestions":[{"fix":{"range":[2677,2724],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"fix":{"range":[3284,3321],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":20,"suggestions":[{"fix":{"range":[3472,3510],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":20,"suggestions":[{"fix":{"range":[3925,3970],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport { isAuthenticated, clearAuthData, storeAuthDataLegacy, getUserData } from '@/utils/auth';\nimport { authService } from '@/services/authService';\n\ninterface AuthContextType {\n  isLoggedIn: boolean;\n  login: (usernameOrToken: string, passwordOrExpiresIn?: string | number) => Promise<boolean>;\n  logout: () => Promise<void>;\n  user: UserProfile | null;\n  isAuthenticated: boolean; // Added for FuturesContext\n  loading: boolean;\n  refreshToken: () => Promise<boolean>;\n}\n\ninterface UserProfile {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport const AuthContext = createContext<AuthContextType>({\n  isLoggedIn: false,\n  login: async () => false,\n  logout: async () => {},\n  user: null,\n  isAuthenticated: false, // Added for FuturesContext\n  loading: false,\n  refreshToken: async () => false\n});\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // Check authentication status on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      setLoading(true);\n      \n      try {\n        const authenticated = isAuthenticated();\n        setIsLoggedIn(authenticated);\n        \n        if (authenticated) {\n          // Get user data from localStorage first\n          const userData = getUserData();\n          if (userData) {\n            setUser(userData);\n          }\n          \n          // Verify token with server\n          const isValid = await authService.verifyToken();\n          if (!isValid) {\n            console.warn('Token verification failed, logging out');\n            await logout();\n          }\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n        await logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n\n  const login = async (usernameOrToken: string, passwordOrExpiresIn?: string | number): Promise<boolean> => {\n    try {\n      // Check if this is JWT login (new method) or legacy login\n      if (typeof passwordOrExpiresIn === 'string') {\n        // New JWT login method\n        const response = await authService.login({\n          username: usernameOrToken,\n          password: passwordOrExpiresIn\n        });\n\n        if (response.success && response.data) {\n          setIsLoggedIn(true);\n          setUser(response.data.user);\n          return true;\n        } else {\n          console.error('Login failed:', response.error);\n          return false;\n        }\n      } else {\n        // Legacy login method for backward compatibility\n        const token = usernameOrToken;\n        const expiresIn = passwordOrExpiresIn as number || 3600;\n        \n        storeAuthDataLegacy(token, expiresIn);\n        setIsLoggedIn(true);\n        \n        // Set mock user data for legacy login\n        setUser({\n          id: '1',\n          username: 'trader',\n          email: 'trader@example.com',\n          role: 'user'\n        });\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsLoggedIn(false);\n      setUser(null);\n    }\n  };\n\n  const refreshToken = async (): Promise<boolean> => {\n    try {\n      const newToken = await authService.refreshToken();\n      if (newToken) {\n        // Token refreshed successfully\n        return true;\n      } else {\n        // Refresh failed, log out\n        await logout();\n        return false;\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      await logout();\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      isLoggedIn, \n      login, \n      logout, \n      user,\n      isAuthenticated: isLoggedIn, // Added for FuturesContext\n      loading,\n      refreshToken\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/FuturesContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"fix":{"range":[2262,2311],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":20,"suggestions":[{"fix":{"range":[2795,2850],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20,"suggestions":[{"fix":{"range":[3342,3393],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"fix":{"range":[3955,4001],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":24,"suggestions":[{"fix":{"range":[4723,4783],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport PoloniexFuturesAPI, { \n  PositionMode, \n  MarginMode, \n  FuturesPosition, \n  FuturesAccountBalance \n} from '@/services/poloniexFuturesAPI';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useSettings } from '@/hooks/useSettings';\n\ninterface FuturesContextType {\n  api: PoloniexFuturesAPI;\n  positions: FuturesPosition[];\n  accountBalance: FuturesAccountBalance | null;\n  positionMode: PositionMode;\n  isLoading: boolean;\n  error: string | null;\n  refreshPositions: () => Promise<void>;\n  refreshAccountBalance: () => Promise<void>;\n  setPositionMode: (mode: PositionMode) => Promise<void>;\n  setLeverage: (symbol: string, leverage: string, marginMode: MarginMode) => Promise<void>;\n}\n\nconst defaultFuturesContext: FuturesContextType = {\n  api: new PoloniexFuturesAPI(true), // Default to mock mode\n  positions: [],\n  accountBalance: null,\n  positionMode: PositionMode.ONE_WAY,\n  isLoading: false,\n  error: null,\n  refreshPositions: async () => {},\n  refreshAccountBalance: async () => {},\n  setPositionMode: async () => {},\n  setLeverage: async () => {}\n};\n\nconst FuturesContext = createContext<FuturesContextType>(defaultFuturesContext);\n\nexport { FuturesContext };\n\ninterface FuturesProviderProps {\n  children: ReactNode;\n}\n\nexport const FuturesProvider: React.FC<FuturesProviderProps> = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  const { mockMode } = useSettings();\n  \n  const [api] = useState<PoloniexFuturesAPI>(() => new PoloniexFuturesAPI(mockMode));\n  const [positions, setPositions] = useState<FuturesPosition[]>([]);\n  const [accountBalance, setAccountBalance] = useState<FuturesAccountBalance | null>(null);\n  const [positionMode, setPositionModeState] = useState<PositionMode>(PositionMode.ONE_WAY);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Refresh positions data\n  const refreshPositions = useCallback(async () => {\n    if (!isAuthenticated && !mockMode) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const positions = await api.getCurrentPositions();\n      setPositions(positions);\n    } catch (err) {\n      console.error('Failed to fetch positions:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch positions');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAuthenticated, mockMode, api]);\n\n  // Refresh account balance\n  const refreshAccountBalance = useCallback(async () => {\n    if (!isAuthenticated && !mockMode) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const balance = await api.getAccountBalance();\n      setAccountBalance(balance);\n    } catch (err) {\n      console.error('Failed to fetch account balance:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch account balance');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isAuthenticated, mockMode, api]);\n\n  // Set position mode (Hedge or One-way)\n  const setPositionMode = async (mode: PositionMode) => {\n    if (!isAuthenticated && !mockMode) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await api.switchPositionMode(mode);\n      setPositionModeState(mode);\n    } catch (err) {\n      console.error('Failed to set position mode:', err);\n      setError(err instanceof Error ? err.message : 'Failed to set position mode');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set leverage for a symbol\n  const setLeverage = async (symbol: string, leverage: string, marginMode: MarginMode) => {\n    if (!isAuthenticated && !mockMode) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      await api.setLeverage({ symbol, lever: leverage, mgnMode: marginMode });\n      // Refresh positions to get updated leverage\n      await refreshPositions();\n    } catch (err) {\n      console.error('Failed to set leverage:', err);\n      setError(err instanceof Error ? err.message : 'Failed to set leverage');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch initial data when authenticated or in mock mode\n  useEffect(() => {\n    if (isAuthenticated || mockMode) {\n      const fetchInitialData = async () => {\n        setIsLoading(true);\n        setError(null);\n        \n        try {\n          // Get position mode\n          const modeResponse = await api.getPositionMode();\n          setPositionModeState(modeResponse.posMode);\n          \n          // Get positions and account balance\n          await Promise.all([\n            refreshPositions(),\n            refreshAccountBalance()\n          ]);\n        } catch (err) {\n          console.error('Failed to fetch initial futures data:', err);\n          setError(err instanceof Error ? err.message : 'Failed to fetch initial futures data');\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      \n      fetchInitialData();\n    }\n  }, [api, refreshAccountBalance, refreshPositions, isAuthenticated, mockMode]);\n\n  // Refresh data periodically\n  useEffect(() => {\n    if (!isAuthenticated && !mockMode) return;\n    \n    const refreshInterval = setInterval(() => {\n      refreshPositions();\n      refreshAccountBalance();\n    }, 30000); // Refresh every 30 seconds\n    \n    return () => clearInterval(refreshInterval);\n  }, [refreshAccountBalance, refreshPositions, isAuthenticated, mockMode]);\n\n  const value = {\n    api,\n    positions,\n    accountBalance,\n    positionMode,\n    isLoading,\n    error,\n    refreshPositions,\n    refreshAccountBalance,\n    setPositionMode,\n    setLeverage\n  };\n\n  return (\n    <FuturesContext.Provider value={value}>\n      {children}\n    </FuturesContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/MockModeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/SettingsContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":22,"suggestions":[{"fix":{"range":[5713,5779],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":20,"suggestions":[{"fix":{"range":[7042,7092],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":20,"suggestions":[{"fix":{"range":[7848,7898],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, ReactNode } from 'react';\nimport { getStorageItem, setStorageItem, STORAGE_KEYS, isStorageAvailable } from '@/utils/storage';\n\ninterface SettingsContextType {\n  apiKey: string;\n  apiSecret: string;\n  isLiveTrading: boolean;\n  darkMode: boolean;\n  defaultPair: string;\n  emailNotifications: boolean;\n  tradeNotifications: boolean;\n  priceAlerts: boolean;\n  chatNotifications: boolean;\n  showExtension: boolean;\n  chartType: 'candle' | 'line' | 'area';\n  timeframe: '1m' | '5m' | '15m' | '1h' | '4h' | '1d';\n  leverage: number;\n  riskPerTrade: number;\n  stopLossPercent: number;\n  takeProfitPercent: number;\n  trailingStopPercent: number;\n  autoTradingEnabled: boolean;\n  updateSettings: (settings: Partial<SettingsState>) => void;\n  resetSettings: () => void;\n  hasStoredCredentials: boolean;\n  exportSettings: () => string;\n  importSettings: (settingsJson: string) => boolean;\n  mockMode?: boolean; // Added for FuturesContext\n}\n\ninterface SettingsState {\n  apiKey: string;\n  apiSecret: string;\n  isLiveTrading: boolean;\n  darkMode: boolean;\n  defaultPair: string;\n  emailNotifications: boolean;\n  tradeNotifications: boolean;\n  priceAlerts: boolean;\n  chatNotifications: boolean;\n  showExtension: boolean;\n  chartType: 'candle' | 'line' | 'area';\n  timeframe: '1m' | '5m' | '15m' | '1h' | '4h' | '1d';\n  leverage: number;\n  riskPerTrade: number;\n  stopLossPercent: number;\n  takeProfitPercent: number;\n  trailingStopPercent: number;\n  autoTradingEnabled: boolean;\n}\n\nconst defaultSettings: SettingsState = {\n  apiKey: '',\n  apiSecret: '',\n  isLiveTrading: false,\n  darkMode: false,\n  defaultPair: 'BTC-USDT',\n  emailNotifications: true,\n  tradeNotifications: true,\n  priceAlerts: false,\n  chatNotifications: true,\n  showExtension: true,\n  chartType: 'candle',\n  timeframe: '5m',\n  leverage: 1,\n  riskPerTrade: 2,\n  stopLossPercent: 2,\n  takeProfitPercent: 4,\n  trailingStopPercent: 1,\n  autoTradingEnabled: false\n};\n\n// Define storage keys\nconst EXTENDED_STORAGE_KEYS = {\n  ...STORAGE_KEYS,\n  CHART_TYPE: 'poloniex_chart_type',\n  TIMEFRAME: 'poloniex_timeframe',\n  LEVERAGE: 'poloniex_leverage',\n  RISK_PER_TRADE: 'poloniex_risk_per_trade',\n  STOP_LOSS_PERCENT: 'poloniex_stop_loss_percent',\n  TAKE_PROFIT_PERCENT: 'poloniex_take_profit_percent',\n  TRAILING_STOP_PERCENT: 'poloniex_trailing_stop_percent',\n  AUTO_TRADING_ENABLED: 'poloniex_auto_trading_enabled'\n};\n\nconst SettingsContext = createContext<SettingsContextType | undefined>(undefined);\n\nexport { SettingsContext };\n\ninterface SettingsProviderProps {\n  children: ReactNode;\n}\n\nexport const SettingsProvider: React.FC<SettingsProviderProps> = ({ children }) => {\n  // Check if we can access localStorage\n  const canUseStorage = isStorageAvailable();\n  \n  // Get initial settings from localStorage or environment variables\n  const getInitialSettings = (): SettingsState => {\n    if (!canUseStorage) {\n      return {\n        ...defaultSettings,\n        apiKey: import.meta.env.VITE_POLONIEX_API_KEY || '',\n        apiSecret: import.meta.env.VITE_POLONIEX_API_SECRET || ''\n      };\n    }\n\n    return {\n      apiKey: getStorageItem(EXTENDED_STORAGE_KEYS.API_KEY, import.meta.env.VITE_POLONIEX_API_KEY || ''),\n      apiSecret: getStorageItem(EXTENDED_STORAGE_KEYS.API_SECRET, import.meta.env.VITE_POLONIEX_API_SECRET || ''),\n      isLiveTrading: getStorageItem(EXTENDED_STORAGE_KEYS.IS_LIVE_TRADING, false),\n      darkMode: getStorageItem(EXTENDED_STORAGE_KEYS.DARK_MODE, false),\n      defaultPair: getStorageItem(EXTENDED_STORAGE_KEYS.DEFAULT_PAIR, 'BTC-USDT'),\n      emailNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.EMAIL_NOTIFICATIONS, true),\n      tradeNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.TRADE_NOTIFICATIONS, true),\n      priceAlerts: getStorageItem(EXTENDED_STORAGE_KEYS.PRICE_ALERTS, false),\n      chatNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.CHAT_NOTIFICATIONS, true),\n      showExtension: getStorageItem(EXTENDED_STORAGE_KEYS.SHOW_EXTENSION, true),\n      chartType: getStorageItem(EXTENDED_STORAGE_KEYS.CHART_TYPE, 'candle'),\n      timeframe: getStorageItem(EXTENDED_STORAGE_KEYS.TIMEFRAME, '5m'),\n      leverage: getStorageItem(EXTENDED_STORAGE_KEYS.LEVERAGE, 1),\n      riskPerTrade: getStorageItem(EXTENDED_STORAGE_KEYS.RISK_PER_TRADE, 2),\n      stopLossPercent: getStorageItem(EXTENDED_STORAGE_KEYS.STOP_LOSS_PERCENT, 2),\n      takeProfitPercent: getStorageItem(EXTENDED_STORAGE_KEYS.TAKE_PROFIT_PERCENT, 4),\n      trailingStopPercent: getStorageItem(EXTENDED_STORAGE_KEYS.TRAILING_STOP_PERCENT, 1),\n      autoTradingEnabled: getStorageItem(EXTENDED_STORAGE_KEYS.AUTO_TRADING_ENABLED, false)\n    };\n  };\n\n  const [settings, setSettings] = useState<SettingsState>(getInitialSettings);\n  const [hasStoredCredentials, setHasStoredCredentials] = useState<boolean>(false);\n\n  // Check if we have credentials stored\n  useEffect(() => {\n    setHasStoredCredentials(Boolean(settings.apiKey && settings.apiSecret));\n  }, [settings.apiKey, settings.apiSecret]);\n\n  // Apply dark mode setting to document\n  useEffect(() => {\n    if (settings.darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [settings.darkMode]);\n\n  // Update settings in state and localStorage\n  const updateSettings = (newSettings: Partial<SettingsState>) => {\n    setSettings(prev => {\n      const updated = { ...prev, ...newSettings };\n      \n      // Special handling for live trading mode\n      if (newSettings.isLiveTrading !== undefined) {\n        // Only allow live trading if we have API credentials\n        if (newSettings.isLiveTrading && (!updated.apiKey || !updated.apiSecret)) {\n          console.log('Cannot enable live trading without API credentials');\n          updated.isLiveTrading = false;\n        }\n      }\n      \n      // Only persist to localStorage if it's available\n      if (canUseStorage) {\n        // Persist each updated setting to localStorage\n        Object.entries(newSettings).forEach(([key, value]) => {\n          const storageKey = EXTENDED_STORAGE_KEYS[key.toUpperCase() as keyof typeof EXTENDED_STORAGE_KEYS] || `poloniex_${key}`;\n          setStorageItem(storageKey, value);\n        });\n      }\n      \n      return updated;\n    });\n  };\n\n  // Reset all settings to default\n  const resetSettings = () => {\n    setSettings(defaultSettings);\n    \n    if (canUseStorage) {\n      Object.values(EXTENDED_STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key);\n      });\n    }\n  };\n\n  // Export settings to JSON string\n  const exportSettings = (): string => {\n    try {\n      // Create a copy of settings without sensitive data\n      const exportableSettings = { ...settings };\n      const sensitiveKeys: (keyof SettingsState)[] = ['apiKey', 'apiSecret'];\n      \n      sensitiveKeys.forEach(key => {\n        if (key in exportableSettings) {\n          delete exportableSettings[key];\n        }\n      });\n      \n      return JSON.stringify(exportableSettings);\n    } catch (error) {\n      console.error('Error exporting settings:', error);\n      return '';\n    }\n  };\n\n  // Import settings from JSON string\n  const importSettings = (settingsJson: string): boolean => {\n    try {\n      const importedSettings = JSON.parse(settingsJson);\n      \n      // Validate imported settings\n      if (typeof importedSettings !== 'object' || importedSettings === null) {\n        throw new Error('Invalid settings format');\n      }\n      \n      // Don't import sensitive data\n      const sensitiveKeys: (keyof SettingsState)[] = ['apiKey', 'apiSecret'];\n      sensitiveKeys.forEach(key => {\n        if (key in importedSettings) {\n          delete importedSettings[key];\n        }\n      });\n      \n      // Update settings\n      updateSettings(importedSettings);\n      return true;\n    } catch (error) {\n      console.error('Error importing settings:', error);\n      return false;\n    }\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        ...settings,\n        updateSettings,\n        resetSettings,\n        hasStoredCredentials,\n        exportSettings,\n        importSettings,\n        mockMode: !settings.isLiveTrading // Added for FuturesContext\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\n// End of component\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/TradingContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":20,"suggestions":[{"fix":{"range":[4041,4122],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, ReactNode, useEffect, useCallback } from 'react';\nimport { Strategy, StrategyType, MarketData, Trade, MovingAverageCrossoverParameters } from '../types';\nimport { mockMarketData, mockTrades } from '../data/mockData';\nimport { usePoloniexData } from '../hooks/usePoloniexData';\nimport { poloniexApi } from '../services/poloniexAPI';\n\ninterface TradingContextType {\n  marketData: MarketData[];\n  trades: Trade[];\n  strategies: Strategy[];\n  activeStrategies: string[];\n  accountBalance: {\n    available: number;\n    total: number;\n    currency: string;\n  } | null;\n  isLoading: boolean;\n  isMockMode: boolean;\n  addStrategy: (strategy: Strategy) => void;\n  removeStrategy: (id: string) => void;\n  toggleStrategyActive: (id: string) => void;\n  placeOrder: (pair: string, side: 'buy' | 'sell', type: 'limit' | 'market', quantity: number, price?: number) => Promise<unknown>;\n  errors: string[];\n  addError: (error: string) => void;\n  clearErrors: () => void;\n  refreshApiConnection: () => void; // Changed to non-Promise return type to match implementation\n}\n\nconst TradingContext = createContext<TradingContextType | undefined>(undefined);\n\nexport { TradingContext };\n\ninterface TradingProviderProps {\n  children: ReactNode;\n  initialPair?: string;\n}\n\nexport const TradingProvider: React.FC<TradingProviderProps> = ({ \n  children, \n  initialPair = 'BTC-USDT' \n}) => {\n  // Get data from Poloniex API or mock data\n  const { \n    marketData: realMarketData, \n    trades: realTrades,\n    accountBalance,\n    isLoading,\n    error,\n    isMockMode,\n    refreshApiConnection\n  } = usePoloniexData(initialPair);\n  \n  const [marketData, setMarketData] = useState<MarketData[]>(mockMarketData);\n  const [trades, setTrades] = useState<Trade[]>(mockTrades);\n  \n  // Update state when real data is available\n  useEffect(() => {\n    if (realMarketData.length > 0) {\n      setMarketData(realMarketData);\n    }\n  }, [realMarketData]);\n  \n  useEffect(() => {\n    if (realTrades.length > 0) {\n      setTrades(realTrades);\n    }\n  }, [realTrades]);\n  \n  // Strategy management\n  const [strategies, setStrategies] = useState<Strategy[]>([\n    {\n      id: '1',\n      name: 'Moving Average Crossover',\n      type: StrategyType.MA_CROSSOVER,\n      parameters: {\n        fastPeriod: 10,\n        slowPeriod: 50,\n        pair: 'BTC-USDT',\n        timeframe: '1d'\n      } as MovingAverageCrossoverParameters,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      performance: {\n        totalPnL: 12.5,\n        winRate: 0.65,\n        tradesCount: 24\n      }\n    }\n  ]);\n  \n  const [activeStrategies, setActiveStrategies] = useState<string[]>(['1']);\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const addError = useCallback((error: string) => {\n    // Avoid adding duplicate errors\n    setErrors(prev => {\n      if (prev.includes(error)) {\n        return prev;\n      }\n      return [...prev, error];\n    });\n  }, []);\n\n  const clearErrors = useCallback(() => {\n    setErrors([]);\n  }, []);\n\n  // If there was an error loading data, add it to our errors\n  useEffect(() => {\n    if (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      addError(errorMessage);\n    }\n  }, [error, addError]);\n\n  const addStrategy = (strategy: Strategy) => {\n    setStrategies(prev => [...prev, strategy]);\n  };\n\n  const removeStrategy = (id: string) => {\n    setStrategies(prev => prev.filter(strategy => strategy.id !== id));\n    setActiveStrategies(prev => prev.filter(strategyId => strategyId !== id));\n  };\n\n  const toggleStrategyActive = (id: string) => {\n    setActiveStrategies(prev => \n      prev.includes(id) \n        ? prev.filter(strategyId => strategyId !== id) \n        : [...prev, id]\n    );\n  };\n  \n  // Place an order using the Poloniex API\n  const placeOrder = async (\n    pair: string, \n    side: 'buy' | 'sell', \n    type: 'limit' | 'market', \n    quantity: number, \n    price?: number\n  ) => {\n    try {\n      if (isMockMode) {\n        console.log('Using mock order placement', { pair, side, type, quantity, price });\n        return { \n          success: true, \n          orderId: 'mock-order-' + Date.now(),\n          pair,\n          side,\n          type,\n          quantity,\n          price: price || 'market'\n        };\n      }\n      \n      const result = await poloniexApi.placeOrder(pair, side, type, quantity, price);\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error placing order';\n      addError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  return (\n    <TradingContext.Provider value={{\n      marketData,\n      trades,\n      strategies,\n      activeStrategies,\n      accountBalance,\n      isLoading,\n      isMockMode,\n      addStrategy,\n      removeStrategy,\n      toggleStrategyActive,\n      placeOrder,\n      errors,\n      addError,\n      clearErrors,\n      refreshApiConnection\n    }}>\n      {children}\n    </TradingContext.Provider>\n  );\n};\n\n// End of component\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/context/WebSocketContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":38,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useEffect, ReactNode } from 'react';\nimport { webSocketService } from '../services/websocketService';\nimport { usePageVisibility } from '../hooks/usePageVisibility';\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  connectionState: string;\n  lastError: string | null;\n  connectionHealth: {\n    isHealthy: boolean;\n    uptime: number;\n    latency: number | null;\n    reconnectAttempts: number;\n  };\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | null>(null);\n\nexport { WebSocketContext };\nexport type { WebSocketContextType };\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n}\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {\n  const [contextState, setContextState] = React.useState<WebSocketContextType>({\n    isConnected: false,\n    connectionState: 'disconnected',\n    lastError: null,\n    connectionHealth: {\n      isHealthy: false,\n      uptime: 0,\n      latency: null,\n      reconnectAttempts: 0\n    }\n  });\n\n  // Handle page visibility changes\n  usePageVisibility(\n    () => {\n      // Page visible - ensure connection\n      webSocketService.handlePageVisibilityChange(true);\n    },\n    () => {\n      // Page hidden - maintain connection in background\n      webSocketService.handlePageVisibilityChange(false);\n    },\n    30000 // 30 second grace period\n  );\n\n  useEffect(() => {\n    // Connection state change handler\n    const handleConnectionStateChange = (state: string) => {\n      setContextState(prev => ({\n        ...prev,\n        connectionState: state,\n        isConnected: state === 'connected'\n      }));\n    };\n\n    // Error handler\n    const handleError = (error: Error | unknown) => {\n      setContextState(prev => ({\n        ...prev,\n        lastError: error instanceof Error ? error.message : 'Unknown error'\n      }));\n    };\n\n    // Set up event listeners\n    webSocketService.on('connectionStateChanged', handleConnectionStateChange);\n    webSocketService.on('error', handleError);\n\n    // Initialize connection\n    webSocketService.connect().catch(console.error);\n\n    // Update connection health periodically\n    const healthInterval = setInterval(() => {\n      const health = webSocketService.getConnectionHealth();\n      setContextState(prev => ({\n        ...prev,\n        connectionHealth: {\n          isHealthy: health.isHealthy,\n          uptime: health.uptime,\n          latency: health.latency,\n          reconnectAttempts: health.reconnectAttempts\n        }\n      }));\n    }, 5000);\n\n    // Cleanup\n    return () => {\n      clearInterval(healthInterval);\n      webSocketService.off('connectionStateChanged', handleConnectionStateChange);\n      webSocketService.off('error', handleError);\n      webSocketService.disconnect();\n    };\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={contextState}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n// End of component","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/data/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useAPICall.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useAccessibility.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":21,"suggestions":[{"fix":{"range":[2447,2491],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback } from 'react';\n\n/**\n * Custom hook for managing accessibility features\n */\nexport const useAccessibility = () => {\n  const focusRingRef = useRef<HTMLElement | null>(null);\n\n  /**\n   * Trap focus within a container element\n   */\n  const trapFocus = useCallback((containerElement: HTMLElement) => {\n    const focusableElements = containerElement.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n    const handleTabKeyPress = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstElement) {\n          e.preventDefault();\n          lastElement.focus();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          e.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n\n    containerElement.addEventListener('keydown', handleTabKeyPress);\n    \n    return () => {\n      containerElement.removeEventListener('keydown', handleTabKeyPress);\n    };\n  }, []);\n\n  /**\n   * Handle escape key to close modals/dropdowns\n   */\n  const handleEscapeKey = useCallback((callback: () => void) => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        callback();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n\n  /**\n   * Announce changes to screen readers\n   */\n  const announceToScreenReader = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', priority);\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n\n    document.body.appendChild(announcement);\n\n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  }, []);\n\n  /**\n   * Set focus to element with proper error handling\n   */\n  const setFocus = useCallback((element: HTMLElement | null) => {\n    if (element && typeof element.focus === 'function') {\n      try {\n        element.focus();\n      } catch (error) {\n        console.warn('Failed to set focus:', error);\n      }\n    }\n  }, []);\n\n  /**\n   * Skip to main content link functionality\n   */\n  const skipToMainContent = useCallback(() => {\n    const mainContent = document.querySelector('main[role=\"main\"], main, #main-content');\n    if (mainContent) {\n      (mainContent as HTMLElement).focus();\n      mainContent.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, []);\n\n  return {\n    trapFocus,\n    handleEscapeKey,\n    announceToScreenReader,\n    setFocus,\n    skipToMainContent,\n    focusRingRef\n  };\n};\n\n/**\n * Hook for managing keyboard navigation in lists and grids\n */\nexport const useKeyboardNavigation = (\n  itemCount: number,\n  columns?: number,\n  onSelect?: (index: number) => void\n) => {\n  const currentIndex = useRef(0);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    const { key } = e;\n    let newIndex = currentIndex.current;\n\n    switch (key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        if (columns) {\n          // Grid navigation\n          newIndex = Math.min(currentIndex.current + columns, itemCount - 1);\n        } else {\n          // List navigation\n          newIndex = Math.min(currentIndex.current + 1, itemCount - 1);\n        }\n        break;\n      \n      case 'ArrowUp':\n        e.preventDefault();\n        if (columns) {\n          // Grid navigation\n          newIndex = Math.max(currentIndex.current - columns, 0);\n        } else {\n          // List navigation\n          newIndex = Math.max(currentIndex.current - 1, 0);\n        }\n        break;\n      \n      case 'ArrowRight':\n        if (columns) {\n          e.preventDefault();\n          newIndex = Math.min(currentIndex.current + 1, itemCount - 1);\n        }\n        break;\n      \n      case 'ArrowLeft':\n        if (columns) {\n          e.preventDefault();\n          newIndex = Math.max(currentIndex.current - 1, 0);\n        }\n        break;\n      \n      case 'Home':\n        e.preventDefault();\n        newIndex = 0;\n        break;\n      \n      case 'End':\n        e.preventDefault();\n        newIndex = itemCount - 1;\n        break;\n      \n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        if (onSelect) {\n          onSelect(currentIndex.current);\n        }\n        break;\n    }\n\n    if (newIndex !== currentIndex.current) {\n      currentIndex.current = newIndex;\n      // Focus the new item\n      const items = document.querySelectorAll('[data-keyboard-nav-item]');\n      const targetItem = items[newIndex] as HTMLElement;\n      if (targetItem) {\n        targetItem.focus();\n      }\n    }\n  }, [itemCount, columns, onSelect]);\n\n  const setCurrentIndex = useCallback((index: number) => {\n    currentIndex.current = Math.max(0, Math.min(index, itemCount - 1));\n  }, [itemCount]);\n\n  return {\n    handleKeyDown,\n    currentIndex: currentIndex.current,\n    setCurrentIndex\n  };\n};\n\n/**\n * Hook for managing live regions for dynamic content updates\n */\nexport const useLiveRegion = () => {\n  const liveRegionRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    // Create live region if it doesn't exist\n    if (!liveRegionRef.current) {\n      const liveRegion = document.createElement('div');\n      liveRegion.setAttribute('aria-live', 'polite');\n      liveRegion.setAttribute('aria-atomic', 'true');\n      liveRegion.className = 'sr-only';\n      liveRegion.id = 'live-region';\n      document.body.appendChild(liveRegion);\n      liveRegionRef.current = liveRegion;\n    }\n\n    return () => {\n      if (liveRegionRef.current && liveRegionRef.current.parentNode) {\n        liveRegionRef.current.parentNode.removeChild(liveRegionRef.current);\n      }\n    };\n  }, []);\n\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (liveRegionRef.current) {\n      liveRegionRef.current.setAttribute('aria-live', priority);\n      liveRegionRef.current.textContent = message;\n    }\n  }, []);\n\n  return { announce };\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useApiRequest.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1347,1350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1347,1350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is defined but never used.","line":71,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2183,2186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2183,2186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":16,"suggestions":[{"fix":{"range":[2216,2267],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is defined but never used.","line":81,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":16,"suggestions":[{"fix":{"range":[2523,2572],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useErrorHandler } from './useErrorHandler';\n\n/**\n * Custom hook for handling API requests with proper error handling\n */\nexport const useApiRequest = () => {\n  const { error, hasError, handleError, resetError, withErrorHandling } = useErrorHandler();\n\n  /**\n   * Make a GET request with error handling\n   * @param url URL to fetch\n   * @param options Fetch options\n   * @returns Response data or null on error\n   */\n  const get = useCallback(async <T,>(url: string, options?: RequestInit): Promise<T | null> => {\n    const wrappedFn = withErrorHandling(async () => {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        ...options,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Request failed with status ${response.status}`);\n      }\n      \n      return response.json();\n    });\n    \n    return await wrappedFn();\n  }, [withErrorHandling]);\n\n  /**\n   * Make a POST request with error handling\n   * @param url URL to fetch\n   * @param data Data to send\n   * @param options Fetch options\n   * @returns Response data or null on error\n   */\n  const post = useCallback(async <T,>(url: string, data: any, options?: RequestInit): Promise<T | null> => {\n    const wrappedFn = withErrorHandling(async () => {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        ...options,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Request failed with status ${response.status}`);\n      }\n      \n      return response.json();\n    });\n    \n    return await wrappedFn();\n  }, [withErrorHandling]);\n\n  /**\n   * Send a message to Chrome extension (placeholder)\n   * @param message Message to send\n   * @returns Response data or null on error\n   */\n  const sendExtensionMessage = useCallback(async <T,>(_message: any): Promise<T | null> => {\n    console.log('Extension messaging not implemented');\n    return null;\n  }, []);\n\n  /**\n   * Get data from Chrome storage (placeholder)\n   * @param key Storage key\n   * @returns Storage data or null on error\n   */\n  const getExtensionStorage = useCallback(async <T,>(_key: string): Promise<T | null> => {\n    console.log('Extension storage not implemented');\n    return null;\n  }, []);\n\n  return {\n    get,\n    post,\n    sendExtensionMessage,\n    getExtensionStorage,\n    error,\n    hasError,\n    handleError,\n    resetError\n  };\n};\n\nexport default useApiRequest;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useErrorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[400,403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[400,403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"fix":{"range":[3264,3511],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"fix":{"range":[4009,4065],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5760,5763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5760,5763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo } from 'react';\n\ntype ErrorType = 'api' | 'network' | 'validation' | 'authentication' | 'unknown';\ntype ErrorSeverity = 'low' | 'medium' | 'high' | 'critical';\n\ninterface ErrorHandlerOptions {\n  retryCount?: number;\n  retryDelay?: number;\n  onRetry?: (error: Error, attempt: number) => void;\n  onFallback?: (error: Error) => void;\n  fallbackValue?: any;\n  logToServer?: boolean;\n  showToUser?: boolean;\n}\n\ninterface ErrorState {\n  hasError: boolean;\n  error: Error | null;\n  errorType: ErrorType;\n  severity: ErrorSeverity;\n  retryAttempt: number;\n  lastErrorTime: number;\n}\n\nconst DEFAULT_OPTIONS: ErrorHandlerOptions = {\n  retryCount: 3,\n  retryDelay: 1000,\n  logToServer: true,\n  showToUser: true\n};\n\nexport const useErrorHandler = (options: ErrorHandlerOptions = {}) => {\n  const config = useMemo(() => ({ ...DEFAULT_OPTIONS, ...options }), [options]);\n  \n  const [errorState, setErrorState] = useState<ErrorState>({\n    hasError: false,\n    error: null,\n    errorType: 'unknown',\n    severity: 'low',\n    retryAttempt: 0,\n    lastErrorTime: 0\n  });\n  \n  // Reset error state\n  const resetError = useCallback(() => {\n    setErrorState({\n      hasError: false,\n      error: null,\n      errorType: 'unknown',\n      severity: 'low',\n      retryAttempt: 0,\n      lastErrorTime: 0\n    });\n  }, []);\n  \n  // Determine error type from error object\n  const determineErrorType = useCallback((error: Error): ErrorType => {\n    const message = error.message.toLowerCase();\n    \n    if (error.name === 'ApiError' || message.includes('api') || message.includes('endpoint')) {\n      return 'api';\n    }\n    \n    if (error.name === 'NetworkError' || \n        message.includes('network') || \n        message.includes('connection') ||\n        message.includes('offline') ||\n        message.includes('timeout')) {\n      return 'network';\n    }\n    \n    if (error.name === 'ValidationError' || message.includes('validation') || message.includes('invalid')) {\n      return 'validation';\n    }\n    \n    if (error.name === 'AuthenticationError' || \n        message.includes('auth') || \n        message.includes('permission') ||\n        message.includes('token') ||\n        message.includes('unauthorized')) {\n      return 'authentication';\n    }\n    \n    return 'unknown';\n  }, []);\n  \n  // Determine error severity\n  const determineErrorSeverity = useCallback((error: Error, type: ErrorType): ErrorSeverity => {\n    const message = error.message.toLowerCase();\n    \n    // Critical errors\n    if (message.includes('critical') || \n        message.includes('fatal') ||\n        message.includes('crash')) {\n      return 'critical';\n    }\n    \n    // High severity errors\n    if (type === 'authentication' || \n        message.includes('security') ||\n        message.includes('data loss')) {\n      return 'high';\n    }\n    \n    // Medium severity errors\n    if (type === 'api' || \n        type === 'network' ||\n        message.includes('timeout')) {\n      return 'medium';\n    }\n    \n    // Default to low severity\n    return 'low';\n  }, []);\n  \n  // Log error to server\n  const logErrorToServer = useCallback((error: Error, type: ErrorType, severity: ErrorSeverity) => {\n    // In production, this would send to a logging service\n    console.error('Error logged to server:', {\n      message: error.message,\n      stack: error.stack,\n      type,\n      severity,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href\n    });\n    \n    // Store in localStorage for diagnostics\n    try {\n      const errorLog = JSON.parse(localStorage.getItem('errorLog') || '[]');\n      errorLog.push({\n        message: error.message,\n        type,\n        severity,\n        timestamp: new Date().toISOString(),\n        url: window.location.href\n      });\n      \n      // Keep only the last 20 errors\n      if (errorLog.length > 20) errorLog.shift();\n      localStorage.setItem('errorLog', JSON.stringify(errorLog));\n    } catch (e) {\n      console.error('Failed to log error to localStorage', e);\n    }\n  }, []);\n  \n  // Handle error with retry logic\n  const handleError = useCallback((error: Error) => {\n    const errorType = determineErrorType(error);\n    const severity = determineErrorSeverity(error, errorType);\n    const now = Date.now();\n    \n    setErrorState(prev => {\n      const newState = {\n        hasError: true,\n        error,\n        errorType,\n        severity,\n        retryAttempt: prev.retryAttempt + 1,\n        lastErrorTime: now\n      };\n      \n      // Log error if configured\n      if (config.logToServer) {\n        logErrorToServer(error, errorType, severity);\n      }\n      \n      // Check if we should retry\n      if (newState.retryAttempt <= (config.retryCount || 0) && \n          (errorType === 'network' || errorType === 'api')) {\n        \n        // Schedule retry\n        setTimeout(() => {\n          if (config.onRetry) {\n            config.onRetry(error, newState.retryAttempt);\n          }\n          \n          // Only reset error state if it's the same error\n          setErrorState(current => {\n            if (current.error === error) {\n              return {\n                ...current,\n                hasError: false\n              };\n            }\n            return current;\n          });\n        }, (config.retryDelay || 1000) * Math.pow(2, newState.retryAttempt - 1)); // Exponential backoff\n      } else if (config.onFallback) {\n        // Use fallback if available\n        config.onFallback(error);\n      }\n      \n      return newState;\n    });\n  }, [\n    config, \n    determineErrorType, \n    determineErrorSeverity, \n    logErrorToServer\n  ]);\n  \n  // Wrap async function with error handling\n  const withErrorHandling = useCallback(<T extends any[], R>(\n    fn: (...args: T) => Promise<R>,\n    options: ErrorHandlerOptions = {}\n  ) => {\n    const handlerOptions = { ...config, ...options };\n    \n    return async (...args: T): Promise<R> => {\n      try {\n        return await fn(...args);\n      } catch (error) {\n        handleError(error instanceof Error ? error : new Error(String(error)));\n        \n        if (handlerOptions.fallbackValue !== undefined) {\n          return handlerOptions.fallbackValue as R;\n        }\n        \n        throw error;\n      }\n    };\n  }, [config, handleError]);\n  \n  // Effect to clear error after some time for non-critical errors\n  useEffect(() => {\n    if (errorState.hasError && \n        errorState.severity !== 'critical' && \n        errorState.severity !== 'high') {\n      const timeout = setTimeout(() => {\n        resetError();\n      }, 10000); // Auto-clear after 10 seconds for low/medium severity\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [errorState.hasError, errorState.severity, resetError]);\n  \n  return {\n    error: errorState.error,\n    errorType: errorState.errorType,\n    severity: errorState.severity,\n    hasError: errorState.hasError,\n    retryAttempt: errorState.retryAttempt,\n    handleError,\n    resetError,\n    withErrorHandling\n  };\n};\n\nexport default useErrorHandler;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useErrorRecovery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useFutures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useFuturesTrading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useMockMode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/usePageVisibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/usePoloniexData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[511,514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[511,514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1855,1858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1855,1858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"fix":{"range":[2212,2308],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2410,2413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2410,2413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":20,"suggestions":[{"fix":{"range":[2956,3053],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":21,"suggestions":[{"fix":{"range":[3604,3661],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":21,"suggestions":[{"fix":{"range":[3854,3928],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"fix":{"range":[4555,4615],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":21,"suggestions":[{"fix":{"range":[4983,5040],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":21,"suggestions":[{"fix":{"range":[5225,5299],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"fix":{"range":[6029,6084],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":21,"suggestions":[{"fix":{"range":[6442,6500],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":21,"suggestions":[{"fix":{"range":[6893,6968],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":20,"suggestions":[{"fix":{"range":[7427,7491],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":19,"suggestions":[{"fix":{"range":[7980,8043],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":21,"suggestions":[{"fix":{"range":[8804,8885],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":21,"suggestions":[{"fix":{"range":[9499,9578],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":296,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":296,"endColumn":21,"suggestions":[{"fix":{"range":[9861,9949],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":23,"suggestions":[{"fix":{"range":[10322,10363],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":25,"suggestions":[{"fix":{"range":[10738,10775],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":22,"suggestions":[{"fix":{"range":[10981,11079],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { poloniexApi } from '@/services/poloniexAPI';\nimport { MarketData, Trade } from '@/types';\nimport { webSocketService } from '@/services/websocketService';\nimport { mockMarketData, mockTrades } from '@/data/mockData';\nimport { useSettings } from '@/hooks/useSettings';\nimport { shouldUseMockMode, IS_WEBCONTAINER } from '@/utils/environment';\n\ninterface PoloniexDataHook {\n  marketData: MarketData[];\n  trades: Trade[];\n  accountBalance: any;\n  isLoading: boolean;\n  error: Error | null;\n  isMockMode: boolean;\n  fetchMarketData: (pair: string) => Promise<void>;\n  fetchTrades: (pair: string) => Promise<void>;\n  fetchAccountBalance: () => Promise<void>;\n  refreshApiConnection: () => void;\n}\n\nexport const usePoloniexData = (initialPair: string = 'BTC-USDT'): PoloniexDataHook => {\n  const { apiKey, apiSecret, isLiveTrading } = useSettings();\n  const [marketData, setMarketData] = useState<MarketData[]>(mockMarketData);\n  const [trades, setTrades] = useState<Trade[]>(mockTrades);\n  const [accountBalance, setAccountBalance] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n  \n  // Determine mock mode based on environment and credentials\n  const hasCredentials = Boolean(apiKey && apiSecret);\n  const [isMockMode, setIsMockMode] = useState<boolean>(shouldUseMockMode(hasCredentials));\n\n  // Create refs to hold latest function references to avoid dependency issues\n  const fetchFunctionsRef = useRef<{\n    fetchMarketData: (pair: string) => Promise<void>;\n    fetchTrades: (pair: string) => Promise<void>;\n    fetchAccountBalance: () => Promise<void>;\n  }>();\n\n  // Helper function to map Poloniex data to MarketData format\n  \n  const mapPoloniexDataToMarketData = useCallback((data: any[]): MarketData[] => {\n    try {\n      return data.map(item => ({\n        pair: initialPair,\n        timestamp: new Date(item[0]).getTime(),\n        open: parseFloat(item[1]),\n        high: parseFloat(item[2]),\n        low: parseFloat(item[3]),\n        close: parseFloat(item[4]),\n        volume: parseFloat(item[5])\n      }));\n    } catch (err) {\n      console.error('Error mapping Poloniex data:', err instanceof Error ? err.message : String(err));\n      return [];\n    }\n  }, [initialPair]);\n  \n  const mapPoloniexTradeToTrade = useCallback((trade: any): Trade => {\n    try {\n      return {\n        id: trade.id || `generated-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        pair: initialPair,\n        timestamp: new Date(trade.createdAt).getTime(),\n        type: trade.takerSide === 'buy' ? 'BUY' : 'SELL',\n        price: parseFloat(trade.price),\n        amount: parseFloat(trade.quantity),\n        total: parseFloat(trade.price) * parseFloat(trade.quantity),\n        strategyId: '', // Not available from API\n        status: 'COMPLETED'\n      };\n    } catch (err) {\n      console.error('Error mapping Poloniex trade:', err instanceof Error ? err.message : String(err));\n      return {\n        id: `error-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        pair: initialPair,\n        timestamp: Date.now(),\n        type: 'BUY',\n        price: 0,\n        amount: 0,\n        total: 0,\n        strategyId: '',\n        status: 'FAILED'\n      };\n    }\n  }, [initialPair]);\n\n  // Fetch functions defined before refreshApiConnection\n  const fetchMarketData = useCallback(async (pair: string) => {\n    // If in mock mode, use mock data immediately\n    if (isMockMode) {\n      if (import.meta.env.DEV) {\n        console.info('Mock mode active, using mock market data');\n      }\n      setMarketData(mockMarketData);\n      return;\n    }\n    \n    // In WebContainer, use mock data for development\n    if (IS_WEBCONTAINER) {\n      if (import.meta.env.DEV) {\n        console.info('WebContainer environment detected, using mock market data');\n      }\n      setMarketData(mockMarketData);\n      return;\n    }\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const data = await poloniexApi.getMarketData(pair);\n      \n      if (data && Array.isArray(data)) {\n        const formattedData = mapPoloniexDataToMarketData(data);\n        if (formattedData.length > 0) {\n          setMarketData(formattedData);\n        } else {\n          throw new Error('No market data returned from API');\n        }\n      } else {\n        throw new Error('Invalid market data format received from API');\n      }\n    } catch (err) {\n      const error = err as Error;\n      console.error('Error fetching market data:', error.message);\n      setError(error);\n      // Don't fall back to mock data - let the UI handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMockMode, mapPoloniexDataToMarketData]);\n  \n  const fetchTrades = useCallback(async (pair: string) => {\n    // If in mock mode, use mock data immediately  \n    if (isMockMode) {\n      if (import.meta.env.DEV) {\n        console.info('Mock mode active, using mock trades data');\n      }\n      setTrades(mockTrades);\n      return;\n    }\n    \n    // In WebContainer, use mock data for development\n    if (IS_WEBCONTAINER) {\n      if (import.meta.env.DEV) {\n        console.info('WebContainer environment detected, using mock trades data');\n      }\n      setTrades(mockTrades);\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const data = await poloniexApi.getRecentTrades(pair);\n      \n      if (data && Array.isArray(data)) {\n        const formattedTrades = data.map(mapPoloniexTradeToTrade).filter(trade => \n          trade.id.indexOf('error-') !== 0 && !isNaN(trade.price) && !isNaN(trade.amount)\n        );\n        \n        if (formattedTrades.length > 0) {\n          setTrades(formattedTrades);\n        } else {\n          throw new Error('No valid trades returned from API');\n        }\n      } else {\n        throw new Error('Invalid trades data format received from API');\n      }\n    } catch (err) {\n      const error = err as Error;\n      console.error('Error fetching trades:', error.message);\n      setError(error);\n      // Don't fall back to mock data - let the UI handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMockMode, mapPoloniexTradeToTrade]);\n  \n  const fetchAccountBalance = useCallback(async () => {\n    // If in mock mode, use mock data immediately\n    if (isMockMode) {\n      if (import.meta.env.DEV) {\n        console.info('Mock mode active, using mock account data');\n      }\n      setAccountBalance({\n        totalAmount: \"15478.23\",\n        availableAmount: \"12345.67\",\n        accountEquity: \"15820.45\",\n        unrealizedPnL: \"342.22\",\n        todayPnL: \"156.78\",\n        todayPnLPercentage: \"1.02\"\n      });\n      return;\n    }\n    \n    // In WebContainer, use mock data for development\n    if (IS_WEBCONTAINER) {\n      if (import.meta.env.DEV) {\n        console.info('WebContainer environment detected, using mock account data');\n      }\n      setAccountBalance({\n        totalAmount: \"15478.23\",\n        availableAmount: \"12345.67\",\n        accountEquity: \"15820.45\",\n        unrealizedPnL: \"342.22\",\n        todayPnL: \"156.78\",\n        todayPnLPercentage: \"1.02\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const data = await poloniexApi.getAccountBalance();\n      setAccountBalance(data);\n    } catch (err) {\n      const error = err as Error;\n      console.error('Error fetching account balance:', error.message);\n      setError(error);\n      // Don't fall back to mock data - let the UI handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMockMode]);\n\n  // Update function refs to latest versions\n  fetchFunctionsRef.current = {\n    fetchMarketData,\n    fetchTrades,\n    fetchAccountBalance\n  };\n\n  // Function to refresh API connection when settings change - defined after all dependencies\n  const refreshApiConnection = useCallback(() => {\n    if (import.meta.env.DEV) {\n      console.info('Refreshing API connection with new credentials');\n    }\n    setIsLoading(true);\n    poloniexApi.loadCredentials();\n    \n    // Clear any existing errors\n    setError(null);\n    \n    // Refresh data with new credentials\n    Promise.all([\n      fetchMarketData(initialPair),\n      fetchTrades(initialPair),\n      fetchAccountBalance()\n    ]).finally(() => {\n      setIsLoading(false);\n    });\n  }, [initialPair, fetchMarketData, fetchTrades, fetchAccountBalance]);\n\n  // Update mock mode when credentials change\n  useEffect(() => {\n    const newHasCredentials = Boolean(apiKey && apiSecret);\n    const newMockMode = shouldUseMockMode(newHasCredentials) || !isLiveTrading;\n    setIsMockMode(newMockMode);\n    \n    if (isLiveTrading && newHasCredentials && !newMockMode) {\n      if (import.meta.env.DEV) {\n        console.info('Live trading enabled with credentials, refreshing API connection');\n      }\n      poloniexApi.loadCredentials();\n      \n      // Manually trigger data refresh without causing dependency loop\n      setIsLoading(true);\n      setError(null);\n      \n      // Use the ref functions to avoid dependency loop\n      if (fetchFunctionsRef.current) {\n        Promise.all([\n          fetchFunctionsRef.current.fetchMarketData(initialPair),\n          fetchFunctionsRef.current.fetchTrades(initialPair),\n          fetchFunctionsRef.current.fetchAccountBalance()\n        ]).finally(() => {\n          setIsLoading(false);\n        });\n      }\n    } else {\n      if (import.meta.env.DEV) {\n        console.info('Using mock mode - live trading disabled or missing credentials');\n      }\n    }\n  }, [isLiveTrading, apiKey, apiSecret, initialPair]);\n\n  // Handle real-time updates via WebSocket\n  useEffect(() => {\n    // In WebContainer, skip WebSocket connection and use mock data immediately\n    if (IS_WEBCONTAINER) {\n      if (import.meta.env.DEV) {\n        console.info('WebContainer environment detected, using mock data instead of WebSocket');\n      }\n      setIsMockMode(true);\n      setMarketData(mockMarketData);\n      setTrades(mockTrades);\n      \n      // Skip the rest of the WebSocket setup\n      return () => {}; // Empty cleanup function\n    }\n    \n    // Connect to WebSocket for non-WebContainer environments\n    webSocketService.connect()\n      .then(() => {\n        if (import.meta.env.DEV) {\n          console.info('WebSocket setup complete');\n        }\n        \n        // Check if we're in mock mode from the WebSocket service\n        setIsMockMode(webSocketService.isMockMode());\n        \n        // Only subscribe if connection was successful\n        if (webSocketService.isConnected()) {\n          webSocketService.subscribeToMarket(initialPair);\n        } else {\n          if (import.meta.env.DEV) {\n            console.info('Using mock data mode');\n          }\n          // Initialize with mock data if WebSocket connection failed\n          setMarketData(mockMarketData);\n          setTrades(mockTrades);\n        }\n      })\n      .catch(err => {\n        console.error('Error connecting to WebSocket:', err instanceof Error ? err.message : String(err));\n        setIsMockMode(true);\n        setMarketData(mockMarketData);\n        setTrades(mockTrades);\n      });\n    \n    // Listen for market data updates\n    const handleMarketDataUpdate = (data: MarketData) => {\n      if (data.pair === initialPair) {\n        setMarketData(prevData => {\n          // Find if this timestamp already exists\n          const existingIndex = prevData.findIndex(item => item.timestamp === data.timestamp);\n          \n          if (existingIndex >= 0) {\n            // Update existing data\n            const updatedData = [...prevData];\n            updatedData[existingIndex] = data;\n            return updatedData;\n          } else {\n            // Add new data and maintain order\n            const newData = [...prevData, data];\n            return newData.sort((a, b) => a.timestamp - b.timestamp);\n          }\n        });\n      }\n    };\n    \n    // Listen for trade updates\n    const handleTradeUpdate = (trade: Trade) => {\n      if (trade.pair === initialPair) {\n        setTrades(prevTrades => {\n          // Check if trade already exists\n          if (!prevTrades.some(t => t.id === trade.id)) {\n            return [trade, ...prevTrades].slice(0, 50); // Keep last 50 trades\n          }\n          return prevTrades;\n        });\n      }\n    };\n    \n    webSocketService.on('marketData', handleMarketDataUpdate);\n    webSocketService.on('tradeExecuted', handleTradeUpdate);\n    \n    // Initial data fetch with small delay to avoid overwhelming the browser\n    setTimeout(() => {\n      if (fetchFunctionsRef.current) {\n        fetchFunctionsRef.current.fetchMarketData(initialPair);\n        setTimeout(() => {\n          if (fetchFunctionsRef.current) {\n            fetchFunctionsRef.current.fetchTrades(initialPair);\n            setTimeout(() => {\n              if (fetchFunctionsRef.current) {\n                fetchFunctionsRef.current.fetchAccountBalance();\n              }\n            }, 500);\n          }\n        }, 500);\n      }\n    }, 500);\n    \n    // Cleanup\n    return () => {\n      webSocketService.off('marketData', handleMarketDataUpdate);\n      webSocketService.off('tradeExecuted', handleTradeUpdate);\n      if (webSocketService.isConnected()) {\n        webSocketService.unsubscribeFromMarket(initialPair);\n      }\n    };\n  }, [initialPair]);\n  \n  return {\n    marketData,\n    trades,\n    accountBalance,\n    isLoading,\n    error,\n    isMockMode,\n    fetchMarketData,\n    fetchTrades,\n    fetchAccountBalance,\n    refreshApiConnection\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useResponsiveNav.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useTradingContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/hooks/useWebSocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/ml/aiSignalGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/ml/dqnTrading.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2794,2797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2794,2797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3077,3080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3077,3080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8133,8136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8133,8136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8437,8440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8437,8440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":466,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14569,14572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14569,14572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":20,"suggestions":[{"fix":{"range":[16033,16120],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":536,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":536,"endColumn":20,"suggestions":[{"fix":{"range":[16655,16712],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":575,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":575,"endColumn":20,"suggestions":[{"fix":{"range":[17997,18046],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":580,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":580,"endColumn":18,"suggestions":[{"fix":{"range":[18104,18154],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":588,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18301,18304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18301,18304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":636,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":636,"endColumn":20,"suggestions":[{"fix":{"range":[19711,19829],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":681,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":681,"endColumn":20,"suggestions":[{"fix":{"range":[21520,21569],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":686,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":686,"endColumn":18,"suggestions":[{"fix":{"range":[21630,21691],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":694,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":694,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21838,21841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21838,21841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":754,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":754,"endColumn":18,"suggestions":[{"fix":{"range":[23281,23332],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as tf from '@tensorflow/tfjs';\n\n/**\n * Deep Q-Network (DQN) Trading System\n * \n * This module implements a reinforcement learning based trading system using Deep Q-Networks.\n * It includes environment simulation, model training, experience replay, and trading execution.\n */\n\n// Types for DQN trading\nexport interface DQNConfig {\n  stateDimension: number;\n  actionDimension: number;\n  learningRate: number;\n  gamma: number;\n  epsilonStart: number;\n  epsilonEnd: number;\n  epsilonDecay: number;\n  memorySize: number;\n  batchSize: number;\n  updateTargetFreq: number;\n  hiddenLayers: number[];\n  activationFunction: string;\n  optimizer: string;\n}\n\nexport interface DQNModelInfo {\n  id: string;\n  name: string;\n  description: string;\n  config: DQNConfig;\n  performance: DQNPerformance;\n  createdAt: number;\n  updatedAt: number;\n  lastTrainedAt: number;\n  status: 'training' | 'ready' | 'error';\n  filePath?: string;\n  episodesCompleted: number;\n  totalTrainingSteps: number;\n}\n\nexport interface DQNPerformance {\n  averageReward: number;\n  cumulativeReward: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  winRate: number;\n  episodeRewards: number[];\n  trainingEpisodes: number;\n}\n\nexport interface DQNAction {\n  timestamp: number;\n  symbol: string;\n  action: 'buy' | 'sell' | 'hold';\n  confidence: number;\n  position?: number;\n  price?: number;\n}\n\n// Default DQN configuration\nconst defaultDQNConfig: DQNConfig = {\n  stateDimension: 30,  // Number of features in state\n  actionDimension: 3,  // Buy, Sell, Hold\n  learningRate: 0.0001,\n  gamma: 0.99,         // Discount factor\n  epsilonStart: 1.0,   // Initial exploration rate\n  epsilonEnd: 0.01,    // Final exploration rate\n  epsilonDecay: 0.995, // Exploration decay rate\n  memorySize: 10000,   // Experience replay buffer size\n  batchSize: 64,       // Training batch size\n  updateTargetFreq: 100, // Target network update frequency\n  hiddenLayers: [128, 64], // Hidden layer sizes\n  activationFunction: 'relu',\n  optimizer: 'adam'\n};\n\n// DQN Agent class\nclass DQNAgent {\n  private config: DQNConfig;\n  private mainModel: tf.LayersModel;\n  private targetModel: tf.LayersModel;\n  private memory: Array<[number[], number, number, number[], boolean]>;\n  private epsilon: number;\n  private step: number;\n  \n  constructor(config: DQNConfig) {\n    this.config = config;\n    this.mainModel = this.createModel();\n    this.targetModel = this.createModel();\n    this.updateTargetModel();\n    this.memory = [];\n    this.epsilon = config.epsilonStart;\n    this.step = 0;\n  }\n  \n  // Create neural network model\n  private createModel(): tf.LayersModel {\n    const model = tf.sequential();\n    \n    // Input layer\n    model.add(tf.layers.dense({\n      units: this.config.hiddenLayers[0],\n      activation: this.config.activationFunction as any,\n      inputShape: [this.config.stateDimension]\n    }));\n    \n    // Hidden layers\n    for (let i = 1; i < this.config.hiddenLayers.length; i++) {\n      model.add(tf.layers.dense({\n        units: this.config.hiddenLayers[i],\n        activation: this.config.activationFunction as any\n      }));\n    }\n    \n    // Output layer\n    model.add(tf.layers.dense({\n      units: this.config.actionDimension,\n      activation: 'linear'\n    }));\n    \n    // Compile model\n    model.compile({\n      optimizer: this.config.optimizer === 'adam' ? tf.train.adam(this.config.learningRate) : tf.train.sgd(this.config.learningRate),\n      loss: 'meanSquaredError'\n    });\n    \n    return model;\n  }\n  \n  // Update target model with weights from main model\n  private updateTargetModel(): void {\n    const weights = this.mainModel.getWeights();\n    this.targetModel.setWeights(weights);\n  }\n  \n  // Remember experience for replay\n  remember(state: number[], action: number, reward: number, nextState: number[], done: boolean): void {\n    this.memory.push([state, action, reward, nextState, done]);\n    if (this.memory.length > this.config.memorySize) {\n      this.memory.shift();\n    }\n  }\n  \n  // Choose action using epsilon-greedy policy\n  chooseAction(state: number[]): number {\n    if (Math.random() < this.epsilon) {\n      // Exploration: random action\n      return Math.floor(Math.random() * this.config.actionDimension);\n    } else {\n      // Exploitation: best action according to model\n      return tf.tidy(() => {\n        const stateTensor = tf.tensor2d([state]);\n        const prediction = this.mainModel.predict(stateTensor) as tf.Tensor;\n        const action = tf.argMax(prediction, 1).dataSync()[0];\n        return action;\n      });\n    }\n  }\n  \n  // Get action confidence\n  getActionConfidence(state: number[], action: number): number {\n    return tf.tidy(() => {\n      const stateTensor = tf.tensor2d([state]);\n      const prediction = this.mainModel.predict(stateTensor) as tf.Tensor;\n      const qValues = prediction.dataSync();\n      const maxQ = Math.max(...qValues);\n      const actionQ = qValues[action];\n      \n      // Normalize to [0, 1] range\n      return actionQ / (maxQ + 1e-8);\n    });\n  }\n  \n  // Train model with experience replay\n  async replay(): Promise<void> {\n    if (this.memory.length < this.config.batchSize) {\n      return;\n    }\n    \n    // Sample batch from memory\n    const batch = this.sampleBatch();\n    \n    // Extract batch components\n    const states = batch.map(experience => experience[0]);\n    const actions = batch.map(experience => experience[1]);\n    const rewards = batch.map(experience => experience[2]);\n    const nextStates = batch.map(experience => experience[3]);\n    const dones = batch.map(experience => experience[4]);\n    \n    // Train the model\n    await tf.tidy(() => {\n      // Convert to tensors\n      const statesTensor = tf.tensor2d(states);\n      const nextStatesTensor = tf.tensor2d(nextStates);\n      \n      // Get current Q values\n      const currentQs = this.mainModel.predict(statesTensor) as tf.Tensor;\n      const currentQsArray = currentQs.arraySync() as number[][];\n      \n      // Get next Q values from target model\n      const nextQs = this.targetModel.predict(nextStatesTensor) as tf.Tensor;\n      const nextQsArray = nextQs.arraySync() as number[][];\n      \n      // Create target Q values by updating only the chosen actions\n      const targetQsArray = [...currentQsArray];\n      \n      for (let i = 0; i < batch.length; i++) {\n        const action = actions[i];\n        const reward = rewards[i];\n        const done = dones[i];\n        \n        let targetQ;\n        if (done) {\n          targetQ = reward;\n        } else {\n          const nextQ = nextQsArray[i];\n          const maxNextQ = Math.max(...nextQ);\n          targetQ = reward + this.config.gamma * maxNextQ;\n        }\n        \n        targetQsArray[i][action] = targetQ;\n      }\n      \n      const targetQsTensor = tf.tensor2d(targetQsArray);\n      \n      // Train the model\n      return this.mainModel.fit(statesTensor, targetQsTensor, {\n        epochs: 1,\n        verbose: 0\n      });\n    });\n    \n    // Update epsilon (exploration rate)\n    if (this.epsilon > this.config.epsilonEnd) {\n      this.epsilon *= this.config.epsilonDecay;\n    }\n    \n    // Update target model periodically\n    this.step++;\n    if (this.step % this.config.updateTargetFreq === 0) {\n      this.updateTargetModel();\n    }\n  }\n  \n  // Sample batch from memory\n  private sampleBatch(): Array<[number[], number, number, number[], boolean]> {\n    const indices: number[] = [];\n    const batchSize = Math.min(this.config.batchSize, this.memory.length);\n    \n    while (indices.length < batchSize) {\n      const index = Math.floor(Math.random() * this.memory.length);\n      if (!indices.includes(index)) {\n        indices.push(index);\n      }\n    }\n    \n    return indices.map(index => this.memory[index]);\n  }\n  \n  // Save model\n  async saveModel(path: string): Promise<void> {\n    await this.mainModel.save(`file://${path}`);\n  }\n  \n  // Load model\n  async loadModel(path: string): Promise<void> {\n    this.mainModel = await tf.loadLayersModel(`file://${path}/model.json`);\n    this.targetModel = await tf.loadLayersModel(`file://${path}/model.json`);\n  }\n}\n\n// Trading environment class\nclass TradingEnvironment {\n  private data: any[];\n  private currentStep: number;\n  private position: number;\n  private initialBalance: number;\n  private balance: number;\n  private inventory: number[];\n  private rewards: number[];\n  private done: boolean;\n  private stateDimension: number;\n  private transactionCost: number;\n  \n  constructor(data: any[], initialBalance: number = 10000, transactionCost: number = 0.001) {\n    this.data = data;\n    this.initialBalance = initialBalance;\n    this.transactionCost = transactionCost;\n    this.stateDimension = 30; // Default state dimension\n    this.reset();\n  }\n  \n  reset(): number[] {\n    this.currentStep = 0;\n    this.position = 0; // 0: no position, 1: long position\n    this.balance = this.initialBalance;\n    this.inventory = [];\n    this.rewards = [];\n    this.done = false;\n    return this.getState();\n  }\n  \n  getState(): number[] {\n    // If we've reached the end of data\n    if (this.currentStep >= this.data.length - 1) {\n      this.done = true;\n      return new Array(this.stateDimension).fill(0);\n    }\n    \n    // Get current candle and previous candles\n    const currentCandle = this.data[this.currentStep];\n    const lookback = 10; // Use 10 previous candles for state\n    const historyStart = Math.max(0, this.currentStep - lookback);\n    const priceHistory = this.data.slice(historyStart, this.currentStep + 1);\n    \n    // Extract features\n    const state: number[] = [];\n    \n    // Position indicator\n    state.push(this.position);\n    \n    // Price features\n    const currentPrice = currentCandle.close;\n    const normalizedPrices = priceHistory.map(candle => candle.close / currentPrice - 1);\n    state.push(...normalizedPrices);\n    \n    // Volume features\n    const avgVolume = priceHistory.reduce((sum, candle) => sum + candle.volume, 0) / priceHistory.length;\n    const normalizedVolumes = priceHistory.map(candle => candle.volume / avgVolume);\n    state.push(...normalizedVolumes);\n    \n    // Candlestick features\n    const bodySizes = priceHistory.map(candle => Math.abs(candle.close - candle.open) / candle.open);\n    state.push(...bodySizes);\n    \n    // Pad state to fixed dimension if needed\n    while (state.length < this.stateDimension) {\n      state.push(0);\n    }\n    \n    // Truncate if too long\n    return state.slice(0, this.stateDimension);\n  }\n  \n  step(action: number): [number[], number, boolean] {\n    // If already done, return terminal state\n    if (this.done) {\n      return [new Array(this.stateDimension).fill(0), 0, true];\n    }\n    \n    // Get current price\n    const currentPrice = this.data[this.currentStep].close;\n    let reward = 0;\n    \n    // Execute action\n    if (action === 0) { // Buy\n      if (this.position === 0) { // Only buy if no position\n        const sharesBought = Math.floor(this.balance / currentPrice);\n        const cost = sharesBought * currentPrice * (1 + this.transactionCost);\n        \n        if (sharesBought > 0) {\n          this.balance -= cost;\n          this.inventory.push(currentPrice);\n          this.position = 1;\n          reward = -this.transactionCost * cost; // Small negative reward for transaction cost\n        } else {\n          reward = -0.1; // Penalty for invalid action\n        }\n      } else {\n        reward = -0.1; // Penalty for invalid action\n      }\n    } else if (action === 1) { // Sell\n      if (this.position === 1) { // Only sell if has position\n        const sharesSold = this.inventory.length;\n        const revenue = sharesSold * currentPrice * (1 - this.transactionCost);\n        \n        if (sharesSold > 0) {\n          this.balance += revenue;\n          const avgBuyPrice = this.inventory.reduce((sum, price) => sum + price, 0) / sharesSold;\n          reward = (currentPrice - avgBuyPrice) / avgBuyPrice; // Reward based on profit percentage\n          this.inventory = [];\n          this.position = 0;\n        } else {\n          reward = -0.1; // Penalty for invalid action\n        }\n      } else {\n        reward = -0.1; // Penalty for invalid action\n      }\n    } else { // Hold\n      if (this.position === 1) {\n        // Small reward/penalty based on price movement while holding\n        const prevPrice = this.data[Math.max(0, this.currentStep - 1)].close;\n        reward = (currentPrice - prevPrice) / prevPrice * 0.1;\n      } else {\n        reward = 0; // Neutral reward for holding cash\n      }\n    }\n    \n    // Move to next step\n    this.currentStep++;\n    this.rewards.push(reward);\n    \n    // Check if episode is done\n    if (this.currentStep >= this.data.length - 1) {\n      this.done = true;\n      \n      // Add final portfolio value to reward\n      const finalPortfolioValue = this.balance + (this.inventory.length * this.data[this.currentStep].close);\n      const totalReturn = (finalPortfolioValue - this.initialBalance) / this.initialBalance;\n      reward += totalReturn;\n    }\n    \n    return [this.getState(), reward, this.done];\n  }\n  \n  getPerformance(): {\n    totalReturn: number;\n    finalValue: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    cumulativeReward: number;\n  } {\n    const finalPortfolioValue = this.balance + (this.inventory.length * this.data[this.currentStep].close);\n    const totalReturn = (finalPortfolioValue - this.initialBalance) / this.initialBalance;\n    \n    // Calculate Sharpe ratio\n    const returns = this.rewards.filter(r => r !== 0);\n    const meanReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdReturn = Math.sqrt(returns.reduce((sum, r) => sum + Math.pow(r - meanReturn, 2), 0) / returns.length);\n    const sharpeRatio = meanReturn / (stdReturn + 1e-8);\n    \n    // Calculate max drawdown\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    let cumulativeReward = 0;\n    \n    for (const reward of this.rewards) {\n      cumulativeReward += reward;\n      if (cumulativeReward > peak) {\n        peak = cumulativeReward;\n      }\n      const drawdown = (peak - cumulativeReward) / (peak + 1e-8);\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n    \n    // Calculate win rate\n    const trades = this.rewards.filter(r => r !== 0);\n    const winningTrades = trades.filter(r => r > 0);\n    const winRate = winningTrades.length / (trades.length + 1e-8);\n    \n    return {\n      totalReturn,\n      finalValue: finalPortfolioValue,\n      sharpeRatio,\n      maxDrawdown,\n      winRate,\n      cumulativeReward\n    };\n  }\n}\n\n// Train DQN model\nexport const trainDQNModel = async (\n  data: any[],\n  config: Partial<DQNConfig> = {},\n  modelName: string = 'DQN Trading Model',\n  episodes: number = 100\n): Promise<DQNModelInfo> => {\n  try {\n    // Merge with default config\n    const fullConfig: DQNConfig = { ...defaultDQNConfig, ...config };\n    \n    // Create environment and agent\n    const env = new TradingEnvironment(data);\n    const agent = new DQNAgent(fullConfig);\n    \n    // Training variables\n    const episodeRewards: number[] = [];\n    let totalSteps = 0;\n    \n    // Train for specified number of episodes\n    for (let episode = 0; episode < episodes; episode++) {\n      let state = env.reset();\n      let done = false;\n      let episodeReward = 0;\n      \n      // Episode loop\n      while (!done) {\n        // Choose action\n        const action = agent.chooseAction(state);\n        \n        // Take action\n        const [nextState, reward, isDone] = env.step(action);\n        \n        // Remember experience\n        agent.remember(state, action, reward, nextState, isDone);\n        \n        // Train model\n        await agent.replay();\n        \n        // Update state and counters\n        state = nextState;\n        done = isDone;\n        episodeReward += reward;\n        totalSteps++;\n      }\n      \n      // Record episode results\n      episodeRewards.push(episodeReward);\n      \n      // Log progress\n      if ((episode + 1) % 10 === 0) {\n        const avgReward = episodeRewards.slice(-10).reduce((sum, r) => sum + r, 0) / 10;\n        console.log(`Episode ${episode + 1}/${episodes}, Avg Reward: ${avgReward.toFixed(2)}`);\n      }\n    }\n    \n    // Get performance metrics\n    const performance = env.getPerformance();\n    \n    // Save model\n    const modelId = `dqn_${Date.now()}`;\n    const modelsDir = './models';\n    \n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        if (!fs.existsSync(modelsDir)) {\n          fs.mkdirSync(modelsDir, { recursive: true });\n        }\n      }\n    } catch (error) {\n      console.error('Error creating models directory:', error);\n    }\n    \n    const modelPath = `${modelsDir}/${modelId}`;\n    await agent.saveModel(modelPath);\n    \n    // Create model info\n    const modelInfo: DQNModelInfo = {\n      id: modelId,\n      name: modelName,\n      description: `DQN trading model trained on ${data.length} candles`,\n      config: fullConfig,\n      performance: {\n        averageReward: episodeRewards.reduce((sum, r) => sum + r, 0) / episodes,\n        cumulativeReward: performance.cumulativeReward,\n        sharpeRatio: performance.sharpeRatio,\n        maxDrawdown: performance.maxDrawdown,\n        winRate: performance.winRate,\n        episodeRewards,\n        trainingEpisodes: episodes\n      },\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      lastTrainedAt: Date.now(),\n      status: 'ready',\n      filePath: modelPath,\n      episodesCompleted: episodes,\n      totalTrainingSteps: totalSteps\n    };\n    \n    // Save model info\n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        const modelInfoPath = `${modelsDir}/${modelId}_info.json`;\n        fs.writeFileSync(modelInfoPath, JSON.stringify(modelInfo, null, 2));\n      }\n    } catch (error) {\n      console.error('Error saving model info:', error);\n    }\n    \n    return modelInfo;\n  } catch (error) {\n    console.error('Error training DQN model:', error);\n    throw error;\n  }\n};\n\n// Continue training an existing DQN model\nexport const continueDQNTraining = async (\n  modelInfo: DQNModelInfo,\n  data: any[],\n  additionalEpisodes: number = 50\n): Promise<DQNModelInfo> => {\n  try {\n    // Create environment and agent\n    const env = new TradingEnvironment(data);\n    const agent = new DQNAgent(modelInfo.config);\n    \n    // Load existing model\n    await agent.loadModel(modelInfo.filePath as string);\n    \n    // Training variables\n    const episodeRewards: number[] = [];\n    let totalSteps = modelInfo.totalTrainingSteps;\n    \n    // Train for additional episodes\n    for (let episode = 0; episode < additionalEpisodes; episode++) {\n      let state = env.reset();\n      let done = false;\n      let episodeReward = 0;\n      \n      // Episode loop\n      while (!done) {\n        // Choose action\n        const action = agent.chooseAction(state);\n        \n        // Take action\n        const [nextState, reward, isDone] = env.step(action);\n        \n        // Remember experience\n        agent.remember(state, action, reward, nextState, isDone);\n        \n        // Train model\n        await agent.replay();\n        \n        // Update state and counters\n        state = nextState;\n        done = isDone;\n        episodeReward += reward;\n        totalSteps++;\n      }\n      \n      // Record episode results\n      episodeRewards.push(episodeReward);\n      \n      // Log progress\n      if ((episode + 1) % 10 === 0) {\n        const avgReward = episodeRewards.slice(-10).reduce((sum, r) => sum + r, 0) / 10;\n        console.log(`Continued Training - Episode ${episode + 1}/${additionalEpisodes}, Avg Reward: ${avgReward.toFixed(2)}`);\n      }\n    }\n    \n    // Get performance metrics\n    const performance = env.getPerformance();\n    \n    // Save model\n    const newModelId = `${modelInfo.id}_continued_${Date.now()}`;\n    const modelsDir = './models';\n    const modelPath = `${modelsDir}/${newModelId}`;\n    await agent.saveModel(modelPath);\n    \n    // Create model info\n    const newModelInfo: DQNModelInfo = {\n      ...modelInfo,\n      id: newModelId,\n      name: `${modelInfo.name} (Continued)`,\n      description: `${modelInfo.description} - Continued training with ${data.length} additional candles`,\n      performance: {\n        averageReward: episodeRewards.reduce((sum, r) => sum + r, 0) / additionalEpisodes,\n        cumulativeReward: performance.cumulativeReward,\n        sharpeRatio: performance.sharpeRatio,\n        maxDrawdown: performance.maxDrawdown,\n        winRate: performance.winRate,\n        episodeRewards: [...modelInfo.performance.episodeRewards, ...episodeRewards],\n        trainingEpisodes: modelInfo.performance.trainingEpisodes + additionalEpisodes\n      },\n      updatedAt: Date.now(),\n      lastTrainedAt: Date.now(),\n      status: 'ready',\n      filePath: modelPath,\n      episodesCompleted: modelInfo.episodesCompleted + additionalEpisodes,\n      totalTrainingSteps: totalSteps\n    };\n    \n    // Save model info\n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        const modelInfoPath = `${modelsDir}/${newModelId}_info.json`;\n        fs.writeFileSync(modelInfoPath, JSON.stringify(newModelInfo, null, 2));\n      }\n    } catch (error) {\n      console.error('Error saving model info:', error);\n    }\n    \n    return newModelInfo;\n  } catch (error) {\n    console.error('Error continuing DQN model training:', error);\n    throw error;\n  }\n};\n\n// Get DQN actions for a sequence of market data\nexport const getDQNActions = async (\n  modelInfo: DQNModelInfo,\n  data: any[]\n): Promise<DQNAction[]> => {\n  try {\n    // Create agent\n    const agent = new DQNAgent(modelInfo.config);\n    \n    // Load model\n    await agent.loadModel(modelInfo.filePath as string);\n    \n    // Create environment\n    const env = new TradingEnvironment(data);\n    \n    // Get actions\n    const actions: DQNAction[] = [];\n    let state = env.reset();\n    let position = 0;\n    \n    for (let i = 0; i < data.length - 1; i++) {\n      // Get action\n      const actionIndex = agent.chooseAction(state);\n      const confidence = agent.getActionConfidence(state, actionIndex);\n      \n      // Map action index to action type\n      let actionType: 'buy' | 'sell' | 'hold';\n      switch (actionIndex) {\n        case 0:\n          actionType = 'buy';\n          position = 1;\n          break;\n        case 1:\n          actionType = 'sell';\n          position = 0;\n          break;\n        default:\n          actionType = 'hold';\n          break;\n      }\n      \n      // Add action to list\n      actions.push({\n        timestamp: data[i].timestamp,\n        symbol: data[i].symbol,\n        action: actionType,\n        confidence,\n        position,\n        price: data[i].close\n      });\n      \n      // Take step in environment\n      const [nextState, , done] = env.step(actionIndex);\n      \n      // Update state\n      state = nextState;\n      \n      // Break if done\n      if (done) break;\n    }\n    \n    return actions;\n  } catch (error) {\n    console.error('Error getting DQN actions:', error);\n    throw error;\n  }\n};\n\nexport default {\n  trainDQNModel,\n  continueDQNTraining,\n  getDQNActions,\n  DQNAgent,\n  TradingEnvironment\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/ml/mlTrading.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[617,620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[617,620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7410,7413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7410,7413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11316,11319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11316,11319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":408,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":408,"endColumn":22,"suggestions":[{"fix":{"range":[12554,12636],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":441,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":441,"endColumn":20,"suggestions":[{"fix":{"range":[13704,13761],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":471,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":471,"endColumn":20,"suggestions":[{"fix":{"range":[14699,14748],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":483,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":483,"endColumn":18,"suggestions":[{"fix":{"range":[14954,15003],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":490,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":490,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15105,15108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15105,15108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":525,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":525,"endColumn":20,"suggestions":[{"fix":{"range":[16303,16354],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":564,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":564,"endColumn":18,"suggestions":[{"fix":{"range":[17419,17483],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":570,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":570,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17556,17559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17556,17559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":669,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":669,"endColumn":18,"suggestions":[{"fix":{"range":[20647,20698],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as tf from '@tensorflow/tfjs';\n\n/**\n * Machine Learning Trading Module\n * \n * This module provides ML-based trading strategies and models for the Poloniex Trading Platform.\n * It includes feature engineering, model training, prediction, and evaluation capabilities.\n */\n\n// Types for ML trading\nexport interface MLModelConfig {\n  modelType: 'randomforest' | 'gradientboosting' | 'svm' | 'neuralnetwork';\n  featureSet: 'basic' | 'technical' | 'advanced' | 'custom';\n  predictionTarget: 'price_direction' | 'price_change' | 'volatility';\n  timeHorizon: number; // in candles\n  hyperParameters?: Record<string, any>;\n  customFeatures?: string[];\n}\n\nexport interface MLModelInfo {\n  id: string;\n  name: string;\n  description: string;\n  config: MLModelConfig;\n  performance: MLModelPerformance;\n  createdAt: number;\n  updatedAt: number;\n  lastTrainedAt: number;\n  status: 'training' | 'ready' | 'error';\n  filePath?: string;\n}\n\nexport interface MLModelPerformance {\n  accuracy: number;\n  precision: number;\n  recall: number;\n  f1Score: number;\n  trainingSamples: number;\n  validationSamples: number;\n  confusionMatrix?: number[][];\n}\n\nexport interface MLPrediction {\n  timestamp: number;\n  symbol: string;\n  prediction: number;\n  confidence: number;\n  features?: Record<string, number>;\n}\n\n// Feature engineering functions\nconst calculateTechnicalIndicators = (data: any[]): Record<string, number[]> => {\n  const features: Record<string, number[]> = {};\n  \n  // Simple Moving Averages\n  features.sma5 = calculateSMA(data.map(d => d.close), 5);\n  features.sma10 = calculateSMA(data.map(d => d.close), 10);\n  features.sma20 = calculateSMA(data.map(d => d.close), 20);\n  \n  // Exponential Moving Averages\n  features.ema5 = calculateEMA(data.map(d => d.close), 5);\n  features.ema10 = calculateEMA(data.map(d => d.close), 10);\n  features.ema20 = calculateEMA(data.map(d => d.close), 20);\n  features.ema12 = calculateEMA(data.map(d => d.close), 12);\n  features.ema26 = calculateEMA(data.map(d => d.close), 26);\n  \n  // MACD\n  features.macd = features.ema12.map((val, i) => val - features.ema26[i]);\n  features.macd_signal = calculateEMA(features.macd, 9);\n  features.macd_hist = features.macd.map((val, i) => val - features.macd_signal[i]);\n  \n  // RSI (Relative Strength Index)\n  features.rsi = calculateRSI(data.map(d => d.close), 14);\n  \n  // Bollinger Bands\n  features.bb_middle = features.sma20;\n  const std20 = calculateStandardDeviation(data.map(d => d.close), 20);\n  features.bb_upper = features.bb_middle.map((val, i) => val + (std20[i] * 2));\n  features.bb_lower = features.bb_middle.map((val, i) => val - (std20[i] * 2));\n  \n  // Price momentum\n  features.momentum5 = calculateMomentum(data.map(d => d.close), 5);\n  features.momentum10 = calculateMomentum(data.map(d => d.close), 10);\n  features.momentum20 = calculateMomentum(data.map(d => d.close), 20);\n  \n  // Volatility\n  features.volatility5 = calculateVolatility(data.map(d => d.close), 5, features.sma5);\n  features.volatility10 = calculateVolatility(data.map(d => d.close), 10, features.sma10);\n  features.volatility20 = calculateVolatility(data.map(d => d.close), 20, features.sma20);\n  \n  // Volume indicators\n  features.volume_sma5 = calculateSMA(data.map(d => d.volume), 5);\n  features.volume_ratio = data.map((d, i) => \n    features.volume_sma5[i] ? d.volume / features.volume_sma5[i] : 1\n  );\n  \n  // Price ratios\n  features.close_to_sma5 = data.map((d, i) => \n    features.sma5[i] ? d.close / features.sma5[i] : 1\n  );\n  features.close_to_sma10 = data.map((d, i) => \n    features.sma10[i] ? d.close / features.sma10[i] : 1\n  );\n  features.close_to_sma20 = data.map((d, i) => \n    features.sma20[i] ? d.close / features.sma20[i] : 1\n  );\n  \n  // Candle patterns\n  features.body_size = data.map(d => (d.close - d.open) / d.open);\n  features.upper_shadow = data.map(d => \n    (d.high - Math.max(d.open, d.close)) / d.open\n  );\n  features.lower_shadow = data.map(d => \n    (Math.min(d.open, d.close) - d.low) / d.open\n  );\n  \n  return features;\n};\n\n// Helper functions for technical indicators\nconst calculateSMA = (data: number[], period: number): number[] => {\n  const result: number[] = [];\n  \n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      result.push(NaN);\n      continue;\n    }\n    \n    let sum = 0;\n    for (let j = 0; j < period; j++) {\n      sum += data[i - j];\n    }\n    result.push(sum / period);\n  }\n  \n  return result;\n};\n\nconst calculateEMA = (data: number[], period: number): number[] => {\n  const result: number[] = [];\n  const multiplier = 2 / (period + 1);\n  \n  // Start with SMA for the first value\n  let ema = 0;\n  let validDataPoints = 0;\n  \n  for (let i = 0; i < period; i++) {\n    if (!isNaN(data[i])) {\n      ema += data[i];\n      validDataPoints++;\n    }\n  }\n  \n  if (validDataPoints > 0) {\n    ema /= validDataPoints;\n  }\n  \n  // Fill initial values with NaN\n  for (let i = 0; i < period - 1; i++) {\n    result.push(NaN);\n  }\n  \n  result.push(ema);\n  \n  // Calculate EMA for the rest\n  for (let i = period; i < data.length; i++) {\n    ema = (data[i] - ema) * multiplier + ema;\n    result.push(ema);\n  }\n  \n  return result;\n};\n\nconst calculateRSI = (data: number[], period: number): number[] => {\n  const result: number[] = [];\n  const gains: number[] = [];\n  const losses: number[] = [];\n  \n  // Calculate price changes\n  for (let i = 1; i < data.length; i++) {\n    const change = data[i] - data[i - 1];\n    gains.push(change > 0 ? change : 0);\n    losses.push(change < 0 ? -change : 0);\n  }\n  \n  // Fill initial values with NaN\n  for (let i = 0; i < period; i++) {\n    result.push(NaN);\n  }\n  \n  // Calculate first average gain and loss\n  let avgGain = gains.slice(0, period).reduce((sum, val) => sum + val, 0) / period;\n  let avgLoss = losses.slice(0, period).reduce((sum, val) => sum + val, 0) / period;\n  \n  // Calculate RSI for the first period\n  let rs = avgGain / (avgLoss === 0 ? 1 : avgLoss);\n  result.push(100 - (100 / (1 + rs)));\n  \n  // Calculate RSI for the rest\n  for (let i = period; i < data.length - 1; i++) {\n    avgGain = ((avgGain * (period - 1)) + gains[i]) / period;\n    avgLoss = ((avgLoss * (period - 1)) + losses[i]) / period;\n    \n    rs = avgGain / (avgLoss === 0 ? 1 : avgLoss);\n    result.push(100 - (100 / (1 + rs)));\n  }\n  \n  return result;\n};\n\nconst calculateStandardDeviation = (data: number[], period: number): number[] => {\n  const result: number[] = [];\n  const sma = calculateSMA(data, period);\n  \n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      result.push(NaN);\n      continue;\n    }\n    \n    let sumSquaredDiff = 0;\n    for (let j = 0; j < period; j++) {\n      sumSquaredDiff += Math.pow(data[i - j] - sma[i], 2);\n    }\n    \n    result.push(Math.sqrt(sumSquaredDiff / period));\n  }\n  \n  return result;\n};\n\nconst calculateMomentum = (data: number[], period: number): number[] => {\n  const result: number[] = [];\n  \n  // Fill initial values with NaN\n  for (let i = 0; i < period; i++) {\n    result.push(NaN);\n  }\n  \n  // Calculate momentum\n  for (let i = period; i < data.length; i++) {\n    result.push(data[i] / data[i - period] - 1);\n  }\n  \n  return result;\n};\n\nconst calculateVolatility = (data: number[], period: number, sma: number[]): number[] => {\n  const stdDev = calculateStandardDeviation(data, period);\n  \n  return stdDev.map((val, i) => \n    sma[i] ? val / sma[i] : NaN\n  );\n};\n\nconst prepareFeatures = (data: any[], config: MLModelConfig): { features: number[][], labels: number[] } => {\n  // Calculate technical indicators\n  const technicalFeatures = calculateTechnicalIndicators(data);\n  \n  // Select features based on config\n  let selectedFeatures: string[] = [];\n  \n  switch (config.featureSet) {\n    case 'basic':\n      selectedFeatures = [\n        'close_to_sma5', 'close_to_sma10', 'close_to_sma20',\n        'momentum5', 'momentum10', 'volume_ratio'\n      ];\n      break;\n    case 'technical':\n      selectedFeatures = [\n        'close_to_sma5', 'close_to_sma10', 'close_to_sma20',\n        'momentum5', 'momentum10', 'momentum20',\n        'rsi', 'macd', 'macd_hist',\n        'volatility10', 'volume_ratio'\n      ];\n      break;\n    case 'advanced':\n      selectedFeatures = [\n        'close_to_sma5', 'close_to_sma10', 'close_to_sma20',\n        'momentum5', 'momentum10', 'momentum20',\n        'rsi', 'macd', 'macd_hist', 'macd_signal',\n        'volatility5', 'volatility10', 'volatility20',\n        'volume_ratio', 'body_size', 'upper_shadow', 'lower_shadow',\n        'bb_upper', 'bb_middle', 'bb_lower'\n      ];\n      break;\n    case 'custom':\n      selectedFeatures = config.customFeatures || ['close_to_sma10', 'rsi', 'volume_ratio'];\n      break;\n  }\n  \n  // Create feature matrix\n  const featureMatrix: number[][] = [];\n  \n  // Ensure all arrays have the same length\n  const length = data.length;\n  \n  for (let i = 0; i < length; i++) {\n    const featureVector: number[] = [];\n    \n    for (const feature of selectedFeatures) {\n      if (technicalFeatures[feature] && technicalFeatures[feature][i] !== undefined) {\n        featureVector.push(technicalFeatures[feature][i]);\n      } else {\n        featureVector.push(NaN); // Will be handled later\n      }\n    }\n    \n    featureMatrix.push(featureVector);\n  }\n  \n  // Create labels based on prediction target\n  const labels: number[] = [];\n  \n  switch (config.predictionTarget) {\n    case 'price_direction':\n      // 1 if price goes up in the next timeHorizon candles, 0 otherwise\n      for (let i = 0; i < length - config.timeHorizon; i++) {\n        labels.push(data[i + config.timeHorizon].close > data[i].close ? 1 : 0);\n      }\n      // Pad with NaN for the last timeHorizon candles\n      for (let i = 0; i < config.timeHorizon; i++) {\n        labels.push(NaN);\n      }\n      break;\n    case 'price_change':\n      // Percentage change in the next timeHorizon candles\n      for (let i = 0; i < length - config.timeHorizon; i++) {\n        const change = (data[i + config.timeHorizon].close - data[i].close) / data[i].close;\n        // Discretize into classes: -1 (down), 0 (sideways), 1 (up)\n        if (change > 0.01) labels.push(1);\n        else if (change < -0.01) labels.push(-1);\n        else labels.push(0);\n      }\n      // Pad with NaN for the last timeHorizon candles\n      for (let i = 0; i < config.timeHorizon; i++) {\n        labels.push(NaN);\n      }\n      break;\n    case 'volatility':\n      // Predict if volatility will increase\n      for (let i = 0; i < length - config.timeHorizon; i++) {\n        const currentVol = technicalFeatures.volatility10[i];\n        const futureVol = technicalFeatures.volatility10[i + config.timeHorizon];\n        labels.push(futureVol > currentVol ? 1 : 0);\n      }\n      // Pad with NaN for the last timeHorizon candles\n      for (let i = 0; i < config.timeHorizon; i++) {\n        labels.push(NaN);\n      }\n      break;\n  }\n  \n  // Remove rows with NaN values\n  const validIndices: number[] = [];\n  for (let i = 0; i < length; i++) {\n    if (!featureMatrix[i].some(isNaN) && !isNaN(labels[i])) {\n      validIndices.push(i);\n    }\n  }\n  \n  const cleanFeatures = validIndices.map(i => featureMatrix[i]);\n  const cleanLabels = validIndices.map(i => labels[i]);\n  \n  return { features: cleanFeatures, labels: cleanLabels };\n};\n\n// ML model training and prediction\nexport const trainMLModel = async (\n  data: any[],\n  config: MLModelConfig,\n  modelName: string = 'default_model'\n): Promise<MLModelInfo> => {\n  try {\n    // Prepare features and labels\n    const { features, labels } = prepareFeatures(data, config);\n    \n    // Split data into training and validation sets\n    const splitIndex = Math.floor(features.length * 0.8);\n    const X_train = features.slice(0, splitIndex);\n    const y_train = labels.slice(0, splitIndex);\n    const X_val = features.slice(splitIndex);\n    const y_val = labels.slice(splitIndex);\n    \n    // Standardize features\n    const { mean, std } = calculateMeanAndStd(X_train);\n    const X_train_scaled = standardizeFeatures(X_train, mean, std);\n    const X_val_scaled = standardizeFeatures(X_val, mean, std);\n    \n    // Convert to tensors\n    const xs_train = tf.tensor2d(X_train_scaled);\n    const ys_train = tf.tensor1d(y_train);\n    const xs_val = tf.tensor2d(X_val_scaled);\n    const ys_val = tf.tensor1d(y_val);\n    \n    // Create model\n    const model = createModel(config, features[0].length);\n    \n    // Train model\n    await model.fit(xs_train, ys_train, {\n      epochs: 50,\n      batchSize: 32,\n      validationData: [xs_val, ys_val],\n      callbacks: {\n        onEpochEnd: (epoch, logs) => {\n          console.log(`Epoch ${epoch}: loss = ${logs?.loss}, val_loss = ${logs?.val_loss}`);\n        }\n      }\n    });\n    \n    // Evaluate model\n    const predictions = model.predict(xs_val) as tf.Tensor;\n    const y_pred = Array.from(predictions.dataSync()).map(p => p > 0.5 ? 1 : 0);\n    \n    // Calculate performance metrics\n    const performance: MLModelPerformance = {\n      accuracy: calculateAccuracy(y_val, y_pred),\n      precision: calculatePrecision(y_val, y_pred),\n      recall: calculateRecall(y_val, y_pred),\n      f1Score: calculateF1Score(y_val, y_pred),\n      trainingSamples: X_train.length,\n      validationSamples: X_val.length\n    };\n    \n    // Save model\n    const modelId = `${config.modelType}_${Date.now()}`;\n    const modelsDir = './models';\n    \n    // Create models directory if it doesn't exist\n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        if (!fs.existsSync(modelsDir)) {\n          fs.mkdirSync(modelsDir, { recursive: true });\n        }\n      }\n    } catch (error) {\n      console.error('Error creating models directory:', error);\n    }\n    \n    // Save model\n    const modelPath = `${modelsDir}/${modelId}`;\n    await model.save(`file://${modelPath}`);\n    \n    // Create model info\n    const modelInfo: MLModelInfo = {\n      id: modelId,\n      name: modelName,\n      description: `${config.modelType} model for ${config.predictionTarget} prediction with ${config.featureSet} features`,\n      config,\n      performance,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      lastTrainedAt: Date.now(),\n      status: 'ready',\n      filePath: modelPath\n    };\n    \n    // Save model info\n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        const modelInfoPath = `${modelsDir}/${modelId}_info.json`;\n        fs.writeFileSync(modelInfoPath, JSON.stringify(modelInfo, null, 2));\n      }\n    } catch (error) {\n      console.error('Error saving model info:', error);\n    }\n    \n    // Clean up tensors\n    xs_train.dispose();\n    ys_train.dispose();\n    xs_val.dispose();\n    ys_val.dispose();\n    predictions.dispose();\n    \n    return modelInfo;\n  } catch (error) {\n    console.error('Error training ML model:', error);\n    throw error;\n  }\n};\n\nexport const predictWithMLModel = async (\n  modelInfo: MLModelInfo,\n  data: any[]\n): Promise<MLPrediction[]> => {\n  try {\n    // Load model\n    const model = await tf.loadLayersModel(`file://${modelInfo.filePath}/model.json`);\n    \n    // Prepare features\n    const { features } = prepareFeatures(data, modelInfo.config);\n    \n    // Load mean and std from model info\n    let mean: number[] = [];\n    let std: number[] = [];\n    \n    try {\n      // Dynamic import for Node.js environments only\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        const fs = await import('fs');\n        const statsPath = `${modelInfo.filePath}/stats.json`;\n        if (fs.existsSync(statsPath)) {\n          const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));\n          mean = stats.mean;\n          std = stats.std;\n        } else {\n          // If stats file doesn't exist, calculate from features\n          const result = calculateMeanAndStd(features);\n          mean = result.mean;\n          std = result.std;\n        }\n      } else {\n        // Browser environment, calculate from features\n        const result = calculateMeanAndStd(features);\n        mean = result.mean;\n        std = result.std;\n      }\n    } catch (error) {\n      console.error('Error loading model stats:', error);\n      // Fallback to calculating from features\n      const result = calculateMeanAndStd(features);\n      mean = result.mean;\n      std = result.std;\n    }\n    \n    // Standardize features\n    const features_scaled = standardizeFeatures(features, mean, std);\n    \n    // Make predictions\n    const xs = tf.tensor2d(features_scaled);\n    const predictions = model.predict(xs) as tf.Tensor;\n    const predictionValues = Array.from(predictions.dataSync());\n    \n    // Create prediction objects\n    const result: MLPrediction[] = [];\n    \n    for (let i = 0; i < data.length; i++) {\n      // Skip if features couldn't be calculated for this candle\n      if (i >= features.length) continue;\n      \n      const confidence = predictionValues[i];\n      const prediction = confidence > 0.5 ? 1 : 0;\n      \n      result.push({\n        timestamp: data[i].timestamp,\n        symbol: data[i].symbol,\n        prediction,\n        confidence\n      });\n    }\n    \n    // Clean up tensors\n    xs.dispose();\n    predictions.dispose();\n    \n    return result;\n  } catch (error) {\n    console.error('Error making predictions with ML model:', error);\n    throw error;\n  }\n};\n\nexport const optimizeMLModel = async (\n  data: any[],\n  baseConfig: MLModelConfig,\n  modelName: string = 'optimized_model'\n): Promise<MLModelInfo> => {\n  try {\n    // Prepare features and labels\n    const { features, labels } = prepareFeatures(data, baseConfig);\n    \n    // Split data into training and validation sets\n    const splitIndex = Math.floor(features.length * 0.8);\n    const X_train = features.slice(0, splitIndex);\n    const y_train = labels.slice(0, splitIndex);\n    const X_val = features.slice(splitIndex);\n    const y_val = labels.slice(splitIndex);\n    \n    // Standardize features\n    const { mean, std } = calculateMeanAndStd(X_train);\n    const X_train_scaled = standardizeFeatures(X_train, mean, std);\n    const X_val_scaled = standardizeFeatures(X_val, mean, std);\n    \n    // Convert to tensors\n    const xs_train = tf.tensor2d(X_train_scaled);\n    const ys_train = tf.tensor1d(y_train);\n    const xs_val = tf.tensor2d(X_val_scaled);\n    const ys_val = tf.tensor1d(y_val);\n    \n    // Define hyperparameter options based on model type\n    let bestConfig = { ...baseConfig };\n    let bestPerformance = -Infinity;\n    \n    switch (baseConfig.modelType) {\n      case 'neuralnetwork':\n        // Test different network architectures\n        const hiddenLayerOptions = [\n          [32],\n          [64],\n          [128],\n          [32, 16],\n          [64, 32],\n          [128, 64]\n        ];\n        \n        const learningRateOptions = [0.001, 0.01, 0.1];\n        \n        for (const hiddenLayers of hiddenLayerOptions) {\n          for (const learningRate of learningRateOptions) {\n            const config = {\n              ...baseConfig,\n              hyperParameters: {\n                ...baseConfig.hyperParameters,\n                hiddenLayers,\n                learningRate\n              }\n            };\n            \n            // Create and train model\n            const model = createModel(config, features[0].length);\n            \n            await model.fit(xs_train, ys_train, {\n              epochs: 20,\n              batchSize: 32,\n              validationData: [xs_val, ys_val],\n              verbose: 0\n            });\n            \n            // Evaluate model\n            const predictions = model.predict(xs_val) as tf.Tensor;\n            const y_pred = Array.from(predictions.dataSync()).map(p => p > 0.5 ? 1 : 0);\n            \n            // Calculate F1 score\n            const f1Score = calculateF1Score(y_val, y_pred);\n            \n            if (f1Score > bestPerformance) {\n              bestPerformance = f1Score;\n              bestConfig = config;\n            }\n            \n            // Clean up\n            predictions.dispose();\n            model.dispose();\n          }\n        }\n        break;\n        \n      default:\n        // For other model types, use default hyperparameters\n        bestConfig = baseConfig;\n        break;\n    }\n    \n    // Clean up tensors\n    xs_train.dispose();\n    ys_train.dispose();\n    xs_val.dispose();\n    ys_val.dispose();\n    \n    // Train model with best hyperparameters\n    return trainMLModel(data, bestConfig, modelName);\n  } catch (error) {\n    console.error('Error optimizing ML model:', error);\n    throw error;\n  }\n};\n\n// Helper functions for model creation and evaluation\nconst createModel = (config: MLModelConfig, inputDimension: number): tf.LayersModel => {\n  const model = tf.sequential();\n  \n  // Get hyperparameters\n  const hyperParams = config.hyperParameters || {};\n  const hiddenLayers = hyperParams.hiddenLayers || [64, 32];\n  const learningRate = hyperParams.learningRate || 0.01;\n  const activation = hyperParams.activation || 'relu';\n  \n  // Input layer\n  model.add(tf.layers.dense({\n    units: hiddenLayers[0],\n    activation,\n    inputShape: [inputDimension]\n  }));\n  \n  // Hidden layers\n  for (let i = 1; i < hiddenLayers.length; i++) {\n    model.add(tf.layers.dense({\n      units: hiddenLayers[i],\n      activation\n    }));\n  }\n  \n  // Output layer\n  model.add(tf.layers.dense({\n    units: 1,\n    activation: 'sigmoid'\n  }));\n  \n  // Compile model\n  model.compile({\n    optimizer: tf.train.adam(learningRate),\n    loss: 'binaryCrossentropy',\n    metrics: ['accuracy']\n  });\n  \n  return model;\n};\n\nconst calculateMeanAndStd = (features: number[][]): { mean: number[], std: number[] } => {\n  const numFeatures = features[0].length;\n  const mean: number[] = Array(numFeatures).fill(0);\n  const std: number[] = Array(numFeatures).fill(0);\n  \n  // Calculate mean\n  for (const sample of features) {\n    for (let i = 0; i < numFeatures; i++) {\n      mean[i] += sample[i];\n    }\n  }\n  \n  for (let i = 0; i < numFeatures; i++) {\n    mean[i] /= features.length;\n  }\n  \n  // Calculate standard deviation\n  for (const sample of features) {\n    for (let i = 0; i < numFeatures; i++) {\n      std[i] += Math.pow(sample[i] - mean[i], 2);\n    }\n  }\n  \n  for (let i = 0; i < numFeatures; i++) {\n    std[i] = Math.sqrt(std[i] / features.length);\n    // Prevent division by zero\n    if (std[i] === 0) std[i] = 1;\n  }\n  \n  return { mean, std };\n};\n\nconst standardizeFeatures = (features: number[][], mean: number[], std: number[]): number[][] => {\n  return features.map(sample => \n    sample.map((value, i) => (value - mean[i]) / std[i])\n  );\n};\n\nconst calculateAccuracy = (actual: number[], predicted: number[]): number => {\n  let correct = 0;\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] === predicted[i]) correct++;\n  }\n  return correct / actual.length;\n};\n\nconst calculatePrecision = (actual: number[], predicted: number[]): number => {\n  let truePositives = 0;\n  let falsePositives = 0;\n  \n  for (let i = 0; i < actual.length; i++) {\n    if (predicted[i] === 1) {\n      if (actual[i] === 1) truePositives++;\n      else falsePositives++;\n    }\n  }\n  \n  return truePositives / (truePositives + falsePositives || 1);\n};\n\nconst calculateRecall = (actual: number[], predicted: number[]): number => {\n  let truePositives = 0;\n  let falseNegatives = 0;\n  \n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] === 1) {\n      if (predicted[i] === 1) truePositives++;\n      else falseNegatives++;\n    }\n  }\n  \n  return truePositives / (truePositives + falseNegatives || 1);\n};\n\nconst calculateF1Score = (actual: number[], predicted: number[]): number => {\n  const precision = calculatePrecision(actual, predicted);\n  const recall = calculateRecall(actual, predicted);\n  \n  return 2 * (precision * recall) / (precision + recall || 1);\n};\n\nexport default {\n  trainMLModel,\n  predictWithMLModel,\n  optimizeMLModel,\n  prepareFeatures,\n  calculateTechnicalIndicators\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/ml/modelRecalibration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1818,1821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1818,1821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1834,1837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1834,1837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1940,1943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1940,1943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":18,"suggestions":[{"fix":{"range":[4433,4482],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4741,4744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4741,4744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4757,4760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4757,4760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'features' is assigned a value but never used.","line":149,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":18,"suggestions":[{"fix":{"range":[6496,6559],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6824,6827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6824,6827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6840,6843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6840,6843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nextAction' is assigned a value but never used.","line":218,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nextPrice' is assigned a value but never used.","line":220,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":296,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":296,"endColumn":18,"suggestions":[{"fix":{"range":[9909,9973],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10297,10300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10297,10300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10313,10316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10313,10316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":24,"suggestions":[{"fix":{"range":[12320,12371],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":24,"suggestions":[{"fix":{"range":[13709,13759],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":450,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":450,"endColumn":18,"suggestions":[{"fix":{"range":[15301,15355],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15682,15685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15682,15685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":464,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15698,15701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15698,15701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":532,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":532,"endColumn":18,"suggestions":[{"fix":{"range":[18013,18068],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":545,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18453,18456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18453,18456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18514,18517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18514,18517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":595,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":595,"endColumn":18,"suggestions":[{"fix":{"range":[20368,20443],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":606,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":606,"endColumn":18,"suggestions":[{"fix":{"range":[20761,20823],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":686,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":686,"endColumn":18,"suggestions":[{"fix":{"range":[23633,23689],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'calculateTrend' is assigned a value but never used.","line":698,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":698,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'calculateRecalibrationFrequency' is assigned a value but never used.","line":728,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":728,"endColumn":38}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as tf from '@tensorflow/tfjs';\n\n/**\n * Model Recalibration Module\n * \n * This module provides functionality for monitoring model performance,\n * detecting drift, and automatically recalibrating ML and DQN models\n * to prevent overfitting and maintain accuracy over time.\n */\n\n// Types for model recalibration\nexport interface RecalibrationConfig {\n  monitoringFrequency: 'hourly' | 'daily' | 'weekly';\n  driftThreshold: number;\n  autoRecalibrate: boolean;\n  performanceMetrics: string[];\n  validationSplit: number;\n  maxHistoricalModels: number;\n  recalibrationStrategy: 'full' | 'incremental' | 'transfer';\n}\n\nexport interface ModelPerformanceMetrics {\n  timestamp: number;\n  modelId: string;\n  modelType: 'ml' | 'dqn';\n  accuracy?: number;\n  precision?: number;\n  recall?: number;\n  f1Score?: number;\n  sharpeRatio?: number;\n  sortino?: number;\n  maxDrawdown?: number;\n  winRate?: number;\n  profitFactor?: number;\n  expectedValue?: number;\n  driftScore?: number;\n}\n\nexport interface RecalibrationResult {\n  originalModelId: string;\n  newModelId: string;\n  timestamp: number;\n  reason: string;\n  performanceImprovement: number;\n  recalibrationStrategy: string;\n}\n\n// Default recalibration configuration\nconst defaultRecalibrationConfig: RecalibrationConfig = {\n  monitoringFrequency: 'daily',\n  driftThreshold: 0.15,\n  autoRecalibrate: true,\n  performanceMetrics: ['accuracy', 'f1Score', 'sharpeRatio', 'winRate'],\n  validationSplit: 0.3,\n  maxHistoricalModels: 5,\n  recalibrationStrategy: 'incremental'\n};\n\n/**\n * Calculate drift score between training data distribution and new data\n * @param trainingData Original data used for training\n * @param newData New market data to compare against\n * @returns Drift score between 0 and 1 (higher means more drift)\n */\nexport const calculateDrift = (trainingData: any[], newData: any[]): number => {\n  try {\n    // Extract key features for comparison\n    const extractFeatures = (data: any[]) => {\n      return {\n        closePrices: data.map(d => d.close),\n        volumes: data.map(d => d.volume),\n        highLowRanges: data.map(d => (d.high - d.low) / d.low),\n        bodySizes: data.map(d => Math.abs(d.close - d.open) / d.open)\n      };\n    };\n    \n    const trainingFeatures = extractFeatures(trainingData);\n    const newFeatures = extractFeatures(newData);\n    \n    // Calculate statistical properties\n    const calculateStats = (values: number[]) => {\n      const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n      const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n      const skewness = values.reduce((sum, val) => sum + Math.pow((val - mean) / Math.sqrt(variance), 3), 0) / values.length;\n      const kurtosis = values.reduce((sum, val) => sum + Math.pow((val - mean) / Math.sqrt(variance), 4), 0) / values.length;\n      \n      return { mean, variance, skewness, kurtosis };\n    };\n    \n    // Calculate stats for each feature\n    const trainingStats = {\n      closePrices: calculateStats(trainingFeatures.closePrices),\n      volumes: calculateStats(trainingFeatures.volumes),\n      highLowRanges: calculateStats(trainingFeatures.highLowRanges),\n      bodySizes: calculateStats(trainingFeatures.bodySizes)\n    };\n    \n    const newStats = {\n      closePrices: calculateStats(newFeatures.closePrices),\n      volumes: calculateStats(newFeatures.volumes),\n      highLowRanges: calculateStats(newFeatures.highLowRanges),\n      bodySizes: calculateStats(newFeatures.bodySizes)\n    };\n    \n    // Calculate normalized differences for each statistical property\n    const calculateNormalizedDiff = (val1: number, val2: number) => {\n      return Math.abs(val1 - val2) / (Math.abs(val1) + Math.abs(val2) + 1e-8);\n    };\n    \n    // Calculate drift for each feature\n    const drifts: number[] = [];\n    \n    for (const feature of ['closePrices', 'volumes', 'highLowRanges', 'bodySizes'] as const) {\n      for (const stat of ['mean', 'variance', 'skewness', 'kurtosis'] as const) {\n        const diff = calculateNormalizedDiff(\n          trainingStats[feature][stat],\n          newStats[feature][stat]\n        );\n        drifts.push(diff);\n      }\n    }\n    \n    // Calculate overall drift score (average of all drifts)\n    const driftScore = drifts.reduce((sum, val) => sum + val, 0) / drifts.length;\n    \n    // Normalize to [0, 1] range\n    return Math.min(1, Math.max(0, driftScore));\n  } catch (error) {\n    console.error('Error calculating drift:', error);\n    return 0;\n  }\n};\n\n/**\n * Monitor ML model performance on new data\n * @param modelInfo ML model information\n * @param newData New market data for evaluation\n * @returns Performance metrics\n */\nexport const monitorMLModelPerformance = async (\n  modelInfo: any,\n  newData: any[]\n): Promise<ModelPerformanceMetrics> => {\n  try {\n    // Import ML trading functions\n    const { prepareFeatures, predictWithMLModel } = await import('./mlTrading');\n    \n    // Prepare features and labels for evaluation\n    const { features, labels } = prepareFeatures(newData, modelInfo.config);\n    \n    // Get predictions\n    const predictions = await predictWithMLModel(modelInfo, newData);\n    \n    // Calculate performance metrics\n    const predictedLabels = predictions.map(p => p.prediction);\n    \n    // Calculate accuracy\n    const correctPredictions = predictedLabels.filter((pred, i) => pred === labels[i]).length;\n    const accuracy = correctPredictions / predictedLabels.length;\n    \n    // Calculate precision, recall, F1 score\n    const truePositives = predictedLabels.filter((pred, i) => pred === 1 && labels[i] === 1).length;\n    const falsePositives = predictedLabels.filter((pred, i) => pred === 1 && labels[i] === 0).length;\n    const falseNegatives = predictedLabels.filter((pred, i) => pred === 0 && labels[i] === 1).length;\n    \n    const precision = truePositives / (truePositives + falsePositives + 1e-8);\n    const recall = truePositives / (truePositives + falseNegatives + 1e-8);\n    const f1Score = 2 * (precision * recall) / (precision + recall + 1e-8);\n    \n    // Calculate win rate\n    const winRate = truePositives / (truePositives + falseNegatives + 1e-8);\n    \n    // Calculate drift score\n    const driftScore = calculateDrift(newData.slice(0, 100), newData.slice(-100));\n    \n    return {\n      timestamp: Date.now(),\n      modelId: modelInfo.id,\n      modelType: 'ml',\n      accuracy,\n      precision,\n      recall,\n      f1Score,\n      winRate,\n      driftScore\n    };\n  } catch (error) {\n    console.error('Error monitoring ML model performance:', error);\n    throw error;\n  }\n};\n\n/**\n * Monitor DQN model performance on new data\n * @param modelInfo DQN model information\n * @param newData New market data for evaluation\n * @returns Performance metrics\n */\nexport const monitorDQNModelPerformance = async (\n  modelInfo: any,\n  newData: any[]\n): Promise<ModelPerformanceMetrics> => {\n  try {\n    // Import DQN trading functions\n    const { getDQNActions } = await import('./dqnTrading');\n    \n    // Get actions from model\n    const actions = await getDQNActions(modelInfo, newData);\n    \n    // Simulate trading with these actions\n    let balance = 10000;\n    let position = 0;\n    const trades: Array<{type: string, price: number, return: number}> = [];\n    const returns: number[] = [];\n    \n    for (let i = 0; i < actions.length - 1; i++) {\n      const action = actions[i];\n      const nextAction = actions[i + 1];\n      const price = newData[i].close;\n      const nextPrice = newData[i + 1].close;\n      \n      if (action.action === 'buy' && position === 0) {\n        // Buy\n        position = balance / price;\n        balance = 0;\n      } else if (action.action === 'sell' && position > 0) {\n        // Sell\n        balance = position * price;\n        const returnPct = (balance - 10000) / 10000;\n        returns.push(returnPct);\n        trades.push({\n          type: 'sell',\n          price,\n          return: returnPct\n        });\n        position = 0;\n      }\n    }\n    \n    // Calculate performance metrics\n    const winningTrades = trades.filter(t => t.return > 0);\n    const winRate = winningTrades.length / (trades.length || 1);\n    \n    // Calculate Sharpe ratio\n    const meanReturn = returns.reduce((sum, r) => sum + r, 0) / (returns.length || 1);\n    const stdReturn = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - meanReturn, 2), 0) / (returns.length || 1)\n    );\n    const sharpeRatio = meanReturn / (stdReturn + 1e-8);\n    \n    // Calculate Sortino ratio (downside risk only)\n    const negativeReturns = returns.filter(r => r < 0);\n    const downsideDeviation = Math.sqrt(\n      negativeReturns.reduce((sum, r) => sum + Math.pow(r, 2), 0) / (negativeReturns.length || 1)\n    );\n    const sortino = meanReturn / (downsideDeviation + 1e-8);\n    \n    // Calculate max drawdown\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    let cumulativeReturn = 0;\n    \n    for (const ret of returns) {\n      cumulativeReturn += ret;\n      if (cumulativeReturn > peak) {\n        peak = cumulativeReturn;\n      }\n      const drawdown = (peak - cumulativeReturn) / (peak + 1e-8);\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n    \n    // Calculate profit factor\n    const grossProfit = winningTrades.reduce((sum, t) => sum + t.return, 0);\n    const grossLoss = Math.abs(trades.filter(t => t.return < 0).reduce((sum, t) => sum + t.return, 0));\n    const profitFactor = grossProfit / (grossLoss + 1e-8);\n    \n    // Calculate expected value\n    const expectedValue = meanReturn * trades.length;\n    \n    // Calculate drift score\n    const driftScore = calculateDrift(newData.slice(0, 100), newData.slice(-100));\n    \n    return {\n      timestamp: Date.now(),\n      modelId: modelInfo.id,\n      modelType: 'dqn',\n      sharpeRatio,\n      sortino,\n      maxDrawdown,\n      winRate,\n      profitFactor,\n      expectedValue,\n      driftScore\n    };\n  } catch (error) {\n    console.error('Error monitoring DQN model performance:', error);\n    throw error;\n  }\n};\n\n/**\n * Recalibrate ML model with new data\n * @param modelInfo Original ML model information\n * @param newData New market data for recalibration\n * @param strategy Recalibration strategy\n * @returns Recalibration result with new model info\n */\nexport const recalibrateMLModel = async (\n  modelInfo: any,\n  newData: any[],\n  strategy: 'full' | 'incremental' | 'transfer' = 'incremental'\n): Promise<RecalibrationResult> => {\n  try {\n    // Import ML trading functions\n    const { trainMLModel, optimizeMLModel } = await import('./mlTrading');\n    \n    let newModelInfo;\n    const recalibrationStrategy = strategy;\n    \n    switch (strategy) {\n      case 'full':\n        // Full retraining from scratch\n        newModelInfo = await trainMLModel(\n          newData,\n          modelInfo.config,\n          `${modelInfo.name} (Recalibrated)`\n        );\n        break;\n        \n      case 'incremental':\n        // Incremental training with new data\n        // First, load the existing model\n        const model = await tf.loadLayersModel(`file://${modelInfo.filePath}/model.json`);\n        \n        // Prepare new data\n        const { prepareFeatures } = await import('./mlTrading');\n        const { features, labels } = prepareFeatures(newData, modelInfo.config);\n        \n        // Load mean and std from model info\n        let mean: number[] = [];\n        let std: number[] = [];\n        \n        try {\n          // Dynamic import for Node.js environments only\n          if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n            const fs = await import('fs');\n            const statsPath = `${modelInfo.filePath}/stats.json`;\n            if (fs.existsSync(statsPath)) {\n              const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));\n              mean = stats.mean;\n              std = stats.std;\n            } else {\n              // If stats file doesn't exist, calculate from features\n              const result = calculateMeanAndStd(features);\n              mean = result.mean;\n              std = result.std;\n            }\n          } else {\n            // Browser environment, calculate from features\n            const result = calculateMeanAndStd(features);\n            mean = result.mean;\n            std = result.std;\n          }\n        } catch (error) {\n          console.error('Error loading model stats:', error);\n          // Fallback to calculating from features\n          const { calculateMeanAndStd } = await import('./mlTrading');\n          const result = calculateMeanAndStd(features);\n          mean = result.mean;\n          std = result.std;\n        }\n        \n        // Standardize features\n        const { standardizeFeatures } = await import('./mlTrading');\n        const features_scaled = standardizeFeatures(features, mean, std);\n        \n        // Convert to tensors\n        const xs = tf.tensor2d(features_scaled);\n        const ys = tf.tensor1d(labels);\n        \n        // Incrementally train the model\n        await model.fit(xs, ys, {\n          epochs: 5,\n          verbose: 0\n        });\n        \n        // Save updated model\n        const newModelId = `${modelInfo.id}_recal_${Date.now()}`;\n        const modelsDir = './models';\n        const newModelPath = `${modelsDir}/${newModelId}`;\n        \n        await model.save(`file://${newModelPath}`);\n        \n        // Save stats\n        try {\n          // Dynamic import for Node.js environments only\n          if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n            const fs = await import('fs');\n            fs.writeFileSync(`${newModelPath}/stats.json`, JSON.stringify({ mean, std }));\n          }\n        } catch (error) {\n          console.error('Error saving model stats:', error);\n        }\n        \n        // Create new model info\n        newModelInfo = {\n          ...modelInfo,\n          id: newModelId,\n          name: `${modelInfo.name} (Recalibrated)`,\n          filePath: newModelPath,\n          updatedAt: Date.now(),\n          lastTrainedAt: Date.now()\n        };\n        \n        // Clean up tensors\n        xs.dispose();\n        ys.dispose();\n        break;\n        \n      case 'transfer':\n        // Transfer learning: optimize hyperparameters with new data\n        newModelInfo = await optimizeMLModel(\n          newData,\n          modelInfo.config,\n          `${modelInfo.name} (Transfer Recalibrated)`\n        );\n        break;\n        \n      default:\n        throw new Error(`Unsupported recalibration strategy: ${strategy}`);\n    }\n    \n    // Calculate performance improvement\n    const originalPerformance = await monitorMLModelPerformance(modelInfo, newData);\n    const newPerformance = await monitorMLModelPerformance(newModelInfo, newData);\n    \n    // Use F1 score for performance comparison\n    const performanceImprovement = (newPerformance.f1Score! - originalPerformance.f1Score!) / \n                                  (originalPerformance.f1Score! + 1e-8);\n    \n    return {\n      originalModelId: modelInfo.id,\n      newModelId: newModelInfo.id,\n      timestamp: Date.now(),\n      reason: `Drift score: ${originalPerformance.driftScore!.toFixed(4)}, F1 score: ${originalPerformance.f1Score!.toFixed(4)}`,\n      performanceImprovement,\n      recalibrationStrategy\n    };\n  } catch (error) {\n    console.error('Error recalibrating ML model:', error);\n    throw error;\n  }\n};\n\n/**\n * Recalibrate DQN model with new data\n * @param modelInfo Original DQN model information\n * @param newData New market data for recalibration\n * @param strategy Recalibration strategy\n * @returns Recalibration result with new model info\n */\nexport const recalibrateDQNModel = async (\n  modelInfo: any,\n  newData: any[],\n  strategy: 'full' | 'incremental' | 'transfer' = 'incremental'\n): Promise<RecalibrationResult> => {\n  try {\n    // Import DQN trading functions\n    const { trainDQNModel, continueDQNTraining } = await import('./dqnTrading');\n    \n    let newModelInfo;\n    const recalibrationStrategy = strategy;\n    \n    switch (strategy) {\n      case 'full':\n        // Full retraining from scratch\n        newModelInfo = await trainDQNModel(\n          newData,\n          modelInfo.config,\n          `${modelInfo.name} (Recalibrated)`,\n          100 // Default episodes\n        );\n        break;\n        \n      case 'incremental':\n        // Incremental training with new data\n        newModelInfo = await continueDQNTraining(\n          modelInfo,\n          newData,\n          50 // Default additional episodes\n        );\n        break;\n        \n      case 'transfer':\n        // Transfer learning: adjust learning rate and train\n        const transferConfig = {\n          ...modelInfo.config,\n          learningRate: modelInfo.config.learningRate * 0.5, // Reduce learning rate\n          epsilonStart: 0.5, // Start with lower exploration\n          epsilonDecay: 0.99 // Slower decay\n        };\n        \n        newModelInfo = await trainDQNModel(\n          newData,\n          transferConfig,\n          `${modelInfo.name} (Transfer Recalibrated)`,\n          75 // Default episodes\n        );\n        break;\n        \n      default:\n        throw new Error(`Unsupported recalibration strategy: ${strategy}`);\n    }\n    \n    // Calculate performance improvement\n    const originalPerformance = await monitorDQNModelPerformance(modelInfo, newData);\n    const newPerformance = await monitorDQNModelPerformance(newModelInfo, newData);\n    \n    // Use Sharpe ratio for performance comparison\n    const performanceImprovement = (newPerformance.sharpeRatio! - originalPerformance.sharpeRatio!) / \n                                  (Math.abs(originalPerformance.sharpeRatio!) + 1e-8);\n    \n    return {\n      originalModelId: modelInfo.id,\n      newModelId: newModelInfo.id,\n      timestamp: Date.now(),\n      reason: `Drift score: ${originalPerformance.driftScore!.toFixed(4)}, Sharpe ratio: ${originalPerformance.sharpeRatio!.toFixed(4)}`,\n      performanceImprovement,\n      recalibrationStrategy\n    };\n  } catch (error) {\n    console.error('Error recalibrating DQN model:', error);\n    throw error;\n  }\n};\n\n/**\n * Schedule model recalibration based on performance monitoring\n * @param modelInfo Model information (ML or DQN)\n * @param config Recalibration configuration\n * @param newData New market data for evaluation and recalibration\n * @returns Recalibration result if performed, null otherwise\n */\nexport const scheduleModelRecalibration = async (\n  modelInfo: any,\n  config: Partial<RecalibrationConfig> = {},\n  newData: any[]\n): Promise<RecalibrationResult | null> => {\n  try {\n    // Merge with default config\n    const fullConfig: RecalibrationConfig = { ...defaultRecalibrationConfig, ...config };\n    \n    // Monitor model performance\n    let performance: ModelPerformanceMetrics;\n    \n    if (modelInfo.modelType === 'ml' || modelInfo.config.modelType) {\n      performance = await monitorMLModelPerformance(modelInfo, newData);\n    } else {\n      performance = await monitorDQNModelPerformance(modelInfo, newData);\n    }\n    \n    // Check if recalibration is needed\n    let needsRecalibration = false;\n    let recalibrationReason = '';\n    \n    // Check drift threshold\n    if (performance.driftScore! > fullConfig.driftThreshold) {\n      needsRecalibration = true;\n      recalibrationReason = `Drift score ${performance.driftScore!.toFixed(4)} exceeds threshold ${fullConfig.driftThreshold}`;\n    }\n    \n    // Check performance metrics\n    if (performance.modelType === 'ml') {\n      if (performance.accuracy! < 0.55) {\n        needsRecalibration = true;\n        recalibrationReason += ` Accuracy ${performance.accuracy!.toFixed(4)} below threshold`;\n      }\n      if (performance.f1Score! < 0.5) {\n        needsRecalibration = true;\n        recalibrationReason += ` F1 score ${performance.f1Score!.toFixed(4)} below threshold`;\n      }\n    } else {\n      if (performance.sharpeRatio! < 0.2) {\n        needsRecalibration = true;\n        recalibrationReason += ` Sharpe ratio ${performance.sharpeRatio!.toFixed(4)} below threshold`;\n      }\n      if (performance.winRate! < 0.45) {\n        needsRecalibration = true;\n        recalibrationReason += ` Win rate ${performance.winRate!.toFixed(4)} below threshold`;\n      }\n    }\n    \n    // Perform recalibration if needed and auto-recalibrate is enabled\n    if (needsRecalibration && fullConfig.autoRecalibrate) {\n      console.log(`Recalibrating model ${modelInfo.id}: ${recalibrationReason}`);\n      \n      if (performance.modelType === 'ml') {\n        return await recalibrateMLModel(modelInfo, newData, fullConfig.recalibrationStrategy);\n      } else {\n        return await recalibrateDQNModel(modelInfo, newData, fullConfig.recalibrationStrategy);\n      }\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error scheduling model recalibration:', error);\n    return null;\n  }\n};\n\n/**\n * Evaluate model performance and recalibration history\n * @param modelId Model ID to evaluate\n * @param historyLength Number of historical performance records to analyze\n * @returns Analysis of model performance trends\n */\nexport const evaluateModelHistory = async (\n  modelId: string,\n  historyLength: number = 10\n): Promise<{\n  modelId: string;\n  performanceTrend: 'improving' | 'stable' | 'degrading';\n  driftTrend: 'increasing' | 'stable' | 'decreasing';\n  recalibrationFrequency: number;\n  recommendedAction: 'none' | 'monitor' | 'recalibrate' | 'replace';\n}> => {\n  try {\n    // Load performance history\n    // Dynamic import for Node.js environments only\n    if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      const fs = await import('fs');\n      const modelsDir = './models';\n      const historyPath = `${modelsDir}/${modelId}_history.json`;\n    \n      let performanceHistory: ModelPerformanceMetrics[] = [];\n      \n      if (fs.existsSync(historyPath)) {\n        performanceHistory = JSON.parse(fs.readFileSync(historyPath, 'utf8'));\n      }\n      \n      // Limit to requested history length\n      performanceHistory = performanceHistory.slice(-historyLength);\n      \n      if (performanceHistory.length < 2) {\n        return {\n          modelId,\n          performanceTrend: 'stable',\n          driftTrend: 'stable',\n          recalibrationFrequency: 0,\n          recommendedAction: 'monitor'\n        };\n      }\n      \n      // Calculate trends and analysis...\n      // This would contain the actual trend analysis logic in a complete implementation\n      const latestMetrics = performanceHistory[performanceHistory.length - 1];\n      const earliestMetrics = performanceHistory[0];\n      \n      // Simple trend calculation based on accuracy change\n      const accuracyChange = latestMetrics.accuracy - earliestMetrics.accuracy;\n      const performanceTrend = accuracyChange > 0.01 ? 'improving' : \n                              accuracyChange < -0.01 ? 'degrading' : 'stable';\n      \n      // Simple drift calculation based on precision change  \n      const precisionChange = latestMetrics.precision - earliestMetrics.precision;\n      const driftTrend = Math.abs(precisionChange) > 0.01 ? 'increasing' : 'stable';\n      \n      return {\n        modelId,\n        performanceTrend,\n        driftTrend,\n        recalibrationFrequency: performanceHistory.length,\n        recommendedAction: performanceTrend === 'degrading' ? 'recalibrate' : 'monitor'\n      };\n    } else {\n      // Browser environment - return default analysis\n      return {\n        modelId,\n        performanceTrend: 'stable',\n        driftTrend: 'stable',\n        recalibrationFrequency: 0,\n        recommendedAction: 'monitor'\n      };\n    }\n  } catch (error) {\n    console.error('Error evaluating model history:', error);\n    return {\n      modelId,\n      performanceTrend: 'stable',\n      driftTrend: 'stable',\n      recalibrationFrequency: 0,\n      recommendedAction: 'monitor'\n    };\n  }\n};\n\n// Helper function to calculate trend\nconst calculateTrend = (values: number[], inverse: boolean = false): 'improving' | 'stable' | 'degrading' => {\n  if (values.length < 2) return 'stable';\n  \n  // Calculate linear regression slope\n  const n = values.length;\n  const x = Array.from({ length: n }, (_, i) => i);\n  const y = values;\n  \n  const sumX = x.reduce((a, b) => a + b, 0);\n  const sumY = y.reduce((a, b) => a + b, 0);\n  const sumXY = x.reduce((a, b, i) => a + b * y[i], 0);\n  const sumXX = x.reduce((a, b) => a + b * b, 0);\n  \n  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n  \n  // Determine trend based on slope\n  const threshold = 0.01; // Minimum slope to consider a trend\n  \n  if (Math.abs(slope) < threshold) {\n    return 'stable';\n  }\n  \n  if (inverse) {\n    return slope > 0 ? 'degrading' : 'improving';\n  } else {\n    return slope > 0 ? 'improving' : 'degrading';\n  }\n};\n\n// Helper function to calculate recalibration frequency\nconst calculateRecalibrationFrequency = (history: RecalibrationResult[]): number => {\n  if (history.length < 2) return 0;\n  \n  // Get time range in months\n  const firstRecal = history[0].timestamp;\n  const lastRecal = history[history.length - 1].timestamp;\n  const monthsDiff = (lastRecal - firstRecal) / (1000 * 60 * 60 * 24 * 30);\n  \n  return history.length / Math.max(1, monthsDiff);\n};\n\nexport default {\n  calculateDrift,\n  monitorMLModelPerformance,\n  monitorDQNModelPerformance,\n  recalibrateMLModel,\n  recalibrateDQNModel,\n  scheduleModelRecalibration,\n  evaluateModelHistory\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Account.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Backtesting.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'backtestService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":20,"suggestions":[{"fix":{"range":[5256,5297],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'calculateAdvancedMetrics' is assigned a value but never used.","line":177,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":16,"suggestions":[{"fix":{"range":[9064,9117],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":635,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":635,"endColumn":22,"suggestions":[{"fix":{"range":[24811,24856],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":851,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":851,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34509,34512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34509,34512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Strategy } from '@/types';\nimport { BacktestResult, BacktestOptions } from '@/types/backtest';\nimport { backtestService } from '@/services/backtestService';\nimport { advancedBacktestService } from '@/services/advancedBacktestService';\nimport { useTradingContext } from '@/hooks/useTradingContext';\nimport HistoricalDataManager from '@/components/backtesting/HistoricalDataManager';\nimport { \n  Play, \n  Settings, \n  Download, \n  Calendar,\n  TrendingUp,\n  AlertTriangle,\n  BarChart3,\n  PieChart,\n  Activity,\n  Zap,\n  Database\n} from 'lucide-react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface AdvancedMetrics {\n  valueAtRisk95: number;\n  valueAtRisk99: number;\n  conditionalVaR95: number;\n  conditionalVaR99: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n  omegaRatio: number;\n  tailRatio: number;\n  gainToLossRatio: number;\n  payoffRatio: number;\n  expectancy: number;\n  systemQualityNumber: number;\n  kRatio: number;\n  ulcerIndex: number;\n  recoveryFactor: number;\n  profitabilityIndex: number;\n}\n\ninterface BacktestSession {\n  id: string;\n  name: string;\n  strategy: Strategy;\n  options: BacktestOptions;\n  result: BacktestResult | null;\n  advancedMetrics: AdvancedMetrics | null;\n  createdAt: Date;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n}\n\nconst Backtesting: React.FC = () => {\n  const { strategies } = useTradingContext();\n  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);\n  const [backtestOptions, setBacktestOptions] = useState<BacktestOptions>({\n    startDate: '2023-01-01',\n    endDate: '2024-01-01',\n    initialBalance: 10000,\n    feeRate: 0.001,\n    slippage: 0.001,\n    useHistoricalData: true\n  });\n  \n  const [sessions, setSessions] = useState<BacktestSession[]>([]);\n  const [activeSession, setActiveSession] = useState<BacktestSession | null>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [activeTab, setActiveTab] = useState<'setup' | 'data' | 'results' | 'analysis' | 'reports'>('setup');\n  const [historicalDataLoaded, setHistoricalDataLoaded] = useState(false);\n\n  // Initialize with sample session for demo\n  useEffect(() => {\n    if (strategies.length > 0 && sessions.length === 0) {\n      const sampleSession: BacktestSession = {\n        id: '1',\n        name: 'Sample Backtest',\n        strategy: strategies[0],\n        options: backtestOptions,\n        result: null,\n        advancedMetrics: null,\n        createdAt: new Date(),\n        status: 'pending'\n      };\n      setSessions([sampleSession]);\n    }\n  }, [strategies, backtestOptions, sessions.length]);\n\n  const runBacktest = async () => {\n    if (!selectedStrategy) return;\n\n    setIsRunning(true);\n    \n    const sessionId = Date.now().toString();\n    const newSession: BacktestSession = {\n      id: sessionId,\n      name: `Backtest ${selectedStrategy.name} ${new Date().toLocaleDateString()}`,\n      strategy: selectedStrategy,\n      options: backtestOptions,\n      result: null,\n      advancedMetrics: null,\n      createdAt: new Date(),\n      status: 'running'\n    };\n\n    setSessions(prev => [newSession, ...prev]);\n    setActiveSession(newSession);\n\n    try {\n      // Use advanced backtest service for Phase 4\n      const result = await advancedBacktestService.runAdvancedBacktest(selectedStrategy, backtestOptions);\n      const advancedMetrics = result.advancedMetrics;\n\n      const updatedSession = {\n        ...newSession,\n        result: {\n          ...result,\n          // Convert advanced metrics to the expected format\n          metrics: {\n            ...result.metrics,\n            netProfit: result.totalPnL,\n            grossProfit: result.trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0),\n            grossLoss: Math.abs(result.trades.filter(t => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0)),\n            maxConsecutiveWins: 0, // Would need to calculate\n            maxConsecutiveLosses: 0, // Would need to calculate\n            averageTrade: result.trades.reduce((sum, t) => sum + t.pnl, 0) / result.trades.length || 0,\n            averageProfit: result.trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0) / result.trades.filter(t => t.pnl > 0).length || 0,\n            averageLoss: result.trades.filter(t => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0) / result.trades.filter(t => t.pnl < 0).length || 0,\n            largestProfit: Math.max(...result.trades.map(t => t.pnl)),\n            largestLoss: Math.min(...result.trades.map(t => t.pnl)),\n            annualizedReturn: ((result.finalBalance / result.initialBalance) - 1) * 365 / 365 // Simplified\n          }\n        },\n        advancedMetrics,\n        status: 'completed' as const\n      };\n\n      setSessions(prev => prev.map(s => s.id === sessionId ? updatedSession : s));\n      setActiveSession(updatedSession);\n      setActiveTab('results');\n    } catch (error) {\n      console.error('Backtest failed:', error);\n      const failedSession = {\n        ...newSession,\n        status: 'failed' as const\n      };\n      setSessions(prev => prev.map(s => s.id === sessionId ? failedSession : s));\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const calculateAdvancedMetrics = (result: BacktestResult): AdvancedMetrics => {\n    const returns = result.trades.map(t => t.pnlPercent / 100);\n    const negativeReturns = returns.filter(r => r < 0).sort((a, b) => a - b);\n    const positiveReturns = returns.filter(r => r > 0);\n    \n    // Calculate Value at Risk (VaR)\n    const calculateVaR = (confidence: number) => {\n      const index = Math.floor((1 - confidence) * negativeReturns.length);\n      return negativeReturns[index] || 0;\n    };\n\n    const var95 = calculateVaR(0.95);\n    const var99 = calculateVaR(0.99);\n\n    // Calculate Conditional VaR (Expected Shortfall)\n    const calculateCVaR = (confidence: number) => {\n      const varValue = calculateVaR(confidence);\n      const tailReturns = negativeReturns.filter(r => r <= varValue);\n      return tailReturns.length > 0 ? tailReturns.reduce((sum, r) => sum + r, 0) / tailReturns.length : 0;\n    };\n\n    const cvar95 = calculateCVaR(0.95);\n    const cvar99 = calculateCVaR(0.99);\n\n    // Calculate other advanced metrics\n    const downside = returns.filter(r => r < 0);\n    const downsideDeviation = Math.sqrt(downside.reduce((sum, r) => sum + r * r, 0) / downside.length);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    \n    const sortinoRatio = downsideDeviation > 0 ? avgReturn / downsideDeviation : 0;\n    const calmarRatio = result.maxDrawdown > 0 ? (result.finalBalance - result.initialBalance) / result.initialBalance / result.maxDrawdown : 0;\n\n    const wins = result.trades.filter(t => t.pnl > 0);\n    const losses = result.trades.filter(t => t.pnl < 0);\n    const avgWin = wins.length > 0 ? wins.reduce((sum, t) => sum + t.pnl, 0) / wins.length : 0;\n    const avgLoss = losses.length > 0 ? Math.abs(losses.reduce((sum, t) => sum + t.pnl, 0) / losses.length) : 0;\n\n    return {\n      valueAtRisk95: Math.abs(var95) * 100,\n      valueAtRisk99: Math.abs(var99) * 100,\n      conditionalVaR95: Math.abs(cvar95) * 100,\n      conditionalVaR99: Math.abs(cvar99) * 100,\n      calmarRatio,\n      sortinoRatio,\n      omegaRatio: positiveReturns.length > 0 && negativeReturns.length > 0 \n        ? (positiveReturns.reduce((sum, r) => sum + r, 0) / positiveReturns.length) / \n          (Math.abs(negativeReturns.reduce((sum, r) => sum + r, 0) / negativeReturns.length)) : 0,\n      tailRatio: negativeReturns.length > 1 ? Math.abs(var95 / var99) : 0,\n      gainToLossRatio: avgLoss > 0 ? avgWin / avgLoss : 0,\n      payoffRatio: avgLoss > 0 ? avgWin / avgLoss : 0,\n      expectancy: (result.winRate / 100 * avgWin) - ((100 - result.winRate) / 100 * avgLoss),\n      systemQualityNumber: result.sharpeRatio * Math.sqrt(result.totalTrades),\n      kRatio: returns.length > 1 ? avgReturn / (Math.max(...returns) - Math.min(...returns)) : 0,\n      ulcerIndex: Math.sqrt(result.trades.reduce((sum, t, i) => {\n        const dd = result.trades.slice(0, i + 1).reduce((maxBalance, trade) => Math.max(maxBalance, trade.balance), 0);\n        const drawdown = dd > 0 ? Math.pow((dd - t.balance) / dd * 100, 2) : 0;\n        return sum + drawdown;\n      }, 0) / result.trades.length),\n      recoveryFactor: result.maxDrawdown > 0 ? (result.finalBalance - result.initialBalance) / result.maxDrawdown : 0,\n      profitabilityIndex: result.initialBalance > 0 ? (result.finalBalance - result.initialBalance) / result.initialBalance : 0\n    };\n  };\n\n  const exportResults = async (format: 'csv' | 'pdf' | 'excel') => {\n    if (!activeSession?.result) return;\n    \n    // Implement export functionality\n    console.log(`Exporting results in ${format} format`);\n    // This would integrate with a reporting service\n  };\n\n  const renderSetupTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4 flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          Backtest Configuration\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Strategy\n            </label>\n            <select\n              value={selectedStrategy?.id || ''}\n              onChange={(e) => {\n                const strategy = strategies.find(s => s.id === e.target.value);\n                setSelectedStrategy(strategy || null);\n              }}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"\">Select a strategy</option>\n              {strategies.map(strategy => (\n                <option key={strategy.id} value={strategy.id}>\n                  {strategy.name} ({strategy.type})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Initial Balance (USD)\n            </label>\n            <div className=\"space-y-2\">\n              <input\n                type=\"number\"\n                min=\"100\"\n                max=\"1000000\"\n                step=\"100\"\n                value={backtestOptions.initialBalance}\n                onChange={(e) => setBacktestOptions({\n                  ...backtestOptions,\n                  initialBalance: parseFloat(e.target.value) || 10000\n                })}\n                className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Enter amount (min: $100)\"\n              />\n              <div className=\"flex flex-wrap gap-2\">\n                {[1000, 5000, 10000, 25000, 50000, 100000].map(amount => (\n                  <button\n                    key={amount}\n                    type=\"button\"\n                    onClick={() => setBacktestOptions({\n                      ...backtestOptions,\n                      initialBalance: amount\n                    })}\n                    className={`px-3 py-1 text-xs rounded-md border transition-colors ${\n                      backtestOptions.initialBalance === amount\n                        ? 'bg-blue-100 border-blue-300 text-blue-700'\n                        : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    ${amount.toLocaleString()}\n                  </button>\n                ))}\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Choose a starting balance for your backtest simulation\n              </p>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Start Date\n            </label>\n            <input\n              type=\"date\"\n              value={backtestOptions.startDate}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                startDate: e.target.value\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              End Date\n            </label>\n            <input\n              type=\"date\"\n              value={backtestOptions.endDate}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                endDate: e.target.value\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Fee Rate (%)\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.001\"\n              value={backtestOptions.feeRate * 100}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                feeRate: parseFloat(e.target.value) / 100\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Slippage (%)\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.001\"\n              value={backtestOptions.slippage * 100}\n              onChange={(e) => setBacktestOptions({\n                ...backtestOptions,\n                slippage: parseFloat(e.target.value) / 100\n              })}\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n\n        <div className=\"mt-6 flex justify-end space-x-3\">\n          <button\n            onClick={runBacktest}\n            disabled={!selectedStrategy || isRunning}\n            className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Play className=\"w-4 h-4 mr-2\" />\n            {isRunning ? 'Running Backtest...' : 'Run Backtest'}\n          </button>\n        </div>\n      </div>\n\n      {/* Session History */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4\">Recent Sessions</h3>\n        <div className=\"space-y-3\">\n          {sessions.slice(0, 5).map(session => (\n            <div\n              key={session.id}\n              onClick={() => setActiveSession(session)}\n              className={`p-4 border rounded-md cursor-pointer transition-colors ${\n                activeSession?.id === session.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">{session.name}</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {session.strategy.name} • {session.createdAt.toLocaleDateString()}\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    session.status === 'completed' ? 'bg-green-100 text-green-800' :\n                    session.status === 'running' ? 'bg-yellow-100 text-yellow-800' :\n                    session.status === 'failed' ? 'bg-red-100 text-red-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {session.status}\n                  </span>\n                  {session.result && (\n                    <span className={`text-sm font-medium ${\n                      session.result.totalPnL > 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {session.result.totalPnL > 0 ? '+' : ''}${session.result.totalPnL.toFixed(2)}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderResultsTab = () => {\n    if (!activeSession?.result) {\n      return (\n        <div className=\"bg-white p-8 rounded-lg shadow text-center\">\n          <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Results Available</h3>\n          <p className=\"text-gray-600\">Run a backtest to see results here.</p>\n        </div>\n      );\n    }\n\n    const result = activeSession.result;\n    const metrics = activeSession.advancedMetrics;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Key Performance Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"w-8 h-8 text-green-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Return</p>\n                <p className={`text-xl font-bold ${result.totalPnL > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {((result.finalBalance - result.initialBalance) / result.initialBalance * 100).toFixed(2)}%\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <BarChart3 className=\"w-8 h-8 text-blue-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Sharpe Ratio</p>\n                <p className=\"text-xl font-bold\">{result.sharpeRatio.toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"w-8 h-8 text-red-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Max Drawdown</p>\n                <p className=\"text-xl font-bold text-red-600\">{result.maxDrawdown.toFixed(2)}%</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Activity className=\"w-8 h-8 text-purple-500 mr-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Win Rate</p>\n                <p className=\"text-xl font-bold\">{result.winRate.toFixed(1)}%</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Advanced Risk Metrics */}\n        {metrics && (\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <h3 className=\"text-lg font-medium mb-4\">Advanced Risk Metrics</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">VaR (95%)</p>\n                <p className=\"text-lg font-bold\">{metrics.valueAtRisk95.toFixed(2)}%</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">CVaR (95%)</p>\n                <p className=\"text-lg font-bold\">{metrics.conditionalVaR95.toFixed(2)}%</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Calmar Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.calmarRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Sortino Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.sortinoRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Omega Ratio</p>\n                <p className=\"text-lg font-bold\">{metrics.omegaRatio.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Expectancy</p>\n                <p className=\"text-lg font-bold\">${metrics.expectancy.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Ulcer Index</p>\n                <p className=\"text-lg font-bold\">{metrics.ulcerIndex.toFixed(2)}</p>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm text-gray-600\">Recovery Factor</p>\n                <p className=\"text-lg font-bold\">{metrics.recoveryFactor.toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Equity Curve Chart */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Equity Curve</h3>\n          <div className=\"h-64\">\n            <Line\n              data={{\n                labels: result.trades.map((_, i) => i + 1),\n                datasets: [\n                  {\n                    label: 'Equity',\n                    data: result.trades.map(t => t.balance),\n                    borderColor: 'rgb(59, 130, 246)',\n                    backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                    tension: 0.1,\n                    fill: true\n                  }\n                ]\n              }}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                  y: {\n                    beginAtZero: false\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n\n        {/* Trade Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Trade Analysis</h3>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-3\">P&L Distribution</h4>\n              <div className=\"h-48\">\n                <Bar\n                  data={{\n                    labels: ['Winning Trades', 'Losing Trades'],\n                    datasets: [\n                      {\n                        label: 'Count',\n                        data: [result.winningTrades, result.losingTrades],\n                        backgroundColor: ['rgba(34, 197, 94, 0.8)', 'rgba(239, 68, 68, 0.8)'],\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false\n                  }}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium mb-3\">Monthly Returns</h4>\n              <div className=\"h-48\">\n                <Line\n                  data={{\n                    labels: result.metrics.monthlyReturns.map((_, i) => `Month ${i + 1}`),\n                    datasets: [\n                      {\n                        label: 'Monthly Return',\n                        data: result.metrics.monthlyReturns,\n                        borderColor: 'rgb(168, 85, 247)',\n                        backgroundColor: 'rgba(168, 85, 247, 0.1)',\n                        tension: 0.1\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderDataTab = () => (\n    <div className=\"space-y-6\">\n      <HistoricalDataManager \n        onDataLoaded={(data) => {\n          setHistoricalDataLoaded(true);\n          console.log('Historical data loaded:', data);\n        }}\n      />\n      \n      {historicalDataLoaded && (\n        <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n          <div className=\"flex items-center\">\n            <Database className=\"w-5 h-5 text-green-600 mr-2\" />\n            <span className=\"text-sm text-green-700 font-medium\">\n              Historical data successfully loaded and ready for backtesting\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderAnalysisTab = () => {\n    if (!activeSession?.advancedMetrics) {\n      return (\n        <div className=\"bg-white p-8 rounded-lg shadow text-center\">\n          <PieChart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Advanced Analysis</h3>\n          <p className=\"text-gray-600\">Run a backtest to see advanced analysis and risk metrics.</p>\n        </div>\n      );\n    }\n\n    const metrics = activeSession.advancedMetrics;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Risk Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Risk Analysis</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-red-800 mb-2\">Value at Risk</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-red-600\">VaR (95%)</span>\n                  <span className=\"font-bold text-red-800\">{metrics.valueAtRisk95.toFixed(2)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-red-600\">VaR (99%)</span>\n                  <span className=\"font-bold text-red-800\">{metrics.valueAtRisk99.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-orange-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-orange-800 mb-2\">Conditional VaR</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-orange-600\">CVaR (95%)</span>\n                  <span className=\"font-bold text-orange-800\">{metrics.conditionalVaR95.toFixed(2)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-orange-600\">CVaR (99%)</span>\n                  <span className=\"font-bold text-orange-800\">{metrics.conditionalVaR99.toFixed(2)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 mb-2\">Advanced Ratios</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-blue-600\">Calmar Ratio</span>\n                  <span className=\"font-bold text-blue-800\">{metrics.calmarRatio.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-blue-600\">Sortino Ratio</span>\n                  <span className=\"font-bold text-blue-800\">{metrics.sortinoRatio.toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Downside Risk Metrics */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Downside Risk Metrics</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Ulcer Index</p>\n              <p className=\"text-lg font-bold\">{metrics.ulcerIndex.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Pain Index</p>\n              <p className=\"text-lg font-bold\">{metrics.painIndex.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Martin Ratio</p>\n              <p className=\"text-lg font-bold\">{metrics.martinRatio.toFixed(2)}</p>\n            </div>\n            <div className=\"text-center p-3 bg-gray-50 rounded\">\n              <p className=\"text-sm text-gray-600\">Burke Ratio</p>\n              <p className=\"text-lg font-bold\">{metrics.burkeRatio.toFixed(2)}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Distribution Analysis */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Return Distribution Analysis</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-3\">Statistical Measures</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Skewness</span>\n                  <span className=\"font-medium\">{metrics.skewness.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Kurtosis</span>\n                  <span className=\"font-medium\">{metrics.kurtosis.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Tail Ratio</span>\n                  <span className=\"font-medium\">{metrics.tailRatio.toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-3\">Upside Potential</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Upness Index</span>\n                  <span className=\"font-medium\">{(metrics.upnessIndex * 100).toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Upside Potential Ratio</span>\n                  <span className=\"font-medium\">{metrics.upsidePotentialRatio.toFixed(3)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Gain to Pain Ratio</span>\n                  <span className=\"font-medium\">{metrics.gainToPainRatio.toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Attribution */}\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-medium mb-4\">Performance Attribution</h3>\n          <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n            <PieChart className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n            <p className=\"text-blue-700 font-medium\">Factor Analysis</p>\n            <p className=\"text-sm text-blue-600 mt-1\">\n              Factor decomposition and performance attribution analysis coming in next update\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderReportsTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4\">Export Results</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button\n            onClick={() => exportResults('csv')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export CSV\n          </button>\n          <button\n            onClick={() => exportResults('excel')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export Excel\n          </button>\n          <button\n            onClick={() => exportResults('pdf')}\n            className=\"flex items-center justify-center p-4 border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            <Download className=\"w-5 h-5 mr-2\" />\n            Export PDF Report\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n          <Zap className=\"w-8 h-8 mr-3 text-blue-600\" />\n          Advanced Backtesting Engine\n        </h1>\n        <p className=\"mt-2 text-gray-600\">\n          Comprehensive strategy testing with advanced risk metrics and performance analysis\n        </p>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'setup', label: 'Setup', icon: Settings },\n              { id: 'data', label: 'Historical Data', icon: Database },\n              { id: 'results', label: 'Results', icon: TrendingUp },\n              { id: 'analysis', label: 'Analysis', icon: BarChart3 },\n              { id: 'reports', label: 'Reports', icon: Download }\n            ].map(({ id, label, icon: Icon }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id as any)}\n                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center ${\n                  activeTab === id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <Icon className=\"w-4 h-4 mr-2\" />\n                {label}\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'setup' && renderSetupTab()}\n      {activeTab === 'data' && renderDataTab()}\n      {activeTab === 'results' && renderResultsTab()}\n      {activeTab === 'analysis' && renderAnalysisTab()}\n      {activeTab === 'reports' && renderReportsTab()}\n    </div>\n  );\n};\n\nexport default Backtesting;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Chat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/ExtensionDownload.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":20,"suggestions":[{"fix":{"range":[1088,1141],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Download, \n  Chrome, \n  MessageSquare, \n  Check, \n  AlertTriangle, \n  ArrowRight, \n  Info,\n  Loader,\n  Settings,\n  ChevronDown,\n  ChevronUp,\n  Lock\n} from 'lucide-react';\nimport { useSettings } from '../hooks/useSettings';\nimport { createExtensionZip } from '../utils/extensionHelper';\nimport ExtensionControls from '../components/Extension/ExtensionControls';\n\nconst ExtensionDownload: React.FC = () => {\n  const { apiKey, apiSecret } = useSettings();\n  const [copiedToClipboard, setCopiedToClipboard] = useState(false);\n  const [isDownloading, setIsDownloading] = useState(false);\n  const [downloadComplete, setDownloadComplete] = useState(false);\n  const [showAdvancedInfo, setShowAdvancedInfo] = useState(false);\n\n  // Function to trigger the extension download\n  const handleDownload = async () => {\n    try {\n      setIsDownloading(true);\n      setDownloadComplete(false);\n      \n      // Create and download the extension zip\n      await createExtensionZip();\n      \n      setDownloadComplete(true);\n    } catch (error) {\n      console.error('Error downloading extension:', error);\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  // Function to copy the extension ID to clipboard\n  const copyExtensionId = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedToClipboard(true);\n    setTimeout(() => setCopiedToClipboard(false), 3000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 rounded-lg shadow-lg p-6 text-white\">\n        <div className=\"flex items-center\">\n          <Chrome className=\"h-12 w-12 mr-4\" />\n          <div>\n            <h1 className=\"text-2xl font-bold\">Trading Extension for Chrome</h1>\n            <p className=\"opacity-90\">Integrate TradingView charts with Poloniex trading in one powerful tool</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"col-span-2 space-y-6\">\n          <div className=\"trading-card\">\n            <h2 className=\"text-xl font-bold mb-4 flex items-center\">\n              <Download className=\"h-5 w-5 mr-2 text-blue-500\" />\n              Download and Install\n            </h2>\n            \n            <div className=\"space-y-6\">\n              <div className=\"bg-blue-50 border-l-4 border-blue-500 p-4 text-blue-700\">\n                <div className=\"flex\">\n                  <Info className=\"h-6 w-6 mr-2 flex-shrink-0\" />\n                  <p>\n                    This Chrome extension integrates TradingView and Poloniex, allowing you to extract chart data, \n                    execute trades directly from charts, and manage your positions seamlessly.\n                  </p>\n                </div>\n              </div>\n              \n              <div>\n                <button \n                  onClick={handleDownload}\n                  disabled={isDownloading}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-md shadow-md flex items-center justify-center w-full md:w-auto disabled:opacity-70 disabled:cursor-not-allowed\"\n                >\n                  {isDownloading ? (\n                    <>\n                      <Loader className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Creating Extension...\n                    </>\n                  ) : downloadComplete ? (\n                    <>\n                      <Check className=\"h-5 w-5 mr-2\" />\n                      Download Again\n                    </>\n                  ) : (\n                    <>\n                      <Download className=\"h-5 w-5 mr-2\" />\n                      Download Extension Package\n                    </>\n                  )}\n                </button>\n                <p className=\"text-sm text-neutral-500 mt-2\">\n                  {downloadComplete \n                    ? \"Extension package downloaded successfully! Extract the ZIP file to continue.\"\n                    : \"Downloads a ZIP file containing the extension files\"}\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-1 mr-3\">1</div>\n                  <div>\n                    <h3 className=\"font-semibold\">Extract the ZIP file</h3>\n                    <p className=\"text-neutral-600\">Unzip the downloaded file to a location you'll remember, like your Desktop or Documents folder.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-1 mr-3\">2</div>\n                  <div>\n                    <h3 className=\"font-semibold\">Open Chrome Extensions Page</h3>\n                    <p className=\"text-neutral-600\">In Chrome, go to <code className=\"bg-neutral-100 px-1.5 py-0.5 rounded\">chrome://extensions</code> or select <strong>Menu</strong> <ArrowRight className=\"inline h-3 w-3\" /> <strong>Settings</strong> <ArrowRight className=\"inline h-3 w-3\" /> <strong>Extensions</strong></p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-1 mr-3\">3</div>\n                  <div>\n                    <h3 className=\"font-semibold\">Enable Developer Mode</h3>\n                    <p className=\"text-neutral-600\">Toggle the \"Developer mode\" switch in the top-right corner of the extensions page.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-1 mr-3\">4</div>\n                  <div>\n                    <h3 className=\"font-semibold\">Load the Extension</h3>\n                    <p className=\"text-neutral-600\">Click the \"Load unpacked\" button and select the folder where you extracted the ZIP file.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-1 mr-3\">5</div>\n                  <div>\n                    <h3 className=\"font-semibold\">Pin the Extension</h3>\n                    <p className=\"text-neutral-600\">Click the puzzle piece icon in Chrome's toolbar, find the Poloniex Trading Extension, and click the pin icon.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"trading-card\">\n            <h2 className=\"text-xl font-bold mb-4 flex items-center\">\n              <MessageSquare className=\"h-5 w-5 mr-2 text-blue-500\" />\n              Extension Features\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-blue-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-2 text-blue-800\">TradingView Integration</h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-blue-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Extract real-time chart data and indicators</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-blue-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Add overlay buttons for quick trading</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-blue-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Cache chart layouts and preferences</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-blue-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Real-time data streaming via WebSocket</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-indigo-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-2 text-indigo-800\">Poloniex Trading Features</h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-indigo-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Display real-time account balances and positions</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-indigo-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">One-click trading from TradingView charts</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-indigo-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Automated trading based on indicators</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-indigo-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Risk management controls and trading limits</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-green-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-2 text-green-800\">Data Management</h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Store historical price data locally</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Sync data between platforms in real-time</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Export trading data and performance metrics</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-green-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Monitor connection status with both platforms</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-purple-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-2 text-purple-800\">User Interface</h3>\n                <ul className=\"space-y-2\">\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-purple-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Clean, intuitive popup interface</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-purple-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Quick access to charts and order entry</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-purple-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Customizable alerts and notifications</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <Check className=\"h-4 w-4 text-purple-500 mr-2 mt-1\" />\n                    <span className=\"text-sm\">Keyboard shortcuts for common actions</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"trading-card\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-bold flex items-center\">\n                <Settings className=\"h-5 w-5 mr-2 text-blue-500\" />\n                Configure and Use\n              </h2>\n              <button \n                onClick={() => setShowAdvancedInfo(!showAdvancedInfo)}\n                className=\"flex items-center text-sm text-blue-600\"\n              >\n                {showAdvancedInfo ? (\n                  <>\n                    <ChevronUp className=\"h-4 w-4 mr-1\" />\n                    Hide Advanced Info\n                  </>\n                ) : (\n                  <>\n                    <ChevronDown className=\"h-4 w-4 mr-1\" />\n                    Show Advanced Info\n                  </>\n                )}\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {(!apiKey || !apiSecret) ? (\n                <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n                  <div className=\"flex\">\n                    <AlertTriangle className=\"h-6 w-6 mr-2 text-yellow-400 flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-medium text-yellow-700\">API Credentials Not Set</p>\n                      <p className=\"text-yellow-600\">\n                        Please set your Poloniex API credentials in the Settings page to enable full functionality in the extension.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"bg-green-50 border-l-4 border-green-400 p-4\">\n                  <div className=\"flex\">\n                    <Check className=\"h-6 w-6 mr-2 text-green-500 flex-shrink-0\" />\n                    <div>\n                      <p className=\"font-medium text-green-700\">API Credentials Found</p>\n                      <p className=\"text-green-600\">\n                        Your API credentials are set up and will be used by the extension.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"bg-blue-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-2\">Getting Started</h3>\n                <ol className=\"space-y-2 list-decimal pl-5\">\n                  <li className=\"text-blue-700\">Install the extension following the steps above</li>\n                  <li className=\"text-blue-700\">Set your API credentials in the Settings page</li>\n                  <li className=\"text-blue-700\">Click the extension icon in Chrome to access the trading popup</li>\n                  <li className=\"text-blue-700\">Visit TradingView and the extension will automatically recognize chart data</li>\n                  <li className=\"text-blue-700\">Use the \"Quick Trade\" buttons that appear on the TradingView chart</li>\n                </ol>\n              </div>\n              \n              {showAdvancedInfo && (\n                <>\n                  <div className=\"mt-4\">\n                    <h3 className=\"font-semibold mb-2\">Extension Integration</h3>\n                    <p className=\"text-neutral-600 mb-3\">\n                      To connect the extension with your personal trading platform, you'll need to note the extension ID after installation.\n                    </p>\n                    \n                    <div className=\"bg-neutral-100 p-3 rounded-md mb-2\">\n                      <div className=\"font-mono text-sm flex items-center\">\n                        <Lock className=\"h-4 w-4 mr-2 text-neutral-500\" />\n                        jcdmopolmojdhpclfbemdpcdneobmnje\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-neutral-500 mb-4\">\n                      After installation, you can find this ID on the extensions page by clicking \"Details\" on the Poloniex Trading Extension.\n                    </p>\n                    \n                    <button\n                      onClick={() => copyExtensionId('jcdmopolmojdhpclfbemdpcdneobmnje')}\n                      className=\"bg-neutral-200 hover:bg-neutral-300 text-neutral-800 py-2 px-4 rounded-md text-sm flex items-center\"\n                    >\n                      {copiedToClipboard ? (\n                        <>\n                          <Check className=\"h-4 w-4 mr-1\" />\n                          Copied!\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"mr-1\">Copy Extension ID</span>\n                        </>\n                      )}\n                    </button>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <h3 className=\"font-semibold mb-2\">Technical Details</h3>\n                    <ul className=\"space-y-2 text-sm text-neutral-600\">\n                      <li className=\"flex items-start\">\n                        <Check className=\"h-4 w-4 text-neutral-500 mr-2 mt-0.5\" />\n                        <span>Uses Manifest v3 for Chrome Extensions</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <Check className=\"h-4 w-4 text-neutral-500 mr-2 mt-0.5\" />\n                        <span>API keys are stored securely in extension storage</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <Check className=\"h-4 w-4 text-neutral-500 mr-2 mt-0.5\" />\n                        <span>Content scripts inject into TradingView and Poloniex</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <Check className=\"h-4 w-4 text-neutral-500 mr-2 mt-0.5\" />\n                        <span>Background service worker handles API connections</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <Check className=\"h-4 w-4 text-neutral-500 mr-2 mt-0.5\" />\n                        <span>WebSocket connection for real-time data streaming</span>\n                      </li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <h3 className=\"font-semibold mb-2\">Extension Controls Preview</h3>\n                    <ExtensionControls />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"col-span-1\">\n          <div className=\"trading-card mb-6\">\n            <h2 className=\"text-xl font-bold mb-4\">Key Benefits</h2>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start\">\n                <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-0.5 mr-2\">1</div>\n                <div>\n                  <h3 className=\"font-semibold\">TradingView + Poloniex Integration</h3>\n                  <p className=\"text-sm text-neutral-600\">Use TradingView's powerful charts with Poloniex's trading capabilities.</p>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-0.5 mr-2\">2</div>\n                <div>\n                  <h3 className=\"font-semibold\">One-Click Trading</h3>\n                  <p className=\"text-sm text-neutral-600\">Execute trades directly from TradingView charts without switching tabs.</p>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-0.5 mr-2\">3</div>\n                <div>\n                  <h3 className=\"font-semibold\">Automated Strategies</h3>\n                  <p className=\"text-sm text-neutral-600\">Create indicator-based strategies that can execute trades automatically.</p>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-0.5 mr-2\">4</div>\n                <div>\n                  <h3 className=\"font-semibold\">Risk Management</h3>\n                  <p className=\"text-sm text-neutral-600\">Set position size limits and customize risk parameters for safer trading.</p>\n                </div>\n              </li>\n              <li className=\"flex items-start\">\n                <div className=\"bg-blue-100 text-blue-700 rounded-full h-6 w-6 flex items-center justify-center flex-shrink-0 mt-0.5 mr-2\">5</div>\n                <div>\n                  <h3 className=\"font-semibold\">Data Synchronization</h3>\n                  <p className=\"text-sm text-neutral-600\">Keep your trading platform and charts in sync for better decision making.</p>\n                </div>\n              </li>\n            </ul>\n          </div>\n          \n          <div className=\"trading-card\">\n            <h2 className=\"text-xl font-bold mb-4\">Screenshots</h2>\n            <div className=\"space-y-3\">\n              <div className=\"border rounded-md overflow-hidden\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\" \n                  alt=\"TradingView chart with extension buttons\" \n                  className=\"w-full\"\n                />\n                <div className=\"p-2 text-xs text-neutral-500\">TradingView Integration</div>\n              </div>\n              <div className=\"border rounded-md overflow-hidden\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1642790551116-18ced420e119?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\" \n                  alt=\"Extension popup interface\" \n                  className=\"w-full\"\n                />\n                <div className=\"p-2 text-xs text-neutral-500\">Trading Dashboard</div>\n              </div>\n              <div className=\"border rounded-md overflow-hidden\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1642790095453-7942ef0a0fdd?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\" \n                  alt=\"Strategy builder interface\" \n                  className=\"w-full\"\n                />\n                <div className=\"p-2 text-xs text-neutral-500\">Strategy Builder</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExtensionDownload;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/LiveTradingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LiveAlert' is defined but never used.","line":50,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is assigned a value but never used.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeStrategies' is assigned a value but never used.","line":62,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connectionState' is assigned a value but never used.","line":68,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'realTimePrice' is assigned a value but never used.","line":75,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2184,2187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2184,2187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2793,2796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2793,2796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":16,"suggestions":[{"fix":{"range":[2867,2909],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useTradingContext } from '../hooks/useTradingContext';\nimport { useWebSocket } from '../services/websocketService';\nimport LiveDataDashboard from '../components/dashboard/LiveDataDashboard';\nimport RealTimePortfolio from '../components/dashboard/RealTimePortfolio';\nimport RealTimeAlerts from '../components/dashboard/RealTimeAlerts';\nimport RecentTrades from '../components/dashboard/RecentTrades';\nimport StrategyPerformance from '../components/dashboard/StrategyPerformance';\nimport MockModeNotice from '../components/MockModeNotice';\nimport { \n  Activity, \n  TrendingUp, \n  TrendingDown, \n  Clock,\n  BarChart3,\n  Wifi,\n  WifiOff,\n  Zap\n} from 'lucide-react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface RealTimeMetric {\n  timestamp: number;\n  value: number;\n  change: number;\n  changePercent: number;\n}\n\ninterface LiveAlert {\n  id: string;\n  type: 'success' | 'warning' | 'error' | 'info';\n  message: string;\n  timestamp: number;\n  acknowledged: boolean;\n}\n\nconst LiveTradingDashboard: React.FC = () => {\n  const { \n    marketData, \n    strategies, \n    activeStrategies, \n    trades, \n    isMockMode \n  } = useTradingContext();\n  \n  const { \n    connectionState, \n    isMockMode: wsIsMockMode, \n    isConnected,\n    on,\n    off\n  } = useWebSocket();\n\n  const [realTimePrice, setRealTimePrice] = useState<RealTimeMetric | null>(null);\n  const [priceHistory, setPriceHistory] = useState<RealTimeMetric[]>([]);\n  const [selectedPair, setSelectedPair] = useState<string>('BTC-USDT');\n  const [isLiveMode, setIsLiveMode] = useState<boolean>(false);\n\n  // Available trading pairs for live monitoring\n  const tradingPairs = [\n    'BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'XRP-USDT', \n    'ADA-USDT', 'DOGE-USDT', 'MATIC-USDT', 'DOT-USDT'\n  ];\n\n  // Handle real-time market data\n  const handleMarketData = useCallback((data: any) => {\n    if (data.pair === selectedPair) {\n      const newMetric: RealTimeMetric = {\n        timestamp: data.timestamp || Date.now(),\n        value: data.close || data.price,\n        change: data.change || 0,\n        changePercent: data.changePercent || 0\n      };\n\n      setRealTimePrice(newMetric);\n      \n      // Update price history (keep last 50 points)\n      setPriceHistory(prev => {\n        const updated = [...prev, newMetric];\n        return updated.slice(-50);\n      });\n    }\n  }, [selectedPair]);\n\n  // Handle real-time trade execution\n  const handleTradeExecuted = useCallback((tradeData: any) => {\n    // This will be handled by the RealTimeAlerts component\n    console.log('Trade executed:', tradeData);\n  }, []);\n\n  // Set up WebSocket event listeners\n  useEffect(() => {\n    if (isLiveMode && isConnected) {\n      on('marketData', handleMarketData);\n      on('tradeExecuted', handleTradeExecuted);\n\n      return () => {\n        off('marketData', handleMarketData);\n        off('tradeExecuted', handleTradeExecuted);\n      };\n    }\n  }, [isLiveMode, isConnected, handleMarketData, handleTradeExecuted, on, off]);\n\n  // Toggle live mode\n  const toggleLiveMode = () => {\n    setIsLiveMode(!isLiveMode);\n    if (!isLiveMode) {\n      // Clear existing data when starting live mode\n      setPriceHistory([]);\n    }\n  };\n\n  // Format chart data for real-time price chart\n  const formatPriceChartData = () => {\n    const labels = priceHistory.map(point => \n      new Date(point.timestamp).toLocaleTimeString()\n    );\n    \n    return {\n      labels,\n      datasets: [\n        {\n          label: `${selectedPair} Price`,\n          data: priceHistory.map(point => point.value),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          borderWidth: 2,\n          fill: true,\n          tension: 0.1\n        }\n      ]\n    };\n  };\n\n  // Chart options\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: `Real-time ${selectedPair} Price`\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n      }\n    },\n    animation: {\n      duration: 0 // No animation for real-time updates\n    }\n  };\n\n  return (\n    <div className=\"container-responsive\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-bold text-neutral-800\">Real-time Trading Dashboard</h1>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Connection Status */}\n          <div className=\"flex items-center space-x-2\">\n            {isConnected ? (\n              <Wifi className=\"h-5 w-5 text-green-500\" />\n            ) : (\n              <WifiOff className=\"h-5 w-5 text-red-500\" />\n            )}\n            <span className=\"text-sm text-neutral-600\">\n              {isConnected ? 'Connected' : 'Disconnected'}\n            </span>\n          </div>\n\n          {/* Pair Selector */}\n          <select\n            value={selectedPair}\n            onChange={(e) => setSelectedPair(e.target.value)}\n            className=\"block w-32 px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n          >\n            {tradingPairs.map(pair => (\n              <option key={pair} value={pair}>{pair}</option>\n            ))}\n          </select>\n\n          {/* Live Mode Toggle */}\n          <button\n            onClick={toggleLiveMode}\n            className={`flex items-center space-x-2 px-4 py-2 rounded-md font-medium transition-colors ${\n              isLiveMode \n                ? 'bg-red-600 text-white hover:bg-red-700' \n                : 'bg-green-600 text-white hover:bg-green-700'\n            }`}\n          >\n            <Activity size={16} />\n            <span>{isLiveMode ? 'Stop Live' : 'Start Live'}</span>\n          </button>\n        </div>\n      </div>\n\n      {(isMockMode || wsIsMockMode) && (\n        <div className=\"mb-6\">\n          <MockModeNotice />\n        </div>\n      )}\n\n      {/* Real-time Portfolio Overview */}\n      <div className=\"mb-6\">\n        <RealTimePortfolio />\n      </div>\n\n      {/* Real-time Price Chart and Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n        {/* Real-time Price Chart */}\n        <div className=\"lg:col-span-2 trading-card\">\n          <h3 className=\"text-lg font-medium mb-4\">Real-time Price Movement</h3>\n          <div className=\"h-64\">\n            {priceHistory.length > 0 ? (\n              <Line data={formatPriceChartData()} options={chartOptions} />\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center\">\n                  <Clock className=\"h-12 w-12 text-neutral-400 mx-auto mb-2\" />\n                  <p className=\"text-neutral-500\">\n                    {isLiveMode ? 'Waiting for real-time data...' : 'Start live mode to see real-time updates'}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Live Alerts */}\n        <div className=\"trading-card\">\n          <RealTimeAlerts maxAlerts={10} />\n        </div>\n      </div>\n\n      {/* Advanced Live Data Dashboard */}\n      <div className=\"mb-6\">\n        <LiveDataDashboard />\n      </div>\n\n      {/* Strategy Performance and Recent Trades */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        <div className=\"trading-card\">\n          <h3 className=\"text-lg font-medium mb-4\">Live Strategy Performance</h3>\n          <StrategyPerformance strategies={strategies} />\n        </div>\n\n        <div className=\"trading-card\">\n          <h3 className=\"text-lg font-medium mb-4\">Recent Live Trades</h3>\n          <RecentTrades trades={trades} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LiveTradingDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/MarketAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Performance.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setMetrics' is assigned a value but never used.","line":21,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPerformanceData' is assigned a value but never used.","line":30,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":45}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\ninterface PerformanceMetrics {\n  totalPnL: number;\n  winRate: number;\n  totalTrades: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  avgTradeReturn: number;\n}\n\ninterface TradePerformanceData {\n  date: string;\n  pnl: number;\n  cumulativePnL: number;\n  trades: number;\n}\n\nconst Performance: React.FC = () => {\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    totalPnL: 1247.89,\n    winRate: 68.5,\n    totalTrades: 127,\n    sharpeRatio: 1.42,\n    maxDrawdown: -8.3,\n    avgTradeReturn: 0.85\n  });\n\n  const [performanceData, setPerformanceData] = useState<TradePerformanceData[]>([\n    { date: '2024-01-01', pnl: 45.23, cumulativePnL: 45.23, trades: 3 },\n    { date: '2024-01-02', pnl: -12.45, cumulativePnL: 32.78, trades: 2 },\n    { date: '2024-01-03', pnl: 78.92, cumulativePnL: 111.70, trades: 4 },\n    { date: '2024-01-04', pnl: 23.15, cumulativePnL: 134.85, trades: 3 },\n    { date: '2024-01-05', pnl: -34.67, cumulativePnL: 100.18, trades: 2 },\n    { date: '2024-01-06', pnl: 156.43, cumulativePnL: 256.61, trades: 5 },\n    { date: '2024-01-07', pnl: 89.76, cumulativePnL: 346.37, trades: 4 }\n  ]);\n\n  const strategyBreakdown = [\n    { name: 'Moving Average', value: 45.2, trades: 58 },\n    { name: 'RSI Divergence', value: 28.7, trades: 34 },\n    { name: 'Breakout', value: 18.3, trades: 22 },\n    { name: 'Mean Reversion', value: 7.8, trades: 13 }\n  ];\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\n  return (\n    <div className=\"min-h-screen bg-neutral-100 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-2\">Performance Analytics</h1>\n          <p className=\"text-neutral-600\">Comprehensive trading performance analysis and metrics</p>\n        </div>\n\n        {/* Key Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-8\">\n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Total P&L</h3>\n            <p className=\"text-2xl font-bold text-green-600\">\n              ${metrics.totalPnL.toFixed(2)}\n            </p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Win Rate</h3>\n            <p className=\"text-2xl font-bold text-blue-600\">\n              {metrics.winRate.toFixed(1)}%\n            </p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Total Trades</h3>\n            <p className=\"text-2xl font-bold text-neutral-700\">\n              {metrics.totalTrades}\n            </p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Sharpe Ratio</h3>\n            <p className=\"text-2xl font-bold text-purple-600\">\n              {metrics.sharpeRatio.toFixed(2)}\n            </p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Max Drawdown</h3>\n            <p className=\"text-2xl font-bold text-red-600\">\n              {metrics.maxDrawdown.toFixed(1)}%\n            </p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-4 border border-neutral-200\">\n            <h3 className=\"text-sm font-medium text-neutral-500 mb-1\">Avg Trade Return</h3>\n            <p className=\"text-2xl font-bold text-emerald-600\">\n              {metrics.avgTradeReturn.toFixed(2)}%\n            </p>\n          </div>\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* P&L Chart */}\n          <div className=\"bg-white rounded-lg p-6 border border-neutral-200\">\n            <h2 className=\"text-xl font-semibold text-neutral-900 mb-4\">Cumulative P&L</h2>\n            <div className=\"h-64\">\n              <LineChart\n                width={500}\n                height={250}\n                data={performanceData}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"cumulativePnL\" \n                  stroke=\"#10B981\" \n                  strokeWidth={2}\n                  name=\"Cumulative P&L\"\n                />\n              </LineChart>\n            </div>\n          </div>\n\n          {/* Daily P&L Chart */}\n          <div className=\"bg-white rounded-lg p-6 border border-neutral-200\">\n            <h2 className=\"text-xl font-semibold text-neutral-900 mb-4\">Daily P&L</h2>\n            <div className=\"h-64\">\n              <BarChart\n                width={500}\n                height={250}\n                data={performanceData}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar \n                  dataKey=\"pnl\" \n                  fill=\"#3B82F6\"\n                  name=\"Daily P&L\"\n                />\n              </BarChart>\n            </div>\n          </div>\n        </div>\n\n        {/* Strategy Breakdown */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Strategy Performance Pie Chart */}\n          <div className=\"bg-white rounded-lg p-6 border border-neutral-200\">\n            <h2 className=\"text-xl font-semibold text-neutral-900 mb-4\">Strategy Breakdown</h2>\n            <div className=\"h-64 flex justify-center\">\n              <PieChart width={400} height={250}>\n                <Pie\n                  data={strategyBreakdown}\n                  cx={200}\n                  cy={125}\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {strategyBreakdown.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </div>\n          </div>\n\n          {/* Strategy Details Table */}\n          <div className=\"bg-white rounded-lg p-6 border border-neutral-200\">\n            <h2 className=\"text-xl font-semibold text-neutral-900 mb-4\">Strategy Details</h2>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b border-neutral-200\">\n                    <th className=\"text-left py-2 text-neutral-700\">Strategy</th>\n                    <th className=\"text-right py-2 text-neutral-700\">P&L</th>\n                    <th className=\"text-right py-2 text-neutral-700\">Trades</th>\n                    <th className=\"text-right py-2 text-neutral-700\">Avg Return</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {strategyBreakdown.map((strategy, index) => (\n                    <tr key={strategy.name} className=\"border-b border-neutral-100\">\n                      <td className=\"py-2 flex items-center\">\n                        <div \n                          className=\"w-3 h-3 rounded-full mr-2\"\n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        ></div>\n                        {strategy.name}\n                      </td>\n                      <td className=\"text-right py-2 text-green-600 font-medium\">\n                        ${strategy.value.toFixed(2)}\n                      </td>\n                      <td className=\"text-right py-2 text-neutral-700\">\n                        {strategy.trades}\n                      </td>\n                      <td className=\"text-right py-2 text-blue-600\">\n                        {(strategy.value / strategy.trades).toFixed(2)}%\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Performance;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":107,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { \n  User, \n  Bell, \n  Key, \n  MessageSquare,\n  Save,\n  AlertTriangle,\n  Check,\n  X\n} from 'lucide-react';\nimport { useSettings } from '../hooks/useSettings';\nimport { usePoloniexData } from '../hooks/usePoloniexData'; \n\n// Check if we're running in a WebContainer environment\nconst IS_WEBCONTAINER = typeof window !== 'undefined' && window.location && window.location.hostname.includes('webcontainer-api.io');\n\nconst Settings: React.FC = () => {\n  const { \n    apiKey, \n    apiSecret, \n    isLiveTrading, \n    emailNotifications, \n    tradeNotifications, \n    priceAlerts, \n    chatNotifications, \n    showExtension,\n    updateSettings,\n    resetSettings,\n    hasStoredCredentials\n  } = useSettings();\n\n  // Get the data refresh function from our hook\n  const { refreshApiConnection, isMockMode } = usePoloniexData();\n  \n  // Local state for the form\n  const [formData, setFormData] = useState({\n    apiKey: '',\n    apiSecret: '',\n    isLiveTrading: false,\n    emailNotifications: true,\n    tradeNotifications: true,\n    priceAlerts: false,\n    chatNotifications: true,\n    showExtension: true\n  });\n\n  // Save status feedback\n  const [saveStatus, setSaveStatus] = useState<{\n    show: boolean;\n    success: boolean;\n    message: string;\n  }>({\n    show: false,\n    success: false,\n    message: ''\n  });\n\n  // Initialize form with current settings\n  useEffect(() => {\n    setFormData({\n      apiKey: apiKey || '',\n      apiSecret: apiSecret || '',\n      isLiveTrading,\n      emailNotifications,\n      tradeNotifications,\n      priceAlerts,\n      chatNotifications,\n      showExtension\n    });\n  }, [apiKey, apiSecret, isLiveTrading, emailNotifications, tradeNotifications, priceAlerts, chatNotifications, showExtension]);\n\n  // Handle form input changes\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Handle form submission\n  const handleSaveSettings = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Clear previous status\n    setSaveStatus({ show: false, success: false, message: '' });\n\n    try {\n      // Update settings in context\n      updateSettings(formData);\n\n      // Refresh API connection with new credentials\n      refreshApiConnection();\n\n      // Show success message\n      setSaveStatus({\n        show: true,\n        success: true,\n        message: 'Settings saved successfully'\n      });\n\n      // Hide message after 3 seconds\n      setTimeout(() => {\n        setSaveStatus(prev => ({ ...prev, show: false }));\n      }, 3000);\n    } catch (error) {\n      // Show error message\n      setSaveStatus({\n        show: true,\n        success: false,\n        message: 'Error saving settings'\n      });\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      <div className=\"md:col-span-1\">\n        <div className=\"trading-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Settings</h2>\n          <nav>\n            <ul className=\"space-y-1\">\n              <li>\n                <a href=\"#api\" className=\"flex items-center py-2 px-3 rounded-md bg-blue-50 text-blue-700\">\n                  <Key className=\"h-5 w-5 mr-3\" />\n                  API Connection\n                </a>\n              </li>\n              <li>\n                <a href=\"#notifications\" className=\"flex items-center py-2 px-3 rounded-md text-neutral-700 hover:bg-neutral-50\">\n                  <Bell className=\"h-5 w-5 mr-3\" />\n                  Notifications\n                </a>\n              </li>\n              <li>\n                <a href=\"#extension\" className=\"flex items-center py-2 px-3 rounded-md text-neutral-700 hover:bg-neutral-50\">\n                  <MessageSquare className=\"h-5 w-5 mr-3\" />\n                  Extension Settings\n                </a>\n              </li>\n              <li>\n                <a href=\"#account\" className=\"flex items-center py-2 px-3 rounded-md text-neutral-700 hover:bg-neutral-50\">\n                  <User className=\"h-5 w-5 mr-3\" />\n                  Account\n                </a>\n              </li>\n            </ul>\n          </nav>\n          \n          {hasStoredCredentials && (\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-md text-sm\">\n              <div className=\"flex items-center text-blue-700 font-medium mb-1\">\n                <Check className=\"h-4 w-4 mr-1\" />\n                Credentials Stored\n              </div>\n              <p className=\"text-blue-600\">\n                {isMockMode \n                  ? \"Using stored credentials in demo mode\" \n                  : \"Using stored credentials for live trading\"}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"md:col-span-2\">\n        <form onSubmit={handleSaveSettings}>\n          {saveStatus.show && (\n            <div className={`mb-4 p-3 rounded-md ${saveStatus.success ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'}`}>\n              <div className=\"flex items-center\">\n                {saveStatus.success ? (\n                  <Check className=\"h-5 w-5 mr-2\" />\n                ) : (\n                  <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                )}\n                <span>{saveStatus.message}</span>\n              </div>\n            </div>\n          )}\n\n          {IS_WEBCONTAINER && (\n            <div className=\"mb-4 p-3 rounded-md bg-yellow-50 border-l-4 border-yellow-400\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                <span className=\"text-yellow-700\">\n                  Running in development environment. Settings will be saved but API connections are simulated.\n                </span>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"space-y-4\">\n            <div id=\"api\" className=\"trading-card\">\n              <div className=\"flex items-center mb-4\">\n                <Key className=\"h-6 w-6 text-blue-500 mr-2\" />\n                <h2 className=\"text-xl font-bold\">API Connection</h2>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label htmlFor=\"apiKey\" className=\"block text-sm font-medium text-neutral-700\">Poloniex API Key</label>\n                  <input\n                    type=\"password\"\n                    id=\"apiKey\"\n                    name=\"apiKey\"\n                    value={formData.apiKey}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full input\"\n                    placeholder=\"Enter your API key\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"apiSecret\" className=\"block text-sm font-medium text-neutral-700\">API Secret</label>\n                  <input\n                    type=\"password\"\n                    id=\"apiSecret\"\n                    name=\"apiSecret\"\n                    value={formData.apiSecret}\n                    onChange={handleChange}\n                    className=\"mt-1 block w-full input\"\n                    placeholder=\"Enter your API secret\"\n                  />\n                  <p className=\"mt-1 text-sm text-neutral-500\">\n                    Your API keys are stored securely in your browser's local storage and never shared.\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <input\n                    id=\"isLiveTrading\"\n                    name=\"isLiveTrading\"\n                    type=\"checkbox\"\n                    checked={formData.isLiveTrading}\n                    onChange={handleChange}\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                  />\n                  <label htmlFor=\"isLiveTrading\" className=\"ml-2 block text-sm text-neutral-700\">\n                    Enable live trading\n                  </label>\n                </div>\n                <p className=\"text-sm text-yellow-600\">\n                  <strong>Warning:</strong> Live trading will execute real trades with real funds.\n                </p>\n              </div>\n            </div>\n            \n            <div id=\"notifications\" className=\"trading-card\">\n              <div className=\"flex items-center mb-4\">\n                <Bell className=\"h-6 w-6 text-blue-500 mr-2\" />\n                <h2 className=\"text-xl font-bold\">Notifications</h2>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Email Notifications</h3>\n                    <p className=\"text-sm text-neutral-500\">Receive important account updates via email</p>\n                  </div>\n                  <div className=\"ml-4\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"emailNotifications\"\n                      name=\"emailNotifications\"\n                      checked={formData.emailNotifications}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Trade Notifications</h3>\n                    <p className=\"text-sm text-neutral-500\">Get notified when trades are executed</p>\n                  </div>\n                  <div className=\"ml-4\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"tradeNotifications\"\n                      name=\"tradeNotifications\"\n                      checked={formData.tradeNotifications}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Price Alerts</h3>\n                    <p className=\"text-sm text-neutral-500\">Receive alerts when prices reach set thresholds</p>\n                  </div>\n                  <div className=\"ml-4\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"priceAlerts\"\n                      name=\"priceAlerts\"\n                      checked={formData.priceAlerts}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div id=\"extension\" className=\"trading-card\">\n              <div className=\"flex items-center mb-4\">\n                <MessageSquare className=\"h-6 w-6 text-blue-500 mr-2\" />\n                <h2 className=\"text-xl font-bold\">Extension Settings</h2>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Show Extension Icon</h3>\n                    <p className=\"text-sm text-neutral-500\">Display the extension icon in your browser</p>\n                  </div>\n                  <div className=\"ml-4\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"showExtension\"\n                      name=\"showExtension\"\n                      checked={formData.showExtension}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Chat Notifications</h3>\n                    <p className=\"text-sm text-neutral-500\">Receive notifications for new chat messages</p>\n                  </div>\n                  <div className=\"ml-4\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"chatNotifications\"\n                      name=\"chatNotifications\"\n                      checked={formData.chatNotifications}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-neutral-300 rounded\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <button\n                type=\"button\"\n                onClick={resetSettings}\n                className=\"btn btn-secondary flex items-center\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Reset Settings\n              </button>\n              \n              <button\n                type=\"submit\"\n                className=\"btn btn-primary flex items-center\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Settings\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/Strategies.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":20,"suggestions":[{"fix":{"range":[1436,1477],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":20,"suggestions":[{"fix":{"range":[2447,2492],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useTradingContext } from '../hooks/useTradingContext';\nimport { Strategy, StrategyType } from '../types';\nimport { Plus, Zap, Settings as SettingsIcon, BarChart2, Play, Pause, Trash2, History, Sparkles } from 'lucide-react';\nimport NewStrategyForm from '../components/strategy/NewStrategyForm';\nimport StrategyDetails from '../components/strategy/StrategyDetails';\nimport { backtestService } from '../services/backtestService';\nimport { BacktestResult } from '../types/backtest';\n\nconst Strategies: React.FC = () => {\n  const { strategies, activeStrategies, toggleStrategyActive, removeStrategy } = useTradingContext();\n  const [showNewStrategyForm, setShowNewStrategyForm] = useState(false);\n  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null);\n  const [backtestResults, setBacktestResults] = useState<BacktestResult | null>(null);\n  const [isBacktesting, setIsBacktesting] = useState(false);\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  \n  const runBacktest = async (strategy: Strategy) => {\n    setIsBacktesting(true);\n    try {\n      const result = await backtestService.runBacktest(strategy, {\n        startDate: '2023-01-01',\n        endDate: '2024-01-01',\n        initialBalance: 10000,\n        feeRate: 0.001,\n        slippage: 0.001,\n        useHistoricalData: true\n      });\n      setBacktestResults(result);\n    } catch (error) {\n      console.error('Backtest failed:', error);\n    } finally {\n      setIsBacktesting(false);\n    }\n  };\n  \n  const optimizeStrategy = async (strategy: Strategy) => {\n    setIsOptimizing(true);\n    try {\n      // Fix the parameter ranges to match the expected type\n      const parameterRanges: Record<string, [number, number, number]> = {\n        shortPeriod: [5, 20, 5],\n        longPeriod: [20, 100, 20]\n      };\n      \n      const results = await backtestService.optimizeStrategy(\n        strategy,\n        {\n          startDate: '2023-01-01',\n          endDate: '2024-01-01',\n          initialBalance: 10000,\n          feeRate: 0.001,\n          slippage: 0.001,\n          useHistoricalData: true\n        },\n        parameterRanges\n      );\n      \n      // Update strategy with best parameters\n      if (results.length > 0) {\n        const bestResult = results[0];\n        strategy.parameters = {\n          ...strategy.parameters,\n          ...bestResult.parameters\n        };\n      }\n    } catch (error) {\n      console.error('Optimization failed:', error);\n    } finally {\n      setIsOptimizing(false);\n    }\n  };\n\n  const handleSelectStrategy = (strategy: Strategy) => {\n    setSelectedStrategy(strategy);\n    setShowNewStrategyForm(false);\n  };\n  \n  const getStrategyTypeIcon = (type: string) => {\n    switch (type) {\n      case StrategyType.MA_CROSSOVER:\n        return <Zap className=\"h-5 w-5 text-blue-500\" />;\n      case StrategyType.RSI:\n        return <BarChart2 className=\"h-5 w-5 text-purple-500\" />;\n      case StrategyType.BREAKOUT:\n        return <SettingsIcon className=\"h-5 w-5 text-orange-500\" />;\n      default:\n        return <Zap className=\"h-5 w-5 text-neutral-500\" />;\n    }\n  };\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      <div className=\"md:col-span-1\">\n        <div className=\"trading-card mb-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold\">Your Strategies</h2>\n            <button \n              className=\"btn btn-primary flex items-center\"\n              onClick={() => {\n                setShowNewStrategyForm(true);\n                setSelectedStrategy(null);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              New\n            </button>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {strategies.map(strategy => (\n              <div \n                key={strategy.id} \n                className={`border rounded-md p-3 cursor-pointer transition-colors duration-200 ${\n                  selectedStrategy?.id === strategy.id \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-neutral-200 hover:border-blue-300'\n                }`}\n                onClick={() => handleSelectStrategy(strategy)}\n              >\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <div className=\"mr-3\">\n                      {getStrategyTypeIcon(strategy.type)}\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">{strategy.name}</h3>\n                      <p className=\"text-xs text-neutral-500\">{strategy.parameters.pair}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <button \n                      className={`p-1.5 rounded-md ${\n                        activeStrategies.includes(strategy.id)\n                          ? 'bg-green-100 text-green-700'\n                          : 'bg-neutral-100 text-neutral-500'\n                      }`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleStrategyActive(strategy.id);\n                      }}\n                    >\n                      {activeStrategies.includes(strategy.id) ? (\n                        <Pause className=\"h-4 w-4\" />\n                      ) : (\n                        <Play className=\"h-4 w-4\" />\n                      )}\n                    </button>\n                    <button\n                      className=\"p-1.5 rounded-md bg-blue-100 text-blue-700 hover:bg-blue-200\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        runBacktest(strategy);\n                      }}\n                      disabled={isBacktesting}\n                    >\n                      <History className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"p-1.5 rounded-md bg-purple-100 text-purple-700 hover:bg-purple-200\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        optimizeStrategy(strategy);\n                      }}\n                      disabled={isOptimizing}\n                    >\n                      <Sparkles className=\"h-4 w-4\" />\n                    </button>\n                    <button \n                      className=\"p-1.5 rounded-md bg-neutral-100 text-neutral-500 hover:bg-red-100 hover:text-red-700\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeStrategy(strategy.id);\n                        if (selectedStrategy?.id === strategy.id) {\n                          setSelectedStrategy(null);\n                        }\n                      }}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {strategies.length === 0 && (\n              <div className=\"text-center py-6 text-neutral-500\">\n                <Zap className=\"h-12 w-12 mx-auto text-neutral-300 mb-2\" />\n                <p>You don't have any strategies yet</p>\n                <button \n                  className=\"mt-2 btn btn-primary\"\n                  onClick={() => setShowNewStrategyForm(true)}\n                >\n                  Create your first strategy\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"md:col-span-2\">\n        <div className=\"trading-card\">\n          {showNewStrategyForm ? (\n            <NewStrategyForm onClose={() => setShowNewStrategyForm(false)} />\n          ) : selectedStrategy ? (\n            <StrategyDetails \n              strategy={selectedStrategy}\n              backtestResults={backtestResults}\n              isBacktesting={isBacktesting}\n              isOptimizing={isOptimizing}\n            />\n          ) : (\n            <div className=\"text-center py-12 text-neutral-500\">\n              <SettingsIcon className=\"h-16 w-16 mx-auto text-neutral-300 mb-3\" />\n              <h3 className=\"text-xl font-medium mb-2\">No Strategy Selected</h3>\n              <p>Select a strategy from the list or create a new one to get started</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Strategies;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/TradeHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/pages/TransactionHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":2,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { Search, Filter, Download, Calendar, ArrowUpDown, FileText } from 'lucide-react';\n\ninterface Transaction {\n  id: string;\n  timestamp: Date;\n  type: 'deposit' | 'withdrawal' | 'trade' | 'fee' | 'interest';\n  currency: string;\n  amount: number;\n  status: 'completed' | 'pending' | 'failed';\n  txHash?: string;\n  description: string;\n  balance: number;\n}\n\ninterface TransactionFilters {\n  startDate: string;\n  endDate: string;\n  currency: string;\n  type: string;\n  status: string;\n}\n\nconst TransactionHistory: React.FC = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<TransactionFilters>({\n    startDate: '',\n    endDate: '',\n    currency: '',\n    type: '',\n    status: ''\n  });\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortField, setSortField] = useState<keyof Transaction>('timestamp');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(20);\n\n  // Generate mock transaction data\n  useEffect(() => {\n    const generateMockTransactions = (): Transaction[] => {\n      const mockData: Transaction[] = [];\n      const types: Transaction['type'][] = ['deposit', 'withdrawal', 'trade', 'fee', 'interest'];\n      const currencies = ['USDT', 'BTC', 'ETH', 'ADA', 'DOT'];\n      const statuses: Transaction['status'][] = ['completed', 'pending', 'failed'];\n\n      for (let i = 0; i < 150; i++) {\n        const type = types[Math.floor(Math.random() * types.length)];\n        const currency = currencies[Math.floor(Math.random() * currencies.length)];\n        const amount = type === 'fee' ? -Math.random() * 10 : (Math.random() - 0.5) * 1000;\n        const timestamp = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000);\n\n        mockData.push({\n          id: `txn_${i.toString().padStart(6, '0')}`,\n          timestamp,\n          type,\n          currency,\n          amount,\n          status: statuses[Math.floor(Math.random() * statuses.length)],\n          txHash: type === 'deposit' || type === 'withdrawal' ? \n            `0x${Math.random().toString(16).slice(2, 42)}` : undefined,\n          description: getTransactionDescription(type, currency, amount),\n          balance: 10000 + Math.random() * 50000\n        });\n      }\n\n      return mockData.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    };\n\n    setTransactions(generateMockTransactions());\n  }, []);\n\n  // Helper function to generate transaction descriptions\n  const getTransactionDescription = (type: Transaction['type'], currency: string, amount: number): string => {\n    switch (type) {\n      case 'deposit':\n        return `Deposit ${currency} to account`;\n      case 'withdrawal':\n        return `Withdraw ${currency} from account`;\n      case 'trade':\n        return `${amount > 0 ? 'Buy' : 'Sell'} ${currency}`;\n      case 'fee':\n        return `Trading fee for ${currency}`;\n      case 'interest':\n        return `Interest earned on ${currency}`;\n      default:\n        return `${type} transaction`;\n    }\n  };\n\n  // Apply filters and search\n  useEffect(() => {\n    let filtered = [...transactions];\n\n    // Apply search\n    if (searchQuery) {\n      filtered = filtered.filter(transaction => \n        transaction.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.currency.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.txHash?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Apply filters\n    if (filters.startDate) {\n      filtered = filtered.filter(transaction => \n        transaction.timestamp >= new Date(filters.startDate)\n      );\n    }\n\n    if (filters.endDate) {\n      filtered = filtered.filter(transaction => \n        transaction.timestamp <= new Date(filters.endDate + 'T23:59:59')\n      );\n    }\n\n    if (filters.currency) {\n      filtered = filtered.filter(transaction => \n        transaction.currency === filters.currency\n      );\n    }\n\n    if (filters.type) {\n      filtered = filtered.filter(transaction => \n        transaction.type === filters.type\n      );\n    }\n\n    if (filters.status) {\n      filtered = filtered.filter(transaction => \n        transaction.status === filters.status\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (aValue instanceof Date) aValue = aValue.getTime();\n      if (bValue instanceof Date) bValue = bValue.getTime();\n\n      if (sortDirection === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n\n    setFilteredTransactions(filtered);\n    setCurrentPage(1);\n  }, [transactions, searchQuery, filters, sortField, sortDirection]);\n\n  // Pagination\n  const paginatedTransactions = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return filteredTransactions.slice(startIndex, startIndex + itemsPerPage);\n  }, [filteredTransactions, currentPage, itemsPerPage]);\n\n  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);\n\n  const handleSort = (field: keyof Transaction) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  const exportToCSV = () => {\n    const csvData = filteredTransactions.map(transaction => ({\n      ID: transaction.id,\n      Date: transaction.timestamp.toISOString(),\n      Type: transaction.type,\n      Currency: transaction.currency,\n      Amount: transaction.amount,\n      Status: transaction.status,\n      Description: transaction.description,\n      Balance: transaction.balance,\n      TxHash: transaction.txHash || ''\n    }));\n\n    const csvContent = [\n      Object.keys(csvData[0]).join(','),\n      ...csvData.map(row => Object.values(row).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `transaction-history-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const getStatusColor = (status: Transaction['status']) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeColor = (type: Transaction['type']) => {\n    switch (type) {\n      case 'deposit':\n        return 'text-green-600';\n      case 'withdrawal':\n        return 'text-red-600';\n      case 'trade':\n        return 'text-blue-600';\n      case 'fee':\n        return 'text-orange-600';\n      case 'interest':\n        return 'text-purple-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n          <FileText className=\"w-8 h-8 mr-3 text-blue-600\" />\n          Transaction History\n        </h1>\n        <p className=\"mt-2 text-gray-600\">\n          View and manage your complete transaction history\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search transactions...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"flex items-center px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filters\n            </button>\n            <button\n              onClick={exportToCSV}\n              disabled={filteredTransactions.length === 0}\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export CSV\n            </button>\n          </div>\n        </div>\n\n        {/* Filter Controls */}\n        {showFilters && (\n          <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 pt-4 border-t\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Start Date</label>\n              <input\n                type=\"date\"\n                value={filters.startDate}\n                onChange={(e) => setFilters({...filters, startDate: e.target.value})}\n                className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">End Date</label>\n              <input\n                type=\"date\"\n                value={filters.endDate}\n                onChange={(e) => setFilters({...filters, endDate: e.target.value})}\n                className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Currency</label>\n              <select\n                value={filters.currency}\n                onChange={(e) => setFilters({...filters, currency: e.target.value})}\n                className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n              >\n                <option value=\"\">All Currencies</option>\n                <option value=\"USDT\">USDT</option>\n                <option value=\"BTC\">BTC</option>\n                <option value=\"ETH\">ETH</option>\n                <option value=\"ADA\">ADA</option>\n                <option value=\"DOT\">DOT</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Type</label>\n              <select\n                value={filters.type}\n                onChange={(e) => setFilters({...filters, type: e.target.value})}\n                className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n              >\n                <option value=\"\">All Types</option>\n                <option value=\"deposit\">Deposit</option>\n                <option value=\"withdrawal\">Withdrawal</option>\n                <option value=\"trade\">Trade</option>\n                <option value=\"fee\">Fee</option>\n                <option value=\"interest\">Interest</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n              <select\n                value={filters.status}\n                onChange={(e) => setFilters({...filters, status: e.target.value})}\n                className=\"w-full p-2 border border-gray-300 rounded-md text-sm\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"failed\">Failed</option>\n              </select>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Transaction Table */}\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                {[\n                  { key: 'timestamp', label: 'Date/Time' },\n                  { key: 'id', label: 'Transaction ID' },\n                  { key: 'type', label: 'Type' },\n                  { key: 'currency', label: 'Currency' },\n                  { key: 'amount', label: 'Amount' },\n                  { key: 'status', label: 'Status' },\n                  { key: 'description', label: 'Description' }\n                ].map((header) => (\n                  <th\n                    key={header.key}\n                    onClick={() => handleSort(header.key as keyof Transaction)}\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n                  >\n                    <div className=\"flex items-center\">\n                      {header.label}\n                      <ArrowUpDown className=\"w-3 h-3 ml-1\" />\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {paginatedTransactions.map((transaction) => (\n                <tr key={transaction.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {transaction.timestamp.toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-600\">\n                    {transaction.id}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    <span className={`font-medium capitalize ${getTypeColor(transaction.type)}`}>\n                      {transaction.type}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {transaction.currency}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    <span className={`font-medium ${transaction.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {transaction.amount >= 0 ? '+' : ''}{transaction.amount.toFixed(6)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(transaction.status)}`}>\n                      {transaction.status}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-600\">\n                    {transaction.description}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between\">\n            <div className=\"flex-1 flex justify-between sm:hidden\">\n              <button\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                disabled={currentPage === 1}\n                className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n              >\n                Previous\n              </button>\n              <button\n                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                disabled={currentPage === totalPages}\n                className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n              >\n                Next\n              </button>\n            </div>\n            <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-700\">\n                  Showing{' '}\n                  <span className=\"font-medium\">{(currentPage - 1) * itemsPerPage + 1}</span>\n                  {' '}to{' '}\n                  <span className=\"font-medium\">\n                    {Math.min(currentPage * itemsPerPage, filteredTransactions.length)}\n                  </span>\n                  {' '}of{' '}\n                  <span className=\"font-medium\">{filteredTransactions.length}</span>\n                  {' '}results\n                </p>\n              </div>\n              <div>\n                <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n                  <button\n                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                    disabled={currentPage === 1}\n                    className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                  >\n                    Previous\n                  </button>\n                  {[...Array(Math.min(5, totalPages))].map((_, i) => {\n                    const page = i + 1;\n                    return (\n                      <button\n                        key={page}\n                        onClick={() => setCurrentPage(page)}\n                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\n                          currentPage === page\n                            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'\n                            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'\n                        }`}\n                      >\n                        {page}\n                      </button>\n                    );\n                  })}\n                  <button\n                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                    disabled={currentPage === totalPages}\n                    className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                  >\n                    Next\n                  </button>\n                </nav>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"mt-6 bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Summary</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{filteredTransactions.length}</div>\n            <div className=\"text-sm text-gray-500\">Total Transactions</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {filteredTransactions.filter(t => t.amount > 0).length}\n            </div>\n            <div className=\"text-sm text-gray-500\">Credits</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {filteredTransactions.filter(t => t.amount < 0).length}\n            </div>\n            <div className=\"text-sm text-gray-500\">Debits</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {new Set(filteredTransactions.map(t => t.currency)).size}\n            </div>\n            <div className=\"text-sm text-gray-500\">Currencies</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionHistory;","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/advancedBacktestService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'scenario' is defined but never used.","line":914,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":914,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { poloniexApi } from \"@/services/poloniexAPI\";\nimport { MarketData, Strategy } from \"@/types\";\nimport {\n  BacktestOptions,\n  BacktestResult,\n  BacktestTrade,\n} from \"@/types/backtest\";\nimport { executeStrategy } from \"@/utils/strategyExecutors\";\n\n// Enhanced metrics for Phase 4\ninterface AdvancedBacktestMetrics {\n  // Existing metrics\n  dailyReturns: number[];\n  monthlyReturns: number[];\n  volatility: number;\n  profitFactor: number;\n  recoveryFactor: number;\n  averageWin: number;\n  averageLoss: number;\n  largestWin: number;\n  largestLoss: number;\n  averageHoldingPeriod: number;\n  bestMonth: number;\n  worstMonth: number;\n\n  // Phase 4 Advanced metrics\n  valueAtRisk95: number;\n  valueAtRisk99: number;\n  conditionalVaR95: number;\n  conditionalVaR99: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n  omegaRatio: number;\n  kappa3: number;\n  gainToPainRatio: number;\n  ulcerIndex: number;\n  martinRatio: number;\n  painIndex: number;\n  burkeRatio: number;\n  modifiedSharpe: number;\n  treynorRatio: number;\n  informationRatio: number;\n  modigliani: number;\n  excessReturnOnVaR: number;\n  conditionalSharpe: number;\n  skewness: number;\n  kurtosis: number;\n  tailRatio: number;\n  upnessIndex: number;\n  upsidePotentialRatio: number;\n}\n\n// Enhanced historical data management\ninterface HistoricalDataRequest {\n  symbols: string[];\n  timeframes: string[];\n  startDate: string;\n  endDate: string;\n  includeVolume: boolean;\n  adjustForSplits: boolean;\n  adjustForDividends: boolean;\n}\n\ninterface MultiTimeframeData {\n  [timeframe: string]: MarketData[];\n}\n\n// Portfolio backtesting interface\ninterface PortfolioBacktestOptions extends BacktestOptions {\n  strategies: Strategy[];\n  weights: number[];\n  rebalanceFrequency: \"daily\" | \"weekly\" | \"monthly\" | \"quarterly\";\n  correlationThreshold: number;\n  maxAllocation: number;\n}\n\ninterface PortfolioBacktestResult {\n  portfolioBalance: number;\n  strategyReturns: BacktestResult[];\n  correlationMatrix: number[][];\n  diversificationRatio: number;\n  portfolioSharpe: number;\n  portfolioVolatility: number;\n  maxPortfolioDrawdown: number;\n  rebalanceEvents: RebalanceEvent[];\n}\n\ninterface RebalanceEvent {\n  date: string;\n  newWeights: number[];\n  reason: string;\n  transactionCosts: number;\n}\n\n// Stress testing interface\ninterface StressTestScenario {\n  name: string;\n  marketConditions: {\n    volatilityMultiplier: number;\n    returnShift: number;\n    correlationShift: number;\n    liquidityImpact: number;\n  };\n}\n\nexport class AdvancedBacktestService {\n  private static instance: AdvancedBacktestService;\n  private historicalDataCache: Map<string, MultiTimeframeData> = new Map();\n  private correlationCache: Map<string, number[][]> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): AdvancedBacktestService {\n    if (!AdvancedBacktestService.instance) {\n      AdvancedBacktestService.instance = new AdvancedBacktestService();\n    }\n    return AdvancedBacktestService.instance;\n  }\n\n  /**\n   * Enhanced backtest with advanced metrics calculation\n   */\n  public async runAdvancedBacktest(\n    strategy: Strategy,\n    options: BacktestOptions\n  ): Promise<BacktestResult & { advancedMetrics: AdvancedBacktestMetrics }> {\n    // Load enhanced historical data\n    const data = await this.getMultiTimeframeData({\n      symbols: [strategy.parameters.pair],\n      timeframes: [\"1h\", \"4h\", \"1d\"],\n      startDate: options.startDate,\n      endDate: options.endDate,\n      includeVolume: true,\n      adjustForSplits: true,\n      adjustForDividends: true,\n    });\n\n    const primaryData = data[\"1h\"] || data[\"4h\"] || data[\"1d\"];\n    if (!primaryData || primaryData.length === 0) {\n      throw new Error(\"No historical data available\");\n    }\n\n    // Initialize backtest state\n    let balance = options.initialBalance;\n    const trades: BacktestTrade[] = [];\n    let highWaterMark = balance;\n    const equityCurve: {\n      timestamp: number;\n      balance: number;\n      drawdown: number;\n    }[] = [];\n\n    // Enhanced execution with market microstructure considerations\n    for (let i = 50; i < primaryData.length; i++) {\n      const marketData = primaryData.slice(0, i + 1);\n      const signal = executeStrategy(strategy, marketData);\n\n      if (signal.signal) {\n        const price = primaryData[i].close;\n        const amount = this.calculateOptimalPositionSize(\n          balance,\n          price,\n          marketData\n        );\n\n        // Execute trade with enhanced slippage and market impact models\n        const trade = this.executeAdvancedTrade(\n          signal.signal,\n          price,\n          amount,\n          balance,\n          options,\n          marketData[marketData.length - 1]\n        );\n\n        trades.push(trade);\n        balance = trade.balance;\n\n        // Update high water mark and calculate drawdown\n        if (balance > highWaterMark) {\n          highWaterMark = balance;\n        }\n\n        const drawdown = (highWaterMark - balance) / highWaterMark;\n        equityCurve.push({\n          timestamp: primaryData[i].timestamp,\n          balance,\n          drawdown,\n        });\n      }\n    }\n\n    // Calculate enhanced metrics\n    const basicMetrics = this.calculateBasicMetrics(\n      trades,\n      options.initialBalance\n    );\n    const advancedMetrics = this.calculateAdvancedMetrics(\n      trades,\n      equityCurve,\n      options.initialBalance\n    );\n\n    const result: BacktestResult = {\n      strategyId: strategy.id,\n      startDate: options.startDate,\n      endDate: options.endDate,\n      initialBalance: options.initialBalance,\n      finalBalance: balance,\n      totalPnL: balance - options.initialBalance,\n      totalTrades: trades.length,\n      winningTrades: trades.filter((t) => t.pnl > 0).length,\n      losingTrades: trades.filter((t) => t.pnl < 0).length,\n      winRate:\n        trades.length > 0\n          ? (trades.filter((t) => t.pnl > 0).length / trades.length) * 100\n          : 0,\n      maxDrawdown: this.calculateMaxDrawdown(trades),\n      sharpeRatio: this.calculateSharpeRatio(trades),\n      trades,\n      metrics: basicMetrics,\n    };\n\n    return {\n      ...result,\n      advancedMetrics,\n    };\n  }\n\n  /**\n   * Portfolio-level backtesting\n   */\n  public async runPortfolioBacktest(\n    options: PortfolioBacktestOptions\n  ): Promise<PortfolioBacktestResult> {\n    const strategyResults: BacktestResult[] = [];\n    const rebalanceEvents: RebalanceEvent[] = [];\n\n    // Run individual strategy backtests\n    for (const strategy of options.strategies) {\n      const result = await this.runAdvancedBacktest(strategy, options);\n      strategyResults.push(result);\n    }\n\n    // Calculate portfolio metrics\n    const correlationMatrix =\n      this.calculateStrategyCorrelations(strategyResults);\n    const portfolioReturns = this.calculatePortfolioReturns(\n      strategyResults,\n      options.weights\n    );\n    const diversificationRatio = this.calculateDiversificationRatio(\n      strategyResults,\n      options.weights,\n      correlationMatrix\n    );\n\n    return {\n      portfolioBalance: portfolioReturns.reduce(\n        (sum, r) => sum + r,\n        options.initialBalance\n      ),\n      strategyReturns: strategyResults,\n      correlationMatrix,\n      diversificationRatio,\n      portfolioSharpe: this.calculatePortfolioSharpe(portfolioReturns),\n      portfolioVolatility: this.calculatePortfolioVolatility(portfolioReturns),\n      maxPortfolioDrawdown:\n        this.calculatePortfolioMaxDrawdown(portfolioReturns),\n      rebalanceEvents,\n    };\n  }\n\n  /**\n   * Stress testing with various market scenarios\n   */\n  public async runStressTest(\n    strategy: Strategy,\n    options: BacktestOptions,\n    scenarios: StressTestScenario[]\n  ): Promise<Record<string, BacktestResult>> {\n    const results: Record<string, BacktestResult> = {};\n\n    for (const scenario of scenarios) {\n      try {\n        // Modify market data according to stress scenario\n        const stressedResult = await this.runStressScenario(\n          strategy,\n          options,\n          scenario\n        );\n        results[scenario.name] = stressedResult;\n      } catch {\n        // Continue with other scenarios\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Multi-timeframe data retrieval with caching\n   */\n  private async getMultiTimeframeData(\n    request: HistoricalDataRequest\n  ): Promise<MultiTimeframeData> {\n    const cacheKey = JSON.stringify(request);\n\n    if (this.historicalDataCache.has(cacheKey)) {\n      return this.historicalDataCache.get(cacheKey)!;\n    }\n\n    const data: MultiTimeframeData = {};\n\n    for (const timeframe of request.timeframes) {\n      for (const symbol of request.symbols) {\n        try {\n          const marketData = await poloniexApi.getHistoricalData(\n            symbol,\n            request.startDate,\n            request.endDate\n          );\n\n          if (!data[timeframe]) {\n            data[timeframe] = [];\n          }\n          data[timeframe] = marketData;\n        } catch {\n          // Continue with other symbols/timeframes\n        }\n      }\n    }\n\n    this.historicalDataCache.set(cacheKey, data);\n    return data;\n  }\n\n  /**\n   * Enhanced position sizing with volatility adjustment\n   */\n  private calculateOptimalPositionSize(\n    balance: number,\n    price: number,\n    marketData: MarketData[]\n  ): number {\n    // Calculate recent volatility\n    const returns = marketData\n      .slice(-20)\n      .map((candle, i) => {\n        if (i === 0) return 0;\n        return (\n          (candle.close - marketData[marketData.length - 20 + i - 1].close) /\n          marketData[marketData.length - 20 + i - 1].close\n        );\n      })\n      .slice(1);\n\n    const volatility = Math.sqrt(\n      returns.reduce((sum, r) => sum + r * r, 0) / returns.length\n    );\n\n    // Kelly criterion-inspired position sizing with volatility adjustment\n    const basePositionPercent = 0.02; // 2% base risk\n    const volatilityAdjustment = Math.max(\n      0.1,\n      Math.min(2.0, 1 / (volatility * 100))\n    );\n    const adjustedPercent = basePositionPercent * volatilityAdjustment;\n\n    return (balance * adjustedPercent) / price;\n  }\n\n  /**\n   * Enhanced trade execution with market microstructure\n   */\n  private executeAdvancedTrade(\n    type: \"BUY\" | \"SELL\",\n    price: number,\n    amount: number,\n    balance: number,\n    options: BacktestOptions,\n    marketData: MarketData\n  ): BacktestTrade {\n    // Enhanced slippage model based on volume and volatility\n    const volumeImpact = Math.min(\n      0.001,\n      (amount / (marketData.volume || 1000000)) * 0.01\n    );\n    const volatilityImpact =\n      (Math.abs(marketData.high - marketData.low) / marketData.close) * 0.1;\n    const enhancedSlippage = options.slippage + volumeImpact + volatilityImpact;\n\n    // Apply enhanced slippage\n    const executionPrice =\n      type === \"BUY\"\n        ? price * (1 + enhancedSlippage)\n        : price * (1 - enhancedSlippage);\n\n    const total = executionPrice * amount;\n    const fee = total * options.feeRate;\n\n    // Calculate PnL (simplified for single trade)\n    const pnl = type === \"SELL\" ? total - fee - price * amount : 0;\n    const pnlPercent = (pnl / (price * amount)) * 100;\n\n    // Update balance\n    const newBalance =\n      type === \"BUY\" ? balance - total - fee : balance + total - fee;\n\n    return {\n      timestamp: marketData.timestamp,\n      type,\n      price: executionPrice,\n      amount,\n      total,\n      pnl,\n      pnlPercent,\n      balance: newBalance,\n    };\n  }\n\n  /**\n   * Calculate advanced risk and performance metrics\n   */\n  private calculateAdvancedMetrics(\n    trades: BacktestTrade[],\n    equityCurve: { timestamp: number; balance: number; drawdown: number }[],\n    initialBalance: number\n  ): AdvancedBacktestMetrics {\n    const returns = trades.map((t) => t.pnlPercent / 100);\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n\n    // Sort returns for quantile calculations\n    const sortedReturns = [...returns].sort((a, b) => a - b);\n    const negativeReturns = returns.filter((r) => r < 0);\n    const positiveReturns = returns.filter((r) => r > 0);\n\n    // Basic statistics\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance =\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n      returns.length;\n    const stdDev = Math.sqrt(variance);\n    const skewness = this.calculateSkewness(returns, mean, stdDev);\n    const kurtosis = this.calculateKurtosis(returns, mean, stdDev);\n\n    // VaR calculations\n    const var95Index = Math.floor(0.05 * sortedReturns.length);\n    const var99Index = Math.floor(0.01 * sortedReturns.length);\n    const var95Value = sortedReturns[var95Index] || 0;\n    const var99Value = sortedReturns[var99Index] || 0;\n\n    // Conditional VaR (Expected Shortfall)\n    const cvar95 =\n      sortedReturns.slice(0, var95Index + 1).reduce((sum, r) => sum + r, 0) /\n        (var95Index + 1) || 0;\n    const cvar99 =\n      sortedReturns.slice(0, var99Index + 1).reduce((sum, r) => sum + r, 0) /\n        (var99Index + 1) || 0;\n\n    // Downside metrics\n    const downsideReturns = returns.filter((r) => r < 0);\n    const downsideDeviation = Math.sqrt(\n      downsideReturns.reduce((sum, r) => sum + r * r, 0) /\n        downsideReturns.length\n    );\n    const sortinoRatio = downsideDeviation > 0 ? mean / downsideDeviation : 0;\n\n    // Drawdown-based metrics\n    const maxDrawdown = Math.max(...equityCurve.map((e) => e.drawdown));\n    const calmarRatio = maxDrawdown > 0 ? (mean * 252) / maxDrawdown : 0; // Annualized\n\n    // Advanced ratios\n    const ulcerIndex = Math.sqrt(\n      equityCurve.reduce((sum, e) => sum + e.drawdown * e.drawdown, 0) /\n        equityCurve.length\n    );\n    const martinRatio = ulcerIndex > 0 ? mean / ulcerIndex : 0;\n\n    // Omega ratio\n    const threshold = 0;\n    const gainsAboveThreshold = returns\n      .filter((r) => r > threshold)\n      .reduce((sum, r) => sum + (r - threshold), 0);\n    const lossesBelowThreshold = Math.abs(\n      returns\n        .filter((r) => r < threshold)\n        .reduce((sum, r) => sum + (r - threshold), 0)\n    );\n    const omegaRatio =\n      lossesBelowThreshold > 0 ? gainsAboveThreshold / lossesBelowThreshold : 0;\n\n    return {\n      // Basic metrics (existing)\n      dailyReturns,\n      monthlyReturns,\n      volatility: stdDev,\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor:\n        maxDrawdown > 0\n          ? (trades[trades.length - 1]?.balance - initialBalance) /\n            (maxDrawdown * initialBalance)\n          : 0,\n      averageWin:\n        positiveReturns.reduce((sum, r) => sum + r, 0) /\n          positiveReturns.length || 0,\n      averageLoss:\n        Math.abs(\n          negativeReturns.reduce((sum, r) => sum + r, 0) /\n            negativeReturns.length\n        ) || 0,\n      largestWin: Math.max(...returns),\n      largestLoss: Math.min(...returns),\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: Math.max(...monthlyReturns),\n      worstMonth: Math.min(...monthlyReturns),\n\n      // Advanced metrics (Phase 4)\n      valueAtRisk95: Math.abs(var95Value) * 100,\n      valueAtRisk99: Math.abs(var99Value) * 100,\n      conditionalVaR95: Math.abs(cvar95) * 100,\n      conditionalVaR99: Math.abs(cvar99) * 100,\n      calmarRatio,\n      sortinoRatio,\n      omegaRatio,\n      kappa3: downsideDeviation > 0 ? mean / Math.pow(downsideDeviation, 3) : 0,\n      gainToPainRatio: this.calculateGainToPainRatio(returns),\n      ulcerIndex,\n      martinRatio,\n      painIndex: this.calculatePainIndex(equityCurve),\n      burkeRatio: this.calculateBurkeRatio(returns, equityCurve),\n      modifiedSharpe: this.calculateModifiedSharpe(returns, skewness, kurtosis),\n      treynorRatio: 0, // Would need beta calculation with market data\n      informationRatio: 0, // Would need benchmark data\n      modigliani: 0, // Would need market data for calculation\n      excessReturnOnVaR: var95Value !== 0 ? mean / Math.abs(var95Value) : 0,\n      conditionalSharpe: cvar95 !== 0 ? mean / Math.abs(cvar95) : 0,\n      skewness,\n      kurtosis,\n      tailRatio: var99Value !== 0 ? Math.abs(var95Value / var99Value) : 0,\n      upnessIndex: this.calculateUpnessIndex(returns),\n      upsidePotentialRatio: this.calculateUpsidePotentialRatio(returns),\n    };\n  }\n\n  // Helper methods for advanced metric calculations\n  private calculateSkewness(\n    returns: number[],\n    mean: number,\n    stdDev: number\n  ): number {\n    if (stdDev === 0) return 0;\n    const n = returns.length;\n    return (\n      (n / ((n - 1) * (n - 2))) *\n      returns.reduce((sum, r) => sum + Math.pow((r - mean) / stdDev, 3), 0)\n    );\n  }\n\n  private calculateKurtosis(\n    returns: number[],\n    mean: number,\n    stdDev: number\n  ): number {\n    if (stdDev === 0) return 0;\n    const n = returns.length;\n    const factor = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n    const adjustment = (3 * (n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n    return (\n      factor *\n        returns.reduce((sum, r) => sum + Math.pow((r - mean) / stdDev, 4), 0) -\n      adjustment\n    );\n  }\n\n  private calculateGainToPainRatio(returns: number[]): number {\n    const gains = returns.filter((r) => r > 0).reduce((sum, r) => sum + r, 0);\n    const pains = Math.abs(\n      returns.filter((r) => r < 0).reduce((sum, r) => sum + r, 0)\n    );\n    return pains > 0 ? gains / pains : 0;\n  }\n\n  private calculatePainIndex(equityCurve: { drawdown: number }[]): number {\n    return (\n      equityCurve.reduce((sum, e) => sum + e.drawdown, 0) / equityCurve.length\n    );\n  }\n\n  private calculateBurkeRatio(\n    returns: number[],\n    equityCurve: { drawdown: number }[]\n  ): number {\n    const annualizedReturn =\n      (returns.reduce((sum, r) => sum + r, 0) / returns.length) * 252;\n    const burkeRatio = Math.sqrt(\n      equityCurve.reduce((sum, e) => sum + e.drawdown * e.drawdown, 0)\n    );\n    return burkeRatio > 0 ? annualizedReturn / burkeRatio : 0;\n  }\n\n  private calculateModifiedSharpe(\n    returns: number[],\n    skewness: number,\n    kurtosis: number\n  ): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n        returns.length\n    );\n\n    if (stdDev === 0) return 0;\n\n    const sharpe = mean / stdDev;\n    const modification =\n      1 + (skewness / 6) * sharpe - ((kurtosis - 3) / 24) * sharpe * sharpe;\n    return sharpe * modification;\n  }\n\n  private calculateUpnessIndex(returns: number[]): number {\n    const positiveReturns = returns.filter((r) => r > 0);\n    return positiveReturns.length / returns.length;\n  }\n\n  private calculateUpsidePotentialRatio(returns: number[]): number {\n    const threshold = 0;\n    const upsidePotential =\n      returns\n        .filter((r) => r > threshold)\n        .reduce((sum, r) => sum + (r - threshold), 0) / returns.length;\n    const downsideDeviation = Math.sqrt(\n      returns\n        .filter((r) => r < threshold)\n        .reduce((sum, r) => sum + Math.pow(r - threshold, 2), 0) /\n        returns.length\n    );\n\n    return downsideDeviation > 0 ? upsidePotential / downsideDeviation : 0;\n  }\n\n  // Existing helper methods (maintain compatibility)\n  private calculateBasicMetrics(\n    trades: BacktestTrade[],\n    initialBalance: number\n  ) {\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n    const positiveReturns = trades.filter((t) => t.pnl > 0);\n    const negativeReturns = trades.filter((t) => t.pnl < 0);\n\n    return {\n      dailyReturns,\n      monthlyReturns,\n      volatility: this.calculateVolatility(dailyReturns),\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor:\n        this.calculateMaxDrawdown(trades) > 0\n          ? (trades[trades.length - 1]?.balance - initialBalance) /\n            (this.calculateMaxDrawdown(trades) * initialBalance)\n          : 0,\n      averageWin:\n        positiveReturns.reduce((sum, t) => sum + t.pnl, 0) /\n          positiveReturns.length || 0,\n      averageLoss:\n        Math.abs(\n          negativeReturns.reduce((sum, t) => sum + t.pnl, 0) /\n            negativeReturns.length\n        ) || 0,\n      largestWin: trades.length > 0 ? Math.max(...trades.map((t) => t.pnl)) : 0,\n      largestLoss:\n        trades.length > 0 ? Math.min(...trades.map((t) => t.pnl)) : 0,\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: monthlyReturns.length > 0 ? Math.max(...monthlyReturns) : 0,\n      worstMonth: monthlyReturns.length > 0 ? Math.min(...monthlyReturns) : 0,\n    };\n  }\n\n  private calculateVolatility(returns: number[]): number {\n    if (returns.length < 2) return 0;\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) /\n        returns.length\n    );\n  }\n\n  private calculateDailyReturns(trades: BacktestTrade[]): number[] {\n    const dailyPnL = new Map<string, number>();\n\n    trades.forEach((trade) => {\n      const date = new Date(trade.timestamp).toISOString().split(\"T\")[0];\n      const currentPnL = dailyPnL.get(date) || 0;\n      dailyPnL.set(date, currentPnL + trade.pnl);\n    });\n\n    return Array.from(dailyPnL.values());\n  }\n\n  private calculateMonthlyReturns(trades: BacktestTrade[]): number[] {\n    const monthlyPnL = new Map<string, number>();\n\n    trades.forEach((trade) => {\n      const date = new Date(trade.timestamp);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      const currentPnL = monthlyPnL.get(monthKey) || 0;\n      monthlyPnL.set(monthKey, currentPnL + trade.pnl);\n    });\n\n    return Array.from(monthlyPnL.values());\n  }\n\n  private calculateMaxDrawdown(trades: BacktestTrade[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n\n    trades.forEach((trade) => {\n      if (trade.balance > peak) {\n        peak = trade.balance;\n      }\n\n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n\n    return maxDrawdown;\n  }\n\n  private calculateSharpeRatio(trades: BacktestTrade[]): number {\n    const returns = trades.map((t) => t.pnlPercent);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) /\n        returns.length\n    );\n\n    return avgReturn / stdDev;\n  }\n\n  private calculateProfitFactor(trades: BacktestTrade[]): number {\n    const grossProfit = trades\n      .filter((t) => t.pnl > 0)\n      .reduce((sum, t) => sum + t.pnl, 0);\n\n    const grossLoss = Math.abs(\n      trades.filter((t) => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0)\n    );\n\n    return grossProfit / grossLoss;\n  }\n\n  private calculateAverageHoldingPeriod(trades: BacktestTrade[]): number {\n    let totalHoldingTime = 0;\n    let positions = 0;\n\n    for (let i = 0; i < trades.length - 1; i++) {\n      if (trades[i].type === \"BUY\" && trades[i + 1].type === \"SELL\") {\n        totalHoldingTime += trades[i + 1].timestamp - trades[i].timestamp;\n        positions++;\n      }\n    }\n\n    return totalHoldingTime / positions / (1000 * 60 * 60); // Convert to hours\n  }\n\n  // Portfolio-specific methods\n  private calculateStrategyCorrelations(results: BacktestResult[]): number[][] {\n    const n = results.length;\n    const correlationMatrix: number[][] = Array(n)\n      .fill(null)\n      .map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        if (i === j) {\n          correlationMatrix[i][j] = 1;\n        } else {\n          const returns1 = results[i].trades.map((t) => t.pnlPercent);\n          const returns2 = results[j].trades.map((t) => t.pnlPercent);\n          correlationMatrix[i][j] = this.calculateCorrelation(\n            returns1,\n            returns2\n          );\n        }\n      }\n    }\n\n    return correlationMatrix;\n  }\n\n  private calculateCorrelation(returns1: number[], returns2: number[]): number {\n    const n = Math.min(returns1.length, returns2.length);\n    if (n === 0) return 0;\n\n    const mean1 = returns1.slice(0, n).reduce((sum, r) => sum + r, 0) / n;\n    const mean2 = returns2.slice(0, n).reduce((sum, r) => sum + r, 0) / n;\n\n    let numerator = 0;\n    let sumSq1 = 0;\n    let sumSq2 = 0;\n\n    for (let i = 0; i < n; i++) {\n      const diff1 = returns1[i] - mean1;\n      const diff2 = returns2[i] - mean2;\n      numerator += diff1 * diff2;\n      sumSq1 += diff1 * diff1;\n      sumSq2 += diff2 * diff2;\n    }\n\n    const denominator = Math.sqrt(sumSq1 * sumSq2);\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  private calculatePortfolioReturns(\n    results: BacktestResult[],\n    weights: number[]\n  ): number[] {\n    const maxLength = Math.max(...results.map((r) => r.trades.length));\n    const portfolioReturns: number[] = [];\n\n    for (let i = 0; i < maxLength; i++) {\n      let weightedReturn = 0;\n      for (let j = 0; j < results.length; j++) {\n        const trade = results[j].trades[i];\n        if (trade) {\n          weightedReturn += (trade.pnlPercent / 100) * weights[j];\n        }\n      }\n      portfolioReturns.push(weightedReturn);\n    }\n\n    return portfolioReturns;\n  }\n\n  private calculateDiversificationRatio(\n    results: BacktestResult[],\n    weights: number[],\n    correlationMatrix: number[][]\n  ): number {\n    // Simplified diversification ratio calculation\n    const weightedVolatility = weights.reduce((sum, w, i) => {\n      const volatility = Math.sqrt(\n        results[i].trades.reduce((s, t) => s + t.pnlPercent * t.pnlPercent, 0) /\n          results[i].trades.length\n      );\n      return sum + w * volatility;\n    }, 0);\n\n    // Portfolio volatility calculation (simplified)\n    let portfolioVariance = 0;\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights.length; j++) {\n        const vol_i = Math.sqrt(\n          results[i].trades.reduce(\n            (s, t) => s + t.pnlPercent * t.pnlPercent,\n            0\n          ) / results[i].trades.length\n        );\n        const vol_j = Math.sqrt(\n          results[j].trades.reduce(\n            (s, t) => s + t.pnlPercent * t.pnlPercent,\n            0\n          ) / results[j].trades.length\n        );\n        portfolioVariance +=\n          weights[i] * weights[j] * correlationMatrix[i][j] * vol_i * vol_j;\n      }\n    }\n\n    const portfolioVolatility = Math.sqrt(portfolioVariance);\n    return portfolioVolatility > 0\n      ? weightedVolatility / portfolioVolatility\n      : 0;\n  }\n\n  private calculatePortfolioSharpe(returns: number[]): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + (r - mean) * (r - mean), 0) /\n        returns.length\n    );\n    return stdDev > 0 ? mean / stdDev : 0;\n  }\n\n  private calculatePortfolioVolatility(returns: number[]): number {\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + (r - mean) * (r - mean), 0) /\n        returns.length\n    );\n  }\n\n  private calculatePortfolioMaxDrawdown(returns: number[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    let cumulative = 0;\n\n    for (const ret of returns) {\n      cumulative += ret;\n      if (cumulative > peak) {\n        peak = cumulative;\n      }\n      const drawdown = (peak - cumulative) / Math.abs(peak);\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n\n    return maxDrawdown;\n  }\n\n  private async runStressScenario(\n    strategy: Strategy,\n    options: BacktestOptions,\n    scenario: StressTestScenario\n  ): Promise<BacktestResult> {\n    // This would modify the historical data according to the stress scenario\n    // For now, returning a placeholder - full implementation would involve:\n    // 1. Loading historical data\n    // 2. Applying stress scenario transformations\n    // 3. Running backtest on modified data\n\n    return this.runAdvancedBacktest(strategy, options);\n  }\n}\n\nexport const advancedBacktestService = AdvancedBacktestService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/advancedLiveData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[140,143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[140,143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[150,153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[150,153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[235,238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[235,238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[249,252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[249,252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[472,475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[472,475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[570,573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[570,573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[584,587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[584,587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":27,"column":36,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":27,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":29,"column":31,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":29,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":36,"column":32,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":36,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1176,1179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1176,1179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":22,"suggestions":[{"fix":{"range":[1344,1392],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3922,3925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3922,3925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4249,4252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4249,4252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7246,7249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7246,7249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8833,8836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8833,8836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":509,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14994,14997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14994,14997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":585,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":585,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17360,17363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17360,17363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":590,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17534,17537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17534,17537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19212,19215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19212,19215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":845,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":845,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25919,25922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25919,25922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":864,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":864,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26410,26413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26410,26413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":884,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":884,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26997,27000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26997,27000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":897,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":897,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27340,27343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27340,27343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":905,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":905,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27552,27555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27552,27555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":927,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":927,"endColumn":21,"suggestions":[{"fix":{"range":[28343,28423],"text":""},"messageId":"removeMethodCall","desc":"Remove the console method call."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\n// Use browser WebSocket (available globally)\n\n// Simple throttle function\nfunction throttle<T extends (...args: any[]) => any>(func: T, limit: number): T {\n  let inThrottle: boolean;\n  return function(this: any, ...args: any[]) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  } as T;\n}\n\n// Simple debounce function\nfunction debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {\n  let timeout: NodeJS.Timeout;\n  return function(this: any, ...args: any[]) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  } as T;\n}\n\n// Use a browser-compatible EventEmitter\nclass BrowserEventEmitter {\n  private events: { [key: string]: Function[] } = {};\n\n  on(event: string, callback: Function): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event: string, callback: Function): void {\n    if (!this.events[event]) return;\n    this.events[event] = this.events[event].filter(cb => cb !== callback);\n  }\n\n  emit(event: string, ...args: any[]): void {\n    if (!this.events[event]) return;\n    this.events[event].forEach(callback => {\n      try {\n        callback(...args);\n      } catch (error) {\n        console.error('Error in event handler:', error);\n      }\n    });\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      delete this.events[event];\n    } else {\n      this.events = {};\n    }\n  }\n}\n\n/**\n * Advanced Live Data Processing Module\n * \n * This module provides enhanced real-time market data processing capabilities\n * with features like data normalization, anomaly detection, and multi-source\n * data aggregation for the Poloniex trading platform.\n */\n\n// Types for live data processing\nexport interface LiveDataConfig {\n  primarySource: 'poloniex' | 'websocket' | 'aggregated';\n  fallbackSources: ('poloniex' | 'websocket' | 'rest')[];\n  updateInterval: number; // milliseconds\n  aggregationMethod: 'weighted' | 'median' | 'mean';\n  enableAnomalyDetection: boolean;\n  anomalyThreshold: number;\n  enableDataNormalization: boolean;\n  cacheDuration: number; // milliseconds\n  maxRetries: number;\n  retryDelay: number; // milliseconds\n  enableCompression: boolean;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface MarketDataPoint {\n  symbol: string;\n  timestamp: number;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  quoteVolume?: number;\n  weightedAverage?: number;\n  source?: string;\n  isAnomaly?: boolean;\n  confidence?: number;\n  normalized?: boolean;\n}\n\nexport interface OrderBookEntry {\n  price: number;\n  amount: number;\n  timestamp: number;\n}\n\nexport interface OrderBook {\n  symbol: string;\n  timestamp: number;\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n  source?: string;\n  lastUpdateId?: number;\n}\n\nexport interface TradeEntry {\n  id: string;\n  symbol: string;\n  timestamp: number;\n  price: number;\n  amount: number;\n  side: 'buy' | 'sell';\n  source?: string;\n}\n\nexport interface MarketSummary {\n  symbol: string;\n  timestamp: number;\n  lastPrice: number;\n  bidPrice: number;\n  askPrice: number;\n  high24h: number;\n  low24h: number;\n  volume24h: number;\n  quoteVolume24h: number;\n  percentChange24h: number;\n  source?: string;\n}\n\n// Default configuration\nconst defaultLiveDataConfig: LiveDataConfig = {\n  primarySource: 'aggregated',\n  fallbackSources: ['poloniex', 'websocket', 'rest'],\n  updateInterval: 1000, // 1 second\n  aggregationMethod: 'weighted',\n  enableAnomalyDetection: true,\n  anomalyThreshold: 3.0, // 3 standard deviations\n  enableDataNormalization: true,\n  cacheDuration: 60000, // 1 minute\n  maxRetries: 3,\n  retryDelay: 1000, // 1 second\n  enableCompression: true,\n  logLevel: 'info'\n};\n\n// Cache for market data\nconst dataCache = new Map<string, {\n  data: any;\n  timestamp: number;\n}>();\n\n// Event emitter for live data updates\nexport const liveDataEvents = new BrowserEventEmitter();\n\n/**\n * Advanced Live Data Service class\n */\nexport class LiveDataService {\n  private config: LiveDataConfig;\n  private websockets: Map<string, WebSocket> = new Map();\n  private poloniexRestClient: any;\n  private isRunning: boolean = false;\n  private retryCount: Map<string, number> = new Map();\n  private dataBuffer: Map<string, MarketDataPoint[]> = new Map();\n  private lastAnomalyCheck: Map<string, number> = new Map();\n  private statisticalBaseline: Map<string, {\n    mean: number;\n    stdDev: number;\n    updateTime: number;\n  }> = new Map();\n  \n  constructor(config: Partial<LiveDataConfig> = {}) {\n    this.config = { ...defaultLiveDataConfig, ...config };\n    this.initializePoloniexClient();\n    \n    // Set up throttled and debounced methods\n    this.processDataThrottled = throttle(this.processData.bind(this), 200);\n    this.updateBaselineDebounced = debounce(this.updateStatisticalBaseline.bind(this), 60000);\n    \n    // Set up event listeners\n    liveDataEvents.on('data_received', this.handleDataReceived.bind(this));\n    liveDataEvents.on('connection_error', this.handleConnectionError.bind(this));\n  }\n  \n  /**\n   * Initialize the Poloniex REST API client\n   */\n  private initializePoloniexClient(): void {\n    this.poloniexRestClient = axios.create({\n      baseURL: 'https://api.poloniex.com/markets',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'PoloniexTradingPlatform/1.0'\n      }\n    });\n    \n    this.log('info', 'Poloniex REST client initialized');\n  }\n  \n  /**\n   * Start the live data service\n   */\n  public start(): void {\n    if (this.isRunning) {\n      this.log('warn', 'Live data service is already running');\n      return;\n    }\n    \n    this.isRunning = true;\n    this.log('info', 'Starting live data service');\n    \n    // Initialize connections based on configuration\n    if (this.config.primarySource === 'websocket' || \n        this.config.fallbackSources.includes('websocket')) {\n      this.initializeWebSockets();\n    }\n    \n    liveDataEvents.emit('service_started');\n  }\n  \n  /**\n   * Stop the live data service\n   */\n  public stop(): void {\n    if (!this.isRunning) {\n      this.log('warn', 'Live data service is not running');\n      return;\n    }\n    \n    this.isRunning = false;\n    this.log('info', 'Stopping live data service');\n    \n    // Close all websocket connections\n    for (const [key, ws] of this.websockets.entries()) {\n      ws.close();\n      this.websockets.delete(key);\n    }\n    \n    liveDataEvents.emit('service_stopped');\n  }\n  \n  /**\n   * Initialize WebSocket connections\n   */\n  private initializeWebSockets(): void {\n    try {\n      // Poloniex WebSocket\n      const poloniexWs = new WebSocket('wss://ws.poloniex.com/markets');\n      \n      poloniexWs.on('open', () => {\n        this.log('info', 'Poloniex WebSocket connected');\n        \n        // Subscribe to market data\n        poloniexWs.send(JSON.stringify({\n          event: 'subscribe',\n          channel: ['ticker']\n        }));\n        \n        this.websockets.set('poloniex', poloniexWs);\n        liveDataEvents.emit('websocket_connected', 'poloniex');\n      });\n      \n      poloniexWs.on('message', (data: any) => {\n        try {\n          const parsedData = JSON.parse(data.toString());\n          this.handleWebSocketMessage('poloniex', parsedData);\n        } catch (error) {\n          this.log('error', `Error parsing Poloniex WebSocket message: ${error}`);\n        }\n      });\n      \n      poloniexWs.on('error', (error) => {\n        this.log('error', `Poloniex WebSocket error: ${error}`);\n        liveDataEvents.emit('connection_error', { source: 'poloniex', error });\n      });\n      \n      poloniexWs.on('close', () => {\n        this.log('info', 'Poloniex WebSocket disconnected');\n        this.websockets.delete('poloniex');\n        \n        // Attempt to reconnect if service is still running\n        if (this.isRunning) {\n          const retryCount = (this.retryCount.get('poloniex') || 0) + 1;\n          this.retryCount.set('poloniex', retryCount);\n          \n          if (retryCount <= this.config.maxRetries) {\n            this.log('info', `Attempting to reconnect to Poloniex WebSocket (attempt ${retryCount})`);\n            setTimeout(() => this.initializeWebSockets(), this.config.retryDelay * retryCount);\n          } else {\n            this.log('error', 'Max retry attempts reached for Poloniex WebSocket');\n            liveDataEvents.emit('max_retries_reached', 'poloniex');\n          }\n        }\n      });\n    } catch (error) {\n      this.log('error', `Error initializing WebSockets: ${error}`);\n      liveDataEvents.emit('initialization_error', { error });\n    }\n  }\n  \n  /**\n   * Handle WebSocket messages\n   */\n  private handleWebSocketMessage(source: string, message: any): void {\n    try {\n      if (source === 'poloniex') {\n        // Process Poloniex-specific message format\n        if (message.channel === 'ticker' && message.data) {\n          const tickerData = message.data;\n          \n          const marketData: MarketDataPoint = {\n            symbol: tickerData.symbol,\n            timestamp: Date.now(),\n            open: parseFloat(tickerData.open),\n            high: parseFloat(tickerData.high),\n            low: parseFloat(tickerData.low),\n            close: parseFloat(tickerData.close),\n            volume: parseFloat(tickerData.volume),\n            quoteVolume: parseFloat(tickerData.quoteVolume),\n            source: 'poloniex_ws'\n          };\n          \n          // Process the data (throttled)\n          this.processDataThrottled(marketData);\n          \n          // Add to buffer for statistical analysis\n          this.addToDataBuffer(marketData);\n        }\n      }\n      \n      liveDataEvents.emit('data_received', { source, data: message });\n    } catch (error) {\n      this.log('error', `Error handling WebSocket message: ${error}`);\n    }\n  }\n  \n  /**\n   * Add data point to buffer for statistical analysis\n   */\n  private addToDataBuffer(dataPoint: MarketDataPoint): void {\n    const key = dataPoint.symbol;\n    \n    if (!this.dataBuffer.has(key)) {\n      this.dataBuffer.set(key, []);\n    }\n    \n    const buffer = this.dataBuffer.get(key)!;\n    buffer.push(dataPoint);\n    \n    // Keep buffer at a reasonable size (last 100 points)\n    if (buffer.length > 100) {\n      buffer.shift();\n    }\n    \n    // Update statistical baseline periodically\n    const lastUpdate = this.statisticalBaseline.get(key)?.updateTime || 0;\n    if (Date.now() - lastUpdate > 300000) { // 5 minutes\n      this.updateBaselineDebounced(key);\n    }\n  }\n  \n  /**\n   * Update statistical baseline for anomaly detection\n   */\n  private updateStatisticalBaseline(symbol: string): void {\n    const buffer = this.dataBuffer.get(symbol);\n    \n    if (!buffer || buffer.length < 30) {\n      return; // Not enough data points\n    }\n    \n    // Calculate mean and standard deviation of closing prices\n    const prices = buffer.map(d => d.close);\n    const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;\n    \n    const squaredDiffs = prices.map(price => Math.pow(price - mean, 2));\n    const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / squaredDiffs.length;\n    const stdDev = Math.sqrt(variance);\n    \n    this.statisticalBaseline.set(symbol, {\n      mean,\n      stdDev,\n      updateTime: Date.now()\n    });\n    \n    this.log('debug', `Updated statistical baseline for ${symbol}: mean=${mean.toFixed(4)}, stdDev=${stdDev.toFixed(4)}`);\n  }\n  \n  /**\n   * Process incoming market data\n   */\n  private processData(dataPoint: MarketDataPoint): void {\n    try {\n      // Apply data normalization if enabled\n      if (this.config.enableDataNormalization) {\n        dataPoint = this.normalizeData(dataPoint);\n      }\n      \n      // Detect anomalies if enabled\n      if (this.config.enableAnomalyDetection) {\n        dataPoint = this.detectAnomaly(dataPoint);\n      }\n      \n      // Cache the processed data\n      const cacheKey = `${dataPoint.symbol}_${dataPoint.timestamp}`;\n      dataCache.set(cacheKey, {\n        data: dataPoint,\n        timestamp: Date.now()\n      });\n      \n      // Emit processed data event\n      liveDataEvents.emit('data_processed', dataPoint);\n    } catch (error) {\n      this.log('error', `Error processing data: ${error}`);\n    }\n  }\n  \n  /**\n   * Normalize market data\n   */\n  private normalizeData(dataPoint: MarketDataPoint): MarketDataPoint {\n    // Simple normalization: ensure all numeric values are valid\n    const normalized = { ...dataPoint };\n    \n    // Ensure numeric values are valid numbers\n    for (const key of ['open', 'high', 'low', 'close', 'volume', 'quoteVolume', 'weightedAverage']) {\n      if (key in normalized && (isNaN(normalized[key]) || !isFinite(normalized[key]))) {\n        normalized[key] = 0;\n      }\n    }\n    \n    // Ensure high is the highest value\n    normalized.high = Math.max(normalized.open, normalized.high, normalized.low, normalized.close);\n    \n    // Ensure low is the lowest value\n    normalized.low = Math.min(normalized.open, normalized.low, normalized.close);\n    \n    // Mark as normalized\n    normalized.normalized = true;\n    \n    return normalized;\n  }\n  \n  /**\n   * Detect anomalies in market data\n   */\n  private detectAnomaly(dataPoint: MarketDataPoint): MarketDataPoint {\n    const baseline = this.statisticalBaseline.get(dataPoint.symbol);\n    \n    if (!baseline) {\n      return { ...dataPoint, isAnomaly: false, confidence: 0 };\n    }\n    \n    // Calculate z-score (number of standard deviations from mean)\n    const zScore = Math.abs((dataPoint.close - baseline.mean) / baseline.stdDev);\n    \n    // Mark as anomaly if z-score exceeds threshold\n    const isAnomaly = zScore > this.config.anomalyThreshold;\n    \n    // Calculate confidence (0-1 scale)\n    const confidence = Math.min(zScore / (this.config.anomalyThreshold * 2), 1);\n    \n    return {\n      ...dataPoint,\n      isAnomaly,\n      confidence\n    };\n  }\n  \n  /**\n   * Fetch market data from Poloniex REST API\n   */\n  public async fetchMarketData(symbol: string, interval: string = '1h', limit: number = 100): Promise<MarketDataPoint[]> {\n    try {\n      // Check cache first\n      const cacheKey = `${symbol}_${interval}_${limit}`;\n      const cached = dataCache.get(cacheKey);\n      \n      if (cached && (Date.now() - cached.timestamp < this.config.cacheDuration)) {\n        this.log('debug', `Using cached data for ${cacheKey}`);\n        return cached.data;\n      }\n      \n      this.log('info', `Fetching market data for ${symbol} (${interval})`);\n      \n      const response = await this.poloniexRestClient.get(`/${symbol}/candles`, {\n        params: {\n          interval,\n          limit\n        }\n      });\n      \n      if (!response.data) {\n        throw new Error('No data received from Poloniex API');\n      }\n      \n      // Transform API response to MarketDataPoint[]\n      const marketData: MarketDataPoint[] = response.data.map((candle: any) => ({\n        symbol,\n        timestamp: candle.timestamp,\n        open: parseFloat(candle.open),\n        high: parseFloat(candle.high),\n        low: parseFloat(candle.low),\n        close: parseFloat(candle.close),\n        volume: parseFloat(candle.volume),\n        quoteVolume: parseFloat(candle.quoteVolume),\n        source: 'poloniex_rest'\n      }));\n      \n      // Process each data point\n      const processedData = marketData.map(dataPoint => {\n        // Apply normalization if enabled\n        if (this.config.enableDataNormalization) {\n          dataPoint = this.normalizeData(dataPoint);\n        }\n        \n        // Detect anomalies if enabled\n        if (this.config.enableAnomalyDetection) {\n          dataPoint = this.detectAnomaly(dataPoint);\n        }\n        \n        return dataPoint;\n      });\n      \n      // Cache the processed data\n      dataCache.set(cacheKey, {\n        data: processedData,\n        timestamp: Date.now()\n      });\n      \n      return processedData;\n    } catch (error) {\n      this.log('error', `Error fetching market data: ${error}`);\n      \n      // Try to use cached data even if expired\n      const cached = dataCache.get(`${symbol}_${interval}_${limit}`);\n      if (cached) {\n        this.log('warn', `Using expired cached data for ${symbol}`);\n        return cached.data;\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Fetch order book from Poloniex REST API\n   */\n  public async fetchOrderBook(symbol: string, limit: number = 100): Promise<OrderBook> {\n    try {\n      // Check cache first\n      const cacheKey = `orderbook_${symbol}_${limit}`;\n      const cached = dataCache.get(cacheKey);\n      \n      if (cached && (Date.now() - cached.timestamp < this.config.cacheDuration / 10)) { // Shorter cache for order book\n        this.log('debug', `Using cached order book for ${symbol}`);\n        return cached.data;\n      }\n      \n      this.log('info', `Fetching order book for ${symbol}`);\n      \n      const response = await this.poloniexRestClient.get(`/${symbol}/orderBook`, {\n        params: { limit }\n      });\n      \n      if (!response.data) {\n        throw new Error('No data received from Poloniex API');\n      }\n      \n      // Transform API response to OrderBook\n      const orderBook: OrderBook = {\n        symbol,\n        timestamp: Date.now(),\n        bids: response.data.bids.map((bid: any) => ({\n          price: parseFloat(bid[0]),\n          amount: parseFloat(bid[1]),\n          timestamp: Date.now()\n        })),\n        asks: response.data.asks.map((ask: any) => ({\n          price: parseFloat(ask[0]),\n          amount: parseFloat(ask[1]),\n          timestamp: Date.now()\n        })),\n        source: 'poloniex_rest',\n        lastUpdateId: response.data.sequence\n      };\n      \n      // Cache the order book\n      dataCache.set(cacheKey, {\n        data: orderBook,\n        timestamp: Date.now()\n      });\n      \n      return orderBook;\n    } catch (error) {\n      this.log('error', `Error fetching order book: ${error}`);\n      \n      // Try to use cached data even if expired\n      const cached = dataCache.get(`orderbook_${symbol}_${limit}`);\n      if (cached) {\n        this.log('warn', `Using expired cached order book for ${symbol}`);\n        return cached.data;\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Fetch recent trades from Poloniex REST API\n   */\n  public async fetchTrades(symbol: string, limit: number = 100): Promise<TradeEntry[]> {\n    try {\n      // Check cache first\n      const cacheKey = `trades_${symbol}_${limit}`;\n      const cached = dataCache.get(cacheKey);\n      \n      if (cached && (Date.now() - cached.timestamp < this.config.cacheDuration / 10)) { // Shorter cache for trades\n        this.log('debug', `Using cached trades for ${symbol}`);\n        return cached.data;\n      }\n      \n      this.log('info', `Fetching trades for ${symbol}`);\n      \n      const response = await this.poloniexRestClient.get(`/${symbol}/trades`, {\n        params: { limit }\n      });\n      \n      if (!response.data) {\n        throw new Error('No data received from Poloniex API');\n      }\n      \n      // Transform API response to TradeEntry[]\n      const trades: TradeEntry[] = response.data.map((trade: any) => ({\n        id: trade.id.toString(),\n        symbol,\n        timestamp: trade.ts,\n        price: parseFloat(trade.price),\n        amount: parseFloat(trade.amount),\n        side: trade.takerSide === 'sell' ? 'buy' : 'sell', // Invert taker side to get maker side\n        source: 'poloniex_rest'\n      }));\n      \n      // Cache the trades\n      dataCache.set(cacheKey, {\n        data: trades,\n        timestamp: Date.now()\n      });\n      \n      return trades;\n    } catch (error) {\n      this.log('error', `Error fetching trades: ${error}`);\n      \n      // Try to use cached data even if expired\n      const cached = dataCache.get(`trades_${symbol}_${limit}`);\n      if (cached) {\n        this.log('warn', `Using expired cached trades for ${symbol}`);\n        return cached.data;\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Fetch market summary from Poloniex REST API\n   */\n  public async fetchMarketSummary(symbol: string): Promise<MarketSummary> {\n    try {\n      // Check cache first\n      const cacheKey = `summary_${symbol}`;\n      const cached = dataCache.get(cacheKey);\n      \n      if (cached && (Date.now() - cached.timestamp < this.config.cacheDuration / 2)) { // Medium cache for summary\n        this.log('debug', `Using cached market summary for ${symbol}`);\n        return cached.data;\n      }\n      \n      this.log('info', `Fetching market summary for ${symbol}`);\n      \n      const response = await this.poloniexRestClient.get(`/${symbol}/ticker24h`);\n      \n      if (!response.data) {\n        throw new Error('No data received from Poloniex API');\n      }\n      \n      // Transform API response to MarketSummary\n      const summary: MarketSummary = {\n        symbol,\n        timestamp: Date.now(),\n        lastPrice: parseFloat(response.data.close),\n        bidPrice: parseFloat(response.data.markPrice), // Using mark price as bid\n        askPrice: parseFloat(response.data.markPrice), // Using mark price as ask\n        high24h: parseFloat(response.data.high),\n        low24h: parseFloat(response.data.low),\n        volume24h: parseFloat(response.data.volume),\n        quoteVolume24h: parseFloat(response.data.quoteVolume),\n        percentChange24h: parseFloat(response.data.change) * 100,\n        source: 'poloniex_rest'\n      };\n      \n      // Cache the summary\n      dataCache.set(cacheKey, {\n        data: summary,\n        timestamp: Date.now()\n      });\n      \n      return summary;\n    } catch (error) {\n      this.log('error', `Error fetching market summary: ${error}`);\n      \n      // Try to use cached data even if expired\n      const cached = dataCache.get(`summary_${symbol}`);\n      if (cached) {\n        this.log('warn', `Using expired cached market summary for ${symbol}`);\n        return cached.data;\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Aggregate data from multiple sources\n   */\n  public async getAggregatedData(symbol: string, interval: string = '1h', limit: number = 100): Promise<MarketDataPoint[]> {\n    try {\n      // Fetch data from multiple sources\n      const sources = [];\n      \n      // Primary source\n      if (this.config.primarySource === 'poloniex' || this.config.fallbackSources.includes('poloniex')) {\n        try {\n          const poloniexData = await this.fetchMarketData(symbol, interval, limit);\n          sources.push({ source: 'poloniex', data: poloniexData, weight: 1.0 });\n        } catch (error) {\n          this.log('warn', `Failed to fetch data from Poloniex: ${error}`);\n        }\n      }\n      \n      // WebSocket data (from buffer)\n      if (this.config.primarySource === 'websocket' || this.config.fallbackSources.includes('websocket')) {\n        const wsData = this.dataBuffer.get(symbol);\n        if (wsData && wsData.length > 0) {\n          sources.push({ source: 'websocket', data: wsData, weight: 1.2 }); // Higher weight for real-time data\n        }\n      }\n      \n      // If no data sources available, throw error\n      if (sources.length === 0) {\n        throw new Error('No data available from any source');\n      }\n      \n      // If only one source, return its data\n      if (sources.length === 1) {\n        return sources[0].data;\n      }\n      \n      // Aggregate data from multiple sources\n      return this.aggregateDataSources(sources, this.config.aggregationMethod);\n    } catch (error) {\n      this.log('error', `Error getting aggregated data: ${error}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Aggregate data from multiple sources\n   */\n  private aggregateDataSources(\n    sources: { source: string; data: MarketDataPoint[]; weight: number }[],\n    method: 'weighted' | 'median' | 'mean'\n  ): MarketDataPoint[] {\n    // Group data points by timestamp (rounded to nearest minute)\n    const groupedByTimestamp = new Map<number, { points: MarketDataPoint[], weights: number[] }>();\n    \n    for (const source of sources) {\n      for (const point of source.data) {\n        // Round timestamp to nearest minute\n        const roundedTimestamp = Math.floor(point.timestamp / 60000) * 60000;\n        \n        if (!groupedByTimestamp.has(roundedTimestamp)) {\n          groupedByTimestamp.set(roundedTimestamp, { points: [], weights: [] });\n        }\n        \n        const group = groupedByTimestamp.get(roundedTimestamp)!;\n        group.points.push(point);\n        group.weights.push(source.weight);\n      }\n    }\n    \n    // Aggregate data points for each timestamp\n    const aggregatedData: MarketDataPoint[] = [];\n    \n    for (const [timestamp, { points, weights }] of groupedByTimestamp.entries()) {\n      if (points.length === 0) continue;\n      \n      let aggregatedPoint: MarketDataPoint;\n      \n      switch (method) {\n        case 'weighted':\n          aggregatedPoint = this.weightedAggregate(points, weights);\n          break;\n        case 'median':\n          aggregatedPoint = this.medianAggregate(points);\n          break;\n        case 'mean':\n        default:\n          aggregatedPoint = this.meanAggregate(points);\n          break;\n      }\n      \n      // Set timestamp and symbol\n      aggregatedPoint.timestamp = timestamp;\n      aggregatedPoint.symbol = points[0].symbol;\n      aggregatedPoint.source = 'aggregated';\n      \n      aggregatedData.push(aggregatedPoint);\n    }\n    \n    // Sort by timestamp\n    return aggregatedData.sort((a, b) => a.timestamp - b.timestamp);\n  }\n  \n  /**\n   * Weighted aggregate of data points\n   */\n  private weightedAggregate(points: MarketDataPoint[], weights: number[]): MarketDataPoint {\n    // Normalize weights\n    const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n    const normalizedWeights = weights.map(w => w / totalWeight);\n    \n    // Calculate weighted average for each numeric field\n    const result: any = {};\n    \n    for (const field of ['open', 'high', 'low', 'close', 'volume', 'quoteVolume']) {\n      let weightedSum = 0;\n      \n      for (let i = 0; i < points.length; i++) {\n        weightedSum += points[i][field] * normalizedWeights[i];\n      }\n      \n      result[field] = weightedSum;\n    }\n    \n    return result as MarketDataPoint;\n  }\n  \n  /**\n   * Median aggregate of data points\n   */\n  private medianAggregate(points: MarketDataPoint[]): MarketDataPoint {\n    const result: any = {};\n    \n    for (const field of ['open', 'high', 'low', 'close', 'volume', 'quoteVolume']) {\n      const values = points.map(p => p[field]).sort((a, b) => a - b);\n      const middle = Math.floor(values.length / 2);\n      \n      if (values.length % 2 === 0) {\n        result[field] = (values[middle - 1] + values[middle]) / 2;\n      } else {\n        result[field] = values[middle];\n      }\n    }\n    \n    return result as MarketDataPoint;\n  }\n  \n  /**\n   * Mean aggregate of data points\n   */\n  private meanAggregate(points: MarketDataPoint[]): MarketDataPoint {\n    const result: any = {};\n    \n    for (const field of ['open', 'high', 'low', 'close', 'volume', 'quoteVolume']) {\n      const sum = points.reduce((acc, p) => acc + p[field], 0);\n      result[field] = sum / points.length;\n    }\n    \n    return result as MarketDataPoint;\n  }\n  \n  /**\n   * Handle data received event\n   */\n  private handleDataReceived(event: any): void {\n    this.log('debug', `Data received from ${event.source}`);\n    // Additional handling can be added here\n  }\n  \n  /**\n   * Handle connection error event\n   */\n  private handleConnectionError(event: any): void {\n    this.log('error', `Connection error from ${event.source}: ${event.error}`);\n    \n    // If primary source fails, switch to fallback\n    if (event.source === this.config.primarySource) {\n      const fallbacks = this.config.fallbackSources.filter(s => s !== event.source);\n      \n      if (fallbacks.length > 0) {\n        this.log('info', `Switching to fallback source: ${fallbacks[0]}`);\n        // Implementation of fallback logic\n      }\n    }\n  }\n  \n  /**\n   * Log messages based on configured log level\n   */\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string): void {\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n    \n    if (levels[level] >= levels[this.config.logLevel]) {\n      const timestamp = new Date().toISOString();\n      console[level](`[${timestamp}] [LiveData] [${level.toUpperCase()}] ${message}`);\n    }\n  }\n  \n  // Throttled and debounced methods (defined in constructor)\n  private processDataThrottled: (dataPoint: MarketDataPoint) => void;\n  private updateBaselineDebounced: (symbol: string) => void;\n}\n\n// Export singleton instance\nexport const liveDataService = new LiveDataService();\n\nexport default {\n  LiveDataService,\n  liveDataService,\n  liveDataEvents\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/authService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[760,763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[760,763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1817,1820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1817,1820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":20,"suggestions":[{"fix":{"range":[1830,1867],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":21,"suggestions":[{"fix":{"range":[2679,2722],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3469,3472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3469,3472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":20,"suggestions":[{"fix":{"range":[3482,3527],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":20,"suggestions":[{"fix":{"range":[4207,4245],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":20,"suggestions":[{"fix":{"range":[4777,4827],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4918,4921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4918,4921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"fix":{"range":[5097,5146],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5283,5286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5283,5286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5369,5372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5369,5372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"fix":{"range":[5540,5590],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6258,6261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6258,6261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":20,"suggestions":[{"fix":{"range":[6271,6324],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7038,7041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7038,7041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":26,"suggestions":[{"fix":{"range":[7057,7107],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosResponse } from 'axios';\nimport { getAccessToken, getRefreshToken, storeAuthData, clearAuthData, shouldRefreshToken } from '@/utils/auth';\n\n// Get the backend URL from environment\nconst API_BASE_URL = import.meta.env.VITE_BACKEND_URL || \n                     import.meta.env.VITE_API_URL || \n                     'http://localhost:3000';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\ninterface LoginResponse {\n  success: boolean;\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    role: string;\n  };\n}\n\ninterface RefreshResponse {\n  success: boolean;\n  accessToken: string;\n  expiresIn: number;\n}\n\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  code?: string;\n}\n\n/**\n * Auth Service for JWT authentication\n */\nexport class AuthService {\n  private static instance: AuthService;\n  private refreshPromise: Promise<string | null> | null = null;\n\n  static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  /**\n   * Login with username and password\n   */\n  async login(credentials: LoginCredentials): Promise<ApiResponse<LoginResponse>> {\n    try {\n      const response: AxiosResponse<LoginResponse> = await axios.post(\n        `${API_BASE_URL}/api/auth/login`,\n        credentials,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success) {\n        // Store authentication data\n        storeAuthData(response.data);\n        return { success: true, data: response.data };\n      }\n\n      return { success: false, error: 'Login failed' };\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      if (error.response?.data) {\n        return { \n          success: false, \n          error: error.response.data.error || 'Login failed',\n          code: error.response.data.code\n        };\n      }\n      \n      return { success: false, error: 'Network error occurred' };\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  async refreshToken(): Promise<string | null> {\n    // Prevent multiple simultaneous refresh requests\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    this.refreshPromise = this._refreshToken();\n    const result = await this.refreshPromise;\n    this.refreshPromise = null;\n    return result;\n  }\n\n  private async _refreshToken(): Promise<string | null> {\n    try {\n      const refreshToken = getRefreshToken();\n      \n      if (!refreshToken) {\n        console.warn('No refresh token available');\n        return null;\n      }\n\n      const response: AxiosResponse<RefreshResponse> = await axios.post(\n        `${API_BASE_URL}/api/auth/refresh`,\n        { refreshToken },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success) {\n        // Update access token\n        const currentUser = this.getCurrentUser();\n        if (currentUser) {\n          storeAuthData({\n            accessToken: response.data.accessToken,\n            refreshToken: refreshToken,\n            expiresIn: response.data.expiresIn,\n            user: currentUser\n          });\n        }\n        \n        return response.data.accessToken;\n      }\n\n      return null;\n    } catch (error: any) {\n      console.error('Token refresh error:', error);\n      \n      // If refresh fails, clear auth data and redirect to login\n      if (error.response?.status === 403 || error.response?.status === 401) {\n        this.logout();\n      }\n      \n      return null;\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout(): Promise<void> {\n    try {\n      const refreshToken = getRefreshToken();\n      \n      if (refreshToken) {\n        // Notify server to invalidate refresh token\n        await axios.post(\n          `${API_BASE_URL}/api/auth/logout`,\n          { refreshToken },\n          {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear local auth data\n      clearAuthData();\n    }\n  }\n\n  /**\n   * Verify current token\n   */\n  async verifyToken(): Promise<boolean> {\n    try {\n      const token = getAccessToken();\n      \n      if (!token) {\n        return false;\n      }\n\n      const response = await axios.get(\n        `${API_BASE_URL}/api/auth/verify`,\n        {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }\n      );\n\n      return response.data.success;\n    } catch (error) {\n      console.error('Token verification error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current user data\n   */\n  getCurrentUser(): any | null {\n    const userData = localStorage.getItem('user_data');\n    if (!userData) return null;\n    \n    try {\n      return JSON.parse(userData);\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Make authenticated request with automatic token refresh\n   */\n  async authenticatedRequest<T = any>(\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE',\n    endpoint: string,\n    data?: any\n  ): Promise<ApiResponse<T>> {\n    try {\n      let token = getAccessToken();\n\n      // Check if we need to refresh the token\n      if (shouldRefreshToken()) {\n        console.log('Token needs refresh, refreshing...');\n        const newToken = await this.refreshToken();\n        if (newToken) {\n          token = newToken;\n        } else {\n          return { success: false, error: 'Authentication failed' };\n        }\n      }\n\n      if (!token) {\n        return { success: false, error: 'No authentication token' };\n      }\n\n      const config = {\n        method,\n        url: `${API_BASE_URL}${endpoint}`,\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        ...(data && { data })\n      };\n\n      const response = await axios(config);\n      return { success: true, data: response.data };\n    } catch (error: any) {\n      console.error('Authenticated request error:', error);\n      \n      // If token is invalid, try to refresh once\n      if (error.response?.status === 401 || error.response?.status === 403) {\n        const newToken = await this.refreshToken();\n        if (newToken) {\n          // Retry the request with new token\n          try {\n            const config = {\n              method,\n              url: `${API_BASE_URL}${endpoint}`,\n              headers: {\n                'Authorization': `Bearer ${newToken}`,\n                'Content-Type': 'application/json'\n              },\n              ...(data && { data })\n            };\n\n            const response = await axios(config);\n            return { success: true, data: response.data };\n          } catch (retryError: any) {\n            console.error('Retry request error:', retryError);\n            return { \n              success: false, \n              error: retryError.response?.data?.error || 'Request failed'\n            };\n          }\n        } else {\n          return { success: false, error: 'Authentication failed' };\n        }\n      }\n      \n      return { \n        success: false, \n        error: error.response?.data?.error || 'Request failed'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const authService = AuthService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/automatedTrading.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[679,682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[679,682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5831,5834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5831,5834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11328,11331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11328,11331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11533,11536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11533,11536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11747,11750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11747,11750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Strategy } from '@/types';\nimport { executeStrategy } from '@/utils/strategyExecutors';\nimport { poloniexApi } from '@/services/poloniexAPI';\nimport { aiSignalGenerator, AISignal } from '@/ml/aiSignalGenerator';\nimport { logger } from '@/utils/logger';\nimport { useAppStore } from '@/store';\n\ninterface AutomatedTradingConfig {\n  maxPositions: number;\n  maxLeverage: number;\n  riskPerTrade: number;\n  stopLossPercent: number;\n  takeProfitPercent: number;\n  trailingStopPercent?: number;\n}\n\nclass AutomatedTradingService {\n  private static instance: AutomatedTradingService;\n  private activeStrategies: Map<string, Strategy> = new Map();\n  private positions: Map<string, any> = new Map();\n  private config: AutomatedTradingConfig;\n  private isRunning: boolean = false;\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Default configuration\n    this.config = {\n      maxPositions: 3,\n      maxLeverage: 5,\n      riskPerTrade: 2, // Percentage of account balance\n      stopLossPercent: 2,\n      takeProfitPercent: 4\n    };\n\n    // Subscribe to position updates\n    poloniexApi.onPositionUpdate(this.handlePositionUpdate.bind(this));\n    poloniexApi.onLiquidationWarning(this.handleLiquidationWarning.bind(this));\n    poloniexApi.onMarginUpdate(this.handleMarginUpdate.bind(this));\n  }\n\n  public static getInstance(): AutomatedTradingService {\n    if (!AutomatedTradingService.instance) {\n      AutomatedTradingService.instance = new AutomatedTradingService();\n    }\n    return AutomatedTradingService.instance;\n  }\n\n  /**\n   * Start automated trading\n   */\n  public start(): void {\n    if (this.isRunning) return;\n    \n    this.isRunning = true;\n    this.updateInterval = setInterval(this.update.bind(this), 5000);\n    logger.info('Automated trading started');\n  }\n\n  /**\n   * Stop automated trading\n   */\n  public stop(): void {\n    if (!this.isRunning) return;\n    \n    this.isRunning = false;\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n    logger.info('Automated trading stopped');\n  }\n\n  /**\n   * Add strategy to automated trading\n   */\n  public addStrategy(strategy: Strategy): void {\n    this.activeStrategies.set(strategy.id, strategy);\n    logger.info(`Strategy ${strategy.id} added to automated trading`);\n  }\n\n  /**\n   * Remove strategy from automated trading\n   */\n  public removeStrategy(strategyId: string): void {\n    this.activeStrategies.delete(strategyId);\n    logger.info(`Strategy ${strategyId} removed from automated trading`);\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(config: Partial<AutomatedTradingConfig>): void {\n    this.config = { ...this.config, ...config };\n    logger.info('Automated trading configuration updated', this.config);\n  }\n\n  /**\n   * Main update loop with AI-enhanced decision making\n   */\n  private async update(): Promise<void> {\n    try {\n      // Get account balance\n      const balance = await poloniexApi.getAccountBalance();\n      \n      // Check if we can open new positions\n      if (this.positions.size >= this.config.maxPositions) {\n        logger.info('Maximum positions reached, skipping new trades');\n        return;\n      }\n\n      // Execute each active strategy with AI enhancement\n      for (const strategy of this.activeStrategies.values()) {\n        try {\n          // Get market data\n          const marketData = await poloniexApi.getMarketData(strategy.parameters.pair);\n          \n          // Execute traditional strategy\n          const strategyResult = executeStrategy(strategy, marketData);\n          \n          // Generate AI signal for comparison and enhancement\n          const aiSignal = await aiSignalGenerator.generateSignal(marketData);\n          \n          // Combine strategy and AI signals\n          const finalSignal = this.combineSignals(strategyResult, aiSignal);\n          \n          if (finalSignal && finalSignal.action !== 'HOLD') {\n            await this.executeTrade(strategy, finalSignal, balance.availableAmount);\n          }\n        } catch (error) {\n          logger.error(`Error processing strategy ${strategy.id}:`, error);\n        }\n      }\n      \n      // Also run pure AI trading for configured pairs\n      await this.executeAITradingSignals();\n      \n    } catch (error) {\n      logger.error('Error in automated trading update:', error);\n    }\n  }\n\n  /**\n   * Execute AI-only trading signals for configured pairs\n   */\n  private async executeAITradingSignals(): Promise<void> {\n    try {\n      // Get trading settings from store\n      const { defaultPair } = useAppStore.getState().trading;\n      \n      // Get market data for default pair\n      const marketData = await poloniexApi.getMarketData(defaultPair);\n      \n      // Generate AI signal\n      const aiSignal = await aiSignalGenerator.generateSignal(marketData);\n      \n      // Check if signal meets our criteria\n      if (aiSignal.action !== 'HOLD' && aiSignal.confidence > 0.7 && aiSignal.riskLevel !== 'HIGH') {\n        // Create a virtual strategy for AI signals\n        const aiStrategy: Strategy = {\n          id: 'ai-signal-' + Date.now(),\n          name: 'AI Signal Strategy',\n          description: 'Pure AI-generated trading signals',\n          type: 'Custom',\n          parameters: {\n            pair: defaultPair,\n            timeframe: '5m'\n          },\n          isActive: true,\n          riskLevel: aiSignal.riskLevel,\n          createdAt: Date.now(),\n          lastModified: Date.now()\n        };\n\n        const balance = await poloniexApi.getAccountBalance();\n        await this.executeTrade(aiStrategy, aiSignal, balance.availableAmount);\n      }\n    } catch (error) {\n      logger.error('Error in AI trading signals:', error);\n    }\n  }\n\n  /**\n   * Combine traditional strategy signals with AI signals\n   */\n  private combineSignals(strategyResult: any, aiSignal: AISignal): AISignal | null {\n    // If both signals agree, increase confidence\n    if (strategyResult.signal === aiSignal.action) {\n      return {\n        ...aiSignal,\n        confidence: Math.min(aiSignal.confidence * 1.2, 1),\n        reason: `Strategy + AI: ${strategyResult.reason} | ${aiSignal.reason}`\n      };\n    }\n    \n    // If signals disagree, only proceed if AI signal has very high confidence\n    if (strategyResult.signal !== aiSignal.action && aiSignal.confidence > 0.8) {\n      return {\n        ...aiSignal,\n        confidence: aiSignal.confidence * 0.8,\n        reason: `AI override: ${aiSignal.reason} (conflicted with strategy: ${strategyResult.reason})`\n      };\n    }\n    \n    // If traditional strategy says HOLD but AI has strong signal\n    if (!strategyResult.signal && aiSignal.action !== 'HOLD' && aiSignal.confidence > 0.75) {\n      return {\n        ...aiSignal,\n        confidence: aiSignal.confidence * 0.9,\n        reason: `AI signal: ${aiSignal.reason} (no strategy signal)`\n      };\n    }\n    \n    // Default to hold if signals are weak or conflicting\n    return null;\n  }\n\n  /**\n   * Execute a trade based on strategy signal or AI signal\n   */\n  private async executeTrade(\n    strategy: Strategy,\n    signal: 'BUY' | 'SELL' | AISignal,\n    availableBalance: number\n  ): Promise<void> {\n    try {\n      const pair = strategy.parameters.pair;\n      \n      // Handle both traditional signals and AI signals\n      let action: 'BUY' | 'SELL';\n      let stopLoss: number | undefined;\n      let takeProfit: number | undefined;\n      let confidence = 1;\n      let reason = 'Strategy signal';\n\n      if (typeof signal === 'string') {\n        // Traditional signal\n        action = signal;\n      } else {\n        // AI signal\n        action = signal.action as 'BUY' | 'SELL';\n        stopLoss = signal.stopLoss;\n        takeProfit = signal.takeProfit;\n        confidence = signal.confidence;\n        reason = signal.reason;\n      }\n\n      // Get current market data\n      const marketData = await poloniexApi.getMarketData(pair);\n      const lastPrice = marketData[marketData.length - 1].close;\n      \n      // Calculate position size based on risk and confidence\n      const baseRiskAmount = (availableBalance * this.config.riskPerTrade) / 100;\n      const adjustedRiskAmount = baseRiskAmount * confidence; // Reduce size for lower confidence\n      const quantity = adjustedRiskAmount / lastPrice;\n\n      // Validate minimum position size\n      if (quantity < 0.001) { // Minimum position size\n        logger.warn(`Position size too small for ${pair}: ${quantity}`);\n        return;\n      }\n\n      // Place main order\n      const order = await poloniexApi.placeOrder(\n        pair,\n        action.toLowerCase() as 'buy' | 'sell',\n        'market',\n        quantity\n      );\n\n      // Use AI-provided stop loss or calculate default\n      let stopPrice: number;\n      if (stopLoss) {\n        stopPrice = stopLoss;\n      } else {\n        stopPrice = action === 'BUY'\n          ? lastPrice * (1 - this.config.stopLossPercent / 100)\n          : lastPrice * (1 + this.config.stopLossPercent / 100);\n      }\n\n      // Place stop loss order\n      try {\n        await poloniexApi.placeConditionalOrder(\n          pair,\n          action === 'BUY' ? 'sell' : 'buy',\n          'stop',\n          quantity,\n          stopPrice\n        );\n      } catch (error) {\n        logger.warn('Failed to place stop loss order:', error);\n      }\n\n      // Use AI-provided take profit or calculate default\n      let takeProfitPrice: number;\n      if (takeProfit) {\n        takeProfitPrice = takeProfit;\n      } else {\n        takeProfitPrice = action === 'BUY'\n          ? lastPrice * (1 + this.config.takeProfitPercent / 100)\n          : lastPrice * (1 - this.config.takeProfitPercent / 100);\n      }\n\n      // Place take profit order\n      try {\n        await poloniexApi.placeConditionalOrder(\n          pair,\n          action === 'BUY' ? 'sell' : 'buy',\n          'takeProfit',\n          quantity,\n          takeProfitPrice\n        );\n      } catch (error) {\n        logger.warn('Failed to place take profit order:', error);\n      }\n\n      // Store position information\n      const positionId = `${strategy.id}-${Date.now()}`;\n      this.positions.set(positionId, {\n        strategy: strategy.id,\n        pair,\n        action,\n        quantity,\n        entryPrice: lastPrice,\n        stopPrice,\n        takeProfitPrice,\n        confidence,\n        reason,\n        timestamp: Date.now(),\n        orderId: order?.id\n      });\n\n      // Add toast notification\n      const store = useAppStore.getState();\n      store.addToast({\n        message: `Trade executed: ${action} ${quantity.toFixed(4)} ${pair} at ${lastPrice.toFixed(2)}`,\n        type: 'success',\n        dismissible: true\n      });\n\n      logger.info(`Trade executed for strategy ${strategy.id}`, {\n        action,\n        pair,\n        quantity,\n        entryPrice: lastPrice,\n        stopPrice,\n        takeProfitPrice,\n        confidence,\n        reason\n      });\n    } catch (error) {\n      logger.error('Error executing trade:', error);\n      \n      // Add error toast notification\n      const store = useAppStore.getState();\n      store.addToast({\n        message: `Trade execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        type: 'error',\n        dismissible: true\n      });\n    }\n  }\n\n  /**\n   * Handle position update from exchange\n   */\n  private handlePositionUpdate(position: any): void {\n    this.positions.set(position.symbol, position);\n    logger.info('Position updated:', position);\n  }\n\n  /**\n   * Handle liquidation warning\n   */\n  private handleLiquidationWarning(warning: any): void {\n    logger.warn('Liquidation warning received:', warning);\n    // Implement emergency position closure or risk reduction\n  }\n\n  /**\n   * Handle margin update\n   */\n  private handleMarginUpdate(margin: any): void {\n    logger.info('Margin updated:', margin);\n    // Implement margin management logic\n  }\n}\n\nexport const automatedTrading = AutomatedTradingService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/autonomousTradingEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/backtestService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":20,"suggestions":[{"fix":{"range":[3239,3280],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Strategy, MarketData } from '@/types';\nimport { BacktestResult, BacktestTrade, BacktestOptions, OptimizationResult } from '@/types/backtest';\n\n// Define BacktestMetrics interface\ninterface BacktestMetrics {\n  dailyReturns: number[];\n  monthlyReturns: number[];\n  volatility: number;\n  profitFactor: number;\n  recoveryFactor: number;\n  averageWin: number;\n  averageLoss: number;\n  largestWin: number;\n  largestLoss: number;\n  averageHoldingPeriod: number;\n  bestMonth: number;\n  worstMonth: number;\n}\nimport { executeStrategy } from '@/utils/strategyExecutors';\nimport { poloniexApi } from '@/services/poloniexAPI';\n\nexport class BacktestService {\n  private static instance: BacktestService;\n  private historicalData: Map<string, MarketData[]> = new Map();\n  \n  private constructor() {}\n  \n  public static getInstance(): BacktestService {\n    if (!BacktestService.instance) {\n      BacktestService.instance = new BacktestService();\n    }\n    return BacktestService.instance;\n  }\n  \n  /**\n   * Run backtest for a strategy\n   */\n  public async runBacktest(\n    strategy: Strategy,\n    options: BacktestOptions\n  ): Promise<BacktestResult> {\n    try {\n      // Load historical data\n      const data = await this.getHistoricalData(\n        strategy.parameters.pair,\n        options.startDate,\n        options.endDate\n      );\n      \n      // Initialize backtest state\n      let balance = options.initialBalance;\n      // Position tracking variable (not currently used but kept for future implementation)\n      // let position = 0;\n      const trades: BacktestTrade[] = [];\n      \n      // Run strategy on each candle\n      for (let i = 50; i < data.length; i++) {\n        const marketData = data.slice(0, i + 1);\n        const signal = executeStrategy(strategy, marketData);\n        \n        if (signal.signal) {\n          const price = data[i].close;\n          const amount = this.calculatePositionSize(balance, price);\n          \n          // Execute trade\n          const trade = this.executeTrade(\n            signal.signal,\n            price,\n            amount,\n            balance,\n            options.feeRate,\n            options.slippage,\n            data[i].timestamp\n          );\n          \n          // Update state\n          trades.push(trade);\n          balance = trade.balance;\n          // Update position tracking (commented out as variable is not used)\n          // position = signal.signal === 'BUY' ? amount : 0;\n        }\n      }\n      \n      // Calculate final metrics\n      const metrics = this.calculateMetrics(trades, options.initialBalance);\n      \n      return {\n        strategyId: strategy.id,\n        startDate: options.startDate,\n        endDate: options.endDate,\n        initialBalance: options.initialBalance,\n        finalBalance: balance,\n        totalPnL: balance - options.initialBalance,\n        totalTrades: trades.length,\n        winningTrades: trades.filter(t => t.pnl > 0).length,\n        losingTrades: trades.filter(t => t.pnl < 0).length,\n        winRate: trades.filter(t => t.pnl > 0).length / trades.length,\n        maxDrawdown: this.calculateMaxDrawdown(trades),\n        sharpeRatio: this.calculateSharpeRatio(trades),\n        trades,\n        metrics\n      };\n    } catch (error) {\n      console.error('Backtest failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Optimize strategy parameters\n   */\n  public async optimizeStrategy(\n    strategy: Strategy,\n    options: BacktestOptions,\n    parameterRanges: Record<string, [number, number, number]>\n  ): Promise<OptimizationResult[]> {\n    const results: OptimizationResult[] = [];\n    \n    // Generate parameter combinations\n    const combinations = this.generateParameterCombinations(parameterRanges);\n    \n    // Test each combination\n    for (const params of combinations) {\n      const testStrategy = {\n        ...strategy,\n        parameters: {\n          ...strategy.parameters,\n          ...params\n        }\n      };\n      \n      const result = await this.runBacktest(testStrategy, options);\n      \n      results.push({\n        parameters: params,\n        performance: result\n      });\n    }\n    \n    // Sort by performance (Sharpe ratio)\n    return results.sort((a, b) => b.performance.sharpeRatio - a.performance.sharpeRatio);\n  }\n  \n  /**\n   * Get historical market data\n   */\n  private async getHistoricalData(\n    pair: string,\n    startDate: string,\n    endDate: string\n  ): Promise<MarketData[]> {\n    const cacheKey = `${pair}-${startDate}-${endDate}`;\n    \n    if (this.historicalData.has(cacheKey)) {\n      return this.historicalData.get(cacheKey)!;\n    }\n    \n    const data = await poloniexApi.getHistoricalData(pair, startDate, endDate);\n    this.historicalData.set(cacheKey, data);\n    \n    return data;\n  }\n  \n  /**\n   * Calculate position size based on available balance\n   */\n  private calculatePositionSize(balance: number, price: number): number {\n    // Use 50% of available balance by default\n    return (balance * 0.5) / price;\n  }\n  \n  /**\n   * Execute a simulated trade\n   */\n  private executeTrade(\n    type: 'BUY' | 'SELL',\n    price: number,\n    amount: number,\n    balance: number,\n    feeRate: number,\n    slippage: number,\n    timestamp: number\n  ): BacktestTrade {\n    // Apply slippage to price\n    const executionPrice = type === 'BUY' \n      ? price * (1 + slippage)\n      : price * (1 - slippage);\n    \n    const total = executionPrice * amount;\n    const fee = total * feeRate;\n    \n    // Calculate PnL\n    const pnl = type === 'SELL' ? total - fee - (price * amount) : 0;\n    const pnlPercent = pnl / (price * amount) * 100;\n    \n    // Update balance\n    const newBalance = type === 'BUY'\n      ? balance - total - fee\n      : balance + total - fee;\n    \n    return {\n      timestamp,\n      type,\n      price: executionPrice,\n      amount,\n      total,\n      pnl,\n      pnlPercent,\n      balance: newBalance\n    };\n  }\n  \n  /**\n   * Calculate backtest metrics\n   */\n  private calculateMetrics(trades: BacktestTrade[], initialBalance: number): BacktestMetrics {\n    const dailyReturns = this.calculateDailyReturns(trades);\n    const monthlyReturns = this.calculateMonthlyReturns(trades);\n    \n    const winningTrades = trades.filter(t => t.pnl > 0);\n    const losingTrades = trades.filter(t => t.pnl < 0);\n    \n    return {\n      dailyReturns,\n      monthlyReturns,\n      volatility: this.calculateVolatility(dailyReturns),\n      profitFactor: this.calculateProfitFactor(trades),\n      recoveryFactor: this.calculateRecoveryFactor(trades, initialBalance),\n      averageWin: winningTrades.reduce((sum, t) => sum + t.pnl, 0) / winningTrades.length,\n      averageLoss: losingTrades.reduce((sum, t) => sum + t.pnl, 0) / losingTrades.length,\n      largestWin: Math.max(...trades.map(t => t.pnl)),\n      largestLoss: Math.min(...trades.map(t => t.pnl)),\n      averageHoldingPeriod: this.calculateAverageHoldingPeriod(trades),\n      bestMonth: Math.max(...monthlyReturns),\n      worstMonth: Math.min(...monthlyReturns)\n    };\n  }\n  \n  /**\n   * Calculate maximum drawdown\n   */\n  private calculateMaxDrawdown(trades: BacktestTrade[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n    \n    trades.forEach(trade => {\n      if (trade.balance > peak) {\n        peak = trade.balance;\n      }\n      \n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n    \n    return maxDrawdown;\n  }\n  \n  /**\n   * Calculate Sharpe ratio\n   */\n  private calculateSharpeRatio(trades: BacktestTrade[]): number {\n    const returns = trades.map(t => t.pnlPercent);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const stdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length\n    );\n    \n    return avgReturn / stdDev;\n  }\n  \n  /**\n   * Calculate daily returns\n   */\n  private calculateDailyReturns(trades: BacktestTrade[]): number[] {\n    const dailyPnL = new Map<string, number>();\n    \n    trades.forEach(trade => {\n      const date = new Date(trade.timestamp).toISOString().split('T')[0];\n      const currentPnL = dailyPnL.get(date) || 0;\n      dailyPnL.set(date, currentPnL + trade.pnl);\n    });\n    \n    return Array.from(dailyPnL.values());\n  }\n  \n  /**\n   * Calculate monthly returns\n   */\n  private calculateMonthlyReturns(trades: BacktestTrade[]): number[] {\n    const monthlyPnL = new Map<string, number>();\n    \n    trades.forEach(trade => {\n      const date = new Date(trade.timestamp);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      const currentPnL = monthlyPnL.get(monthKey) || 0;\n      monthlyPnL.set(monthKey, currentPnL + trade.pnl);\n    });\n    \n    return Array.from(monthlyPnL.values());\n  }\n  \n  /**\n   * Calculate volatility\n   */\n  private calculateVolatility(returns: number[]): number {\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length\n    );\n  }\n  \n  /**\n   * Calculate profit factor\n   */\n  private calculateProfitFactor(trades: BacktestTrade[]): number {\n    const grossProfit = trades\n      .filter(t => t.pnl > 0)\n      .reduce((sum, t) => sum + t.pnl, 0);\n      \n    const grossLoss = Math.abs(\n      trades\n        .filter(t => t.pnl < 0)\n        .reduce((sum, t) => sum + t.pnl, 0)\n    );\n    \n    return grossProfit / grossLoss;\n  }\n  \n  /**\n   * Calculate recovery factor\n   */\n  private calculateRecoveryFactor(trades: BacktestTrade[], initialBalance: number): number {\n    const maxDrawdown = this.calculateMaxDrawdown(trades);\n    const netProfit = trades[trades.length - 1].balance - initialBalance;\n    \n    return netProfit / (maxDrawdown * initialBalance);\n  }\n  \n  /**\n   * Calculate average holding period\n   */\n  private calculateAverageHoldingPeriod(trades: BacktestTrade[]): number {\n    let totalHoldingTime = 0;\n    let positions = 0;\n    \n    for (let i = 0; i < trades.length - 1; i++) {\n      if (trades[i].type === 'BUY' && trades[i + 1].type === 'SELL') {\n        totalHoldingTime += trades[i + 1].timestamp - trades[i].timestamp;\n        positions++;\n      }\n    }\n    \n    return totalHoldingTime / positions / (1000 * 60 * 60); // Convert to hours\n  }\n  \n  /**\n   * Generate parameter combinations for optimization\n   */\n  private generateParameterCombinations(\n    ranges: Record<string, [number, number, number]>\n  ): Record<string, number>[] {\n    const combinations: Record<string, number>[] = [];\n    const parameters = Object.keys(ranges);\n    \n    const generateCombination = (\n      current: Record<string, number>,\n      paramIndex: number\n    ) => {\n      if (paramIndex === parameters.length) {\n        combinations.push({...current});\n        return;\n      }\n      \n      const param = parameters[paramIndex];\n      const [min, max, step] = ranges[param];\n      \n      for (let value = min; value <= max; value += step) {\n        current[param] = value;\n        generateCombination(current, paramIndex + 1);\n      }\n    };\n    \n    generateCombination({}, 0);\n    return combinations;\n  }\n}\n\nexport const backtestService = BacktestService.getInstance();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/liveTradingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_reason' is assigned a value but never used.","line":171,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":578,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":578,"endColumn":16,"suggestions":[{"fix":{"range":[16976,17038],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ConfidenceMetrics,\n  mockTradingService,\n} from \"@/services/mockTradingService\";\nimport { poloniexApi } from \"@/services/poloniexAPI\";\nimport { MarketData, Strategy } from \"@/types\";\nimport { executeStrategy } from \"@/utils/strategyExecutors\";\n\n// Live trading interfaces\nexport interface LiveTradingSession {\n  id: string;\n  strategyId: string;\n  startTime: number;\n  endTime?: number;\n  isActive: boolean;\n  initialBalance: number;\n  currentBalance: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  trades: LiveTrade[];\n  riskLimits: RiskLimits;\n  safetyChecks: SafetyStatus;\n  confidenceMetrics: ConfidenceMetrics;\n}\n\nexport interface LiveTrade {\n  id: string;\n  sessionId: string;\n  timestamp: number;\n  type: \"BUY\" | \"SELL\";\n  symbol: string;\n  price: number;\n  amount: number;\n  total: number;\n  fee: number;\n  pnl: number;\n  pnlPercent: number;\n  balance: number;\n  orderId: string;\n  executionTime: number;\n  slippage: number;\n  confidence: number;\n  status: \"PENDING\" | \"FILLED\" | \"FAILED\" | \"CANCELLED\";\n  errorMessage?: string;\n}\n\nexport interface RiskLimits {\n  maxDrawdownPercent: number; // Max 20% drawdown\n  maxDailyLossPercent: number; // Max 5% daily loss\n  maxPositionSize: number; // Max position size in USD\n  maxOpenPositions: number; // Max concurrent positions\n  stopTradingOnLoss: number; // Stop if loss exceeds this amount\n  requireConfidenceScore: number; // Minimum confidence score (75%)\n  emergencyStopEnabled: boolean;\n}\n\nexport interface SafetyStatus {\n  confidenceCheckPassed: boolean;\n  riskLimitsValid: boolean;\n  accountBalanceVerified: boolean;\n  apiKeysValid: boolean;\n  drawdownWithinLimits: boolean;\n  dailyLossWithinLimits: boolean;\n  emergencyStopTriggered: boolean;\n  lastSafetyCheck: number;\n  warnings: string[];\n  errors: string[];\n}\n\nexport interface LiveTradingConfig {\n  strategy: Strategy;\n  initialBalance: number;\n  riskLimits: RiskLimits;\n  autoStopOnFailure: boolean;\n  notificationSettings: {\n    tradeAlerts: boolean;\n    riskAlerts: boolean;\n    emergencyAlerts: boolean;\n  };\n}\n\nexport class LiveTradingService {\n  private static instance: LiveTradingService;\n  private activeSessions: Map<string, LiveTradingSession> = new Map();\n  private marketDataCache: Map<string, MarketData[]> = new Map();\n  private emergencyStopActivated: boolean = false;\n  private safetyCheckInterval: number = 30000; // 30 seconds\n  private maxTradesPerMinute: number = 10;\n  private tradeHistory: Map<string, number[]> = new Map(); // timestamp tracking\n\n  private constructor() {\n    // Initialize safety monitoring\n    this.startSafetyMonitoring();\n  }\n\n  public static getInstance(): LiveTradingService {\n    if (!LiveTradingService.instance) {\n      LiveTradingService.instance = new LiveTradingService();\n    }\n    return LiveTradingService.instance;\n  }\n\n  /**\n   * Start live trading session with comprehensive safety checks\n   */\n  public async startLiveTrading(config: LiveTradingConfig): Promise<string> {\n    // Pre-flight safety checks\n    const safetyCheck = await this.performPreFlightChecks(config);\n    if (!safetyCheck.passed) {\n      throw new Error(`Safety checks failed: ${safetyCheck.errors.join(\", \")}`);\n    }\n\n    // Verify confidence score from mock trading\n    const confidence = mockTradingService.getStrategyConfidenceAggregate(\n      config.strategy.id\n    );\n    if (\n      !confidence ||\n      confidence.overall < config.riskLimits.requireConfidenceScore\n    ) {\n      throw new Error(\n        `Strategy confidence score ${\n          confidence?.overall || 0\n        }% is below required ${config.riskLimits.requireConfidenceScore}%. ` +\n          \"Complete mock trading with sufficient confidence before enabling live trading.\"\n      );\n    }\n\n    if (confidence.recommendation !== \"READY_FOR_LIVE\") {\n      throw new Error(\n        `Strategy is not ready for live trading. Current status: ${confidence.recommendation}. ` +\n          \"Improve mock trading performance before proceeding.\"\n      );\n    }\n\n    // Create live trading session\n    const sessionId = `live_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    const session: LiveTradingSession = {\n      id: sessionId,\n      strategyId: config.strategy.id,\n      startTime: Date.now(),\n      isActive: true,\n      initialBalance: config.initialBalance,\n      currentBalance: config.initialBalance,\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      trades: [],\n      riskLimits: config.riskLimits,\n      safetyChecks: this.createInitialSafetyStatus(),\n      confidenceMetrics: confidence,\n    };\n\n    this.activeSessions.set(sessionId, session);\n\n    // Start market data monitoring and strategy execution\n    await this.startStrategyExecution(sessionId, config.strategy);\n\n    return sessionId;\n  }\n\n  /**\n   * Stop live trading session with proper cleanup\n   */\n  public async stopLiveTrading(\n    sessionId: string,\n    _reason: string = \"Manual stop\"\n  ): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`Live trading session ${sessionId} not found`);\n    }\n\n    // Cancel any pending orders\n    await this.cancelAllPendingOrders(sessionId);\n\n    // Close all open positions (if applicable)\n    await this.closeAllPositions(sessionId);\n\n    // Mark session as inactive\n    session.isActive = false;\n    session.endTime = Date.now();\n  }\n\n  /**\n   * Emergency stop all live trading\n   */\n  public async emergencyStopAll(reason: string): Promise<void> {\n    this.emergencyStopActivated = true;\n\n    const stopPromises = Array.from(this.activeSessions.keys()).map(\n      (sessionId) =>\n        this.stopLiveTrading(sessionId, `Emergency stop: ${reason}`)\n    );\n\n    await Promise.allSettled(stopPromises);\n  }\n\n  /**\n   * Execute a live trade with comprehensive safety checks\n   */\n  public async executeLiveTrade(\n    sessionId: string,\n    signal: { signal: \"BUY\" | \"SELL\" | null; confidence: number },\n    marketData: MarketData\n  ): Promise<LiveTrade | null> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session || !session.isActive || !signal.signal) return null;\n\n    // Emergency stop check\n    if (this.emergencyStopActivated) {\n      return null;\n    }\n\n    // Rate limiting check\n    if (!this.checkRateLimit(sessionId)) {\n      return null;\n    }\n\n    // Safety checks\n    const safetyCheck = await this.performTradeSafetyChecks(session, signal);\n    if (!safetyCheck.passed) {\n      return null;\n    }\n\n    try {\n      const amount = this.calculatePositionSize(session, marketData);\n      const tradeId = `trade_${Date.now()}_${Math.random()\n        .toString(36)\n        .substr(2, 6)}`;\n\n      // Create pending trade record\n      const trade: LiveTrade = {\n        id: tradeId,\n        sessionId,\n        timestamp: Date.now(),\n        type: signal.signal,\n        symbol: marketData.pair,\n        price: marketData.close,\n        amount,\n        total: marketData.close * amount,\n        fee: 0,\n        pnl: 0,\n        pnlPercent: 0,\n        balance: session.currentBalance,\n        orderId: \"\",\n        executionTime: 0,\n        slippage: 0,\n        confidence: signal.confidence,\n        status: \"PENDING\",\n      };\n\n      // Execute order through Poloniex API\n      const startTime = Date.now();\n      const orderResult = await poloniexApi.placeOrder(\n        marketData.pair,\n        signal.signal.toLowerCase() as \"buy\" | \"sell\",\n        \"market\",\n        amount\n      );\n\n      trade.executionTime = Date.now() - startTime;\n      trade.orderId = orderResult.orderId || \"\";\n\n      if (orderResult.success) {\n        // Update trade with execution details\n        trade.status = \"FILLED\";\n        trade.fee = trade.total * 0.001; // Approximate fee\n        trade.total += trade.fee;\n\n        // Update session\n        session.trades.push(trade);\n        session.totalTrades++;\n        session.currentBalance = trade.balance;\n\n        // Update P&L tracking\n        if (trade.pnl > 0) {\n          session.winningTrades++;\n        } else if (trade.pnl < 0) {\n          session.losingTrades++;\n        }\n\n        return trade;\n      } else {\n        trade.status = \"FAILED\";\n        trade.errorMessage = \"Order execution failed\";\n        session.trades.push(trade);\n        return trade;\n      }\n    } catch (error) {\n      const errorTrade: LiveTrade = {\n        id: `error_${Date.now()}`,\n        sessionId,\n        timestamp: Date.now(),\n        type: signal.signal,\n        symbol: marketData.pair,\n        price: marketData.close,\n        amount: 0,\n        total: 0,\n        fee: 0,\n        pnl: 0,\n        pnlPercent: 0,\n        balance: session.currentBalance,\n        orderId: \"\",\n        executionTime: 0,\n        slippage: 0,\n        confidence: signal.confidence,\n        status: \"FAILED\",\n        errorMessage: error instanceof Error ? error.message : \"Unknown error\",\n      };\n\n      session.trades.push(errorTrade);\n      return errorTrade;\n    }\n  }\n\n  /**\n   * Get live trading session\n   */\n  public getLiveTradingSession(sessionId: string): LiveTradingSession | null {\n    return this.activeSessions.get(sessionId) || null;\n  }\n\n  /**\n   * Get all active live trading sessions\n   */\n  public getActiveLiveTradingSessions(): LiveTradingSession[] {\n    return Array.from(this.activeSessions.values()).filter(\n      (session) => session.isActive\n    );\n  }\n\n  /**\n   * Update MCP memory with live trading results for future optimization\n   */\n  public async updateMemoryWithResults(sessionId: string): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) return;\n\n    // This would integrate with MCP memory service to store results\n    // for future strategy optimization and learning\n    // In a production environment, this would log to a proper logging service\n    // Logging: Updating memory with live trading results for session\n  }\n\n  // Private helper methods\n\n  private async performPreFlightChecks(\n    config: LiveTradingConfig\n  ): Promise<{ passed: boolean; errors: string[] }> {\n    const errors: string[] = [];\n\n    try {\n      // Check API connectivity\n      await poloniexApi.getAccountBalance();\n    } catch {\n      errors.push(\"API connection failed\");\n    }\n\n    // Check confidence score\n    const confidence = mockTradingService.getStrategyConfidenceAggregate(\n      config.strategy.id\n    );\n    if (\n      !confidence ||\n      confidence.overall < config.riskLimits.requireConfidenceScore\n    ) {\n      errors.push(\n        `Insufficient confidence score: ${confidence?.overall || 0}%`\n      );\n    }\n\n    if (confidence?.recommendation !== \"READY_FOR_LIVE\") {\n      errors.push(\n        `Strategy not ready: ${confidence?.recommendation || \"Unknown\"}`\n      );\n    }\n\n    // Check risk limits\n    if (config.riskLimits.maxDrawdownPercent > 0.3) {\n      errors.push(\"Max drawdown limit too high (>30%)\");\n    }\n\n    if (config.riskLimits.maxDailyLossPercent > 0.1) {\n      errors.push(\"Max daily loss limit too high (>10%)\");\n    }\n\n    return { passed: errors.length === 0, errors };\n  }\n\n  private createInitialSafetyStatus(): SafetyStatus {\n    return {\n      confidenceCheckPassed: false,\n      riskLimitsValid: false,\n      accountBalanceVerified: false,\n      apiKeysValid: false,\n      drawdownWithinLimits: true,\n      dailyLossWithinLimits: true,\n      emergencyStopTriggered: false,\n      lastSafetyCheck: Date.now(),\n      warnings: [],\n      errors: [],\n    };\n  }\n\n  private async performTradeSafetyChecks(\n    session: LiveTradingSession,\n    signal: { signal: \"BUY\" | \"SELL\" | null; confidence: number }\n  ): Promise<{ passed: boolean; errors: string[] }> {\n    const errors: string[] = [];\n\n    // Check confidence threshold\n    if (signal.confidence < 0.7) {\n      errors.push(`Signal confidence too low: ${signal.confidence}`);\n    }\n\n    // Check drawdown limits\n    const currentDrawdown = this.calculateCurrentDrawdown(session);\n    if (currentDrawdown > session.riskLimits.maxDrawdownPercent) {\n      errors.push(\n        `Drawdown limit exceeded: ${(currentDrawdown * 100).toFixed(2)}%`\n      );\n    }\n\n    // Check daily loss limits\n    const dailyLoss = this.calculateDailyLoss(session);\n    if (dailyLoss > session.riskLimits.maxDailyLossPercent) {\n      errors.push(\n        `Daily loss limit exceeded: ${(dailyLoss * 100).toFixed(2)}%`\n      );\n    }\n\n    // Check position limits\n    if (\n      session.trades.filter((t) => t.status === \"FILLED\").length >=\n      session.riskLimits.maxOpenPositions\n    ) {\n      errors.push(\"Maximum open positions reached\");\n    }\n\n    return { passed: errors.length === 0, errors };\n  }\n\n  private async startStrategyExecution(\n    sessionId: string,\n    strategy: Strategy\n  ): Promise<void> {\n    const updateInterval = setInterval(async () => {\n      const session = this.activeSessions.get(sessionId);\n      if (!session || !session.isActive) {\n        clearInterval(updateInterval);\n        return;\n      }\n\n      try {\n        // Get latest market data\n        const marketDataArray = await poloniexApi.getMarketData(\n          strategy.parameters.pair\n        );\n\n        if (marketDataArray && marketDataArray.length > 0) {\n          const latestCandle = marketDataArray[marketDataArray.length - 1];\n          const latestData = {\n            pair: strategy.parameters.pair,\n            timestamp: Date.now(),\n            open: parseFloat(latestCandle[1]),\n            high: parseFloat(latestCandle[2]),\n            low: parseFloat(latestCandle[3]),\n            close: parseFloat(latestCandle[4]),\n            volume: parseFloat(latestCandle[5]),\n          };\n\n          // Update cache\n          const symbol = strategy.parameters.pair;\n          const cache = this.marketDataCache.get(symbol) || [];\n          cache.push(latestData);\n          if (cache.length > 200) cache.shift();\n          this.marketDataCache.set(symbol, cache);\n\n          // Generate and execute signal\n          const signal = executeStrategy(strategy, cache);\n          if (signal.signal) {\n            await this.executeLiveTrade(sessionId, signal, latestData);\n          }\n        }\n      } catch (error) {\n        // Re-throw the error to be handled by the caller\n        // In a production environment, this would also log to a proper logging service\n        throw new Error(`Strategy execution failed: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }, 10000); // Execute every 10 seconds\n  }\n\n  private calculatePositionSize(\n    session: LiveTradingSession,\n    marketData: MarketData\n  ): number {\n    // Conservative position sizing: 1% of balance per trade\n    const maxPositionValue = Math.min(\n      session.currentBalance * 0.01,\n      session.riskLimits.maxPositionSize\n    );\n    return maxPositionValue / marketData.close;\n  }\n\n  private calculateCurrentDrawdown(session: LiveTradingSession): number {\n    if (session.trades.length === 0) return 0;\n\n    let peak = session.initialBalance;\n    let maxDrawdown = 0;\n\n    session.trades.forEach((trade) => {\n      if (trade.balance > peak) peak = trade.balance;\n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n\n    return maxDrawdown;\n  }\n\n  private calculateDailyLoss(session: LiveTradingSession): number {\n    const dayStart = new Date();\n    dayStart.setHours(0, 0, 0, 0);\n\n    const todayTrades = session.trades.filter(\n      (t) => t.timestamp >= dayStart.getTime()\n    );\n    const dailyPnL = todayTrades.reduce((sum, t) => sum + t.pnl, 0);\n\n    return Math.abs(Math.min(0, dailyPnL)) / session.initialBalance;\n  }\n\n  private checkRateLimit(sessionId: string): boolean {\n    const now = Date.now();\n    const trades = this.tradeHistory.get(sessionId) || [];\n\n    // Remove trades older than 1 minute\n    const recentTrades = trades.filter((timestamp) => now - timestamp < 60000);\n\n    if (recentTrades.length >= this.maxTradesPerMinute) {\n      return false;\n    }\n\n    recentTrades.push(now);\n    this.tradeHistory.set(sessionId, recentTrades);\n    return true;\n  }\n\n  private async cancelAllPendingOrders(sessionId: string): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) return;\n\n    const pendingTrades = session.trades.filter((t) => t.status === \"PENDING\");\n    \n    // Update the session status to reflect the cancellation\n    // The caller can check the number of pending orders if needed\n    if (pendingTrades.length > 0) {\n      session.safetyChecks.warnings.push(\n        `Cancelled ${pendingTrades.length} pending orders during session cleanup`\n      );\n    }\n\n    // Implementation would cancel orders via Poloniex API\n    // For now, just mark as cancelled\n    pendingTrades.forEach((trade) => {\n      trade.status = \"CANCELLED\";\n    });\n  }\n\n  private async closeAllPositions(sessionId: string): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) return;\n\n    console.log(`Closing all positions for session ${sessionId}`);\n    // Implementation would close positions via Poloniex API\n  }\n\n  private startSafetyMonitoring(): void {\n    setInterval(() => {\n      this.performPeriodicSafetyChecks();\n    }, this.safetyCheckInterval);\n  }\n\n  private async performPeriodicSafetyChecks(): Promise<void> {\n    for (const session of this.activeSessions.values()) {\n      if (!session.isActive) continue;\n\n      try {\n        // Check drawdown limits\n        const drawdown = this.calculateCurrentDrawdown(session);\n        if (drawdown > session.riskLimits.maxDrawdownPercent) {\n          await this.stopLiveTrading(session.id, \"Drawdown limit exceeded\");\n          continue;\n        }\n\n        // Check daily loss limits\n        const dailyLoss = this.calculateDailyLoss(session);\n        if (dailyLoss > session.riskLimits.maxDailyLossPercent) {\n          await this.stopLiveTrading(session.id, \"Daily loss limit exceeded\");\n          continue;\n        }\n\n        // Update safety status\n        session.safetyChecks = {\n          ...session.safetyChecks,\n          drawdownWithinLimits:\n            drawdown <= session.riskLimits.maxDrawdownPercent,\n          dailyLossWithinLimits:\n            dailyLoss <= session.riskLimits.maxDailyLossPercent,\n          lastSafetyCheck: Date.now(),\n        };\n      } catch (error) {\n        // Add the error to the session's safety check errors\n        const errorMessage = `Safety check failed: ${error instanceof Error ? error.message : String(error)}`;\n        session.safetyChecks.errors.push(errorMessage);\n        \n        // In a production environment, this would also log to a proper logging service\n        // and potentially trigger an alert for critical safety check failures\n      }\n    }\n  }\n}\n\nexport const liveTradingService = LiveTradingService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/mockDataService.ts","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMockMode\" is called in function \"getMarketData\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":31,"column":9,"nodeType":"Identifier","endLine":31,"endColumn":20},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMockMode\" is called in function \"getOrderBook\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":124,"column":9,"nodeType":"Identifier","endLine":124,"endColumn":20},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMockMode\" is called in function \"getTrades\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":189,"column":9,"nodeType":"Identifier","endLine":189,"endColumn":20},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMockMode\" is called in function \"getTicker\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":241,"column":9,"nodeType":"Identifier","endLine":241,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MarketData, OrderBook, Trade, Ticker } from '@/types';\nimport { useMockMode } from '../hooks/useMockMode';\nimport { generateRandomMarketData, generateRandomOrderBook, generateRandomTrades, generateRandomTicker } from './mockDataGenerators';\n\n// Cache for historical data\nconst historicalDataCache: Record<string, MarketData[]> = {};\nconst orderBookCache: Record<string, OrderBook> = {};\nconst tradesCache: Record<string, Trade[]> = {};\nconst tickerCache: Record<string, Ticker> = {};\n\n/**\n * Mock data service for generating and managing mock market data\n */\nexport const mockDataService = {\n  /**\n   * Get mock market data for a specific symbol and timeframe\n   */\n  getMarketData: (\n    symbol: string,\n    timeframe: string,\n    limit: number = 100\n  ): Promise<MarketData[]> => {\n    const { \n      isMockMode, \n      mockDataSource, \n      mockDataDelay, \n      mockVolatility, \n      mockTrendBias,\n      mockHistoricalPeriod,\n      mockDataOptions \n    } = useMockMode();\n\n    // If not in mock mode, reject with error\n    if (!isMockMode) {\n      return Promise.reject(new Error('Mock mode is disabled'));\n    }\n\n    return new Promise((resolve, reject) => {\n      // Simulate network delay if enabled\n      const delay = mockDataOptions.simulateLatency ? \n        Math.random() * mockDataDelay : \n        0;\n\n      // Simulate random errors if enabled\n      if (mockDataOptions.simulateErrors && Math.random() < mockDataOptions.errorRate) {\n        setTimeout(() => {\n          reject(new Error('Simulated network error'));\n        }, delay);\n        return;\n      }\n\n      setTimeout(() => {\n        try {\n          let data: MarketData[];\n\n          switch (mockDataSource) {\n            case 'random':\n              // Generate random data with specified parameters\n              data = generateRandomMarketData(\n                symbol,\n                timeframe,\n                limit,\n                mockVolatility,\n                mockTrendBias,\n                mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n              );\n              break;\n\n            case 'historical':\n              // Use cached historical data or generate new data\n              const cacheKey = `${symbol}_${timeframe}_${mockHistoricalPeriod}`;\n              if (!historicalDataCache[cacheKey]) {\n                // In a real implementation, this would fetch from a historical data API\n                // For now, we'll generate random data as a placeholder\n                historicalDataCache[cacheKey] = generateRandomMarketData(\n                  symbol,\n                  timeframe,\n                  limit * 5, // Generate more data for historical cache\n                  mockVolatility,\n                  mockTrendBias,\n                  mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n                );\n              }\n              \n              // Return a slice of the cached data\n              data = historicalDataCache[cacheKey].slice(0, limit);\n              break;\n\n            case 'simulation':\n              // Generate simulated market data based on realistic market behavior\n              // This would be more sophisticated in a real implementation\n              data = generateRandomMarketData(\n                symbol,\n                timeframe,\n                limit,\n                mockVolatility,\n                mockTrendBias,\n                mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined,\n                true // Use more realistic simulation\n              );\n              break;\n\n            default:\n              data = [];\n          }\n\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        }\n      }, delay);\n    });\n  },\n\n  /**\n   * Get mock order book data for a specific symbol\n   */\n  getOrderBook: (symbol: string): Promise<OrderBook> => {\n    const { \n      isMockMode, \n      mockDataDelay, \n      mockVolatility,\n      mockDataOptions \n    } = useMockMode();\n\n    // If not in mock mode, reject with error\n    if (!isMockMode) {\n      return Promise.reject(new Error('Mock mode is disabled'));\n    }\n\n    return new Promise((resolve, reject) => {\n      // Simulate network delay if enabled\n      const delay = mockDataOptions.simulateLatency ? \n        Math.random() * mockDataDelay : \n        0;\n\n      // Simulate random errors if enabled\n      if (mockDataOptions.simulateErrors && Math.random() < mockDataOptions.errorRate) {\n        setTimeout(() => {\n          reject(new Error('Simulated network error'));\n        }, delay);\n        return;\n      }\n\n      setTimeout(() => {\n        try {\n          // Use cached order book or generate new one\n          if (!orderBookCache[symbol]) {\n            orderBookCache[symbol] = generateRandomOrderBook(\n              symbol,\n              mockVolatility,\n              mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n            );\n          } else {\n            // Update the existing order book with some changes to simulate market activity\n            const book = orderBookCache[symbol];\n            const updatedBook = generateRandomOrderBook(\n              symbol,\n              mockVolatility,\n              mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n            );\n            \n            // Merge some of the new orders with existing ones\n            orderBookCache[symbol] = {\n              ...book,\n              bids: [...book.bids.slice(3), ...updatedBook.bids.slice(0, 3)],\n              asks: [...book.asks.slice(3), ...updatedBook.asks.slice(0, 3)],\n              timestamp: Date.now()\n            };\n          }\n\n          resolve(orderBookCache[symbol]);\n        } catch (error) {\n          reject(error);\n        }\n      }, delay);\n    });\n  },\n\n  /**\n   * Get mock trades for a specific symbol\n   */\n  getTrades: (symbol: string, limit: number = 50): Promise<Trade[]> => {\n    const { \n      isMockMode, \n      mockDataDelay, \n      mockVolatility,\n      mockDataOptions \n    } = useMockMode();\n\n    // If not in mock mode, reject with error\n    if (!isMockMode) {\n      return Promise.reject(new Error('Mock mode is disabled'));\n    }\n\n    return new Promise((resolve, reject) => {\n      // Simulate network delay if enabled\n      const delay = mockDataOptions.simulateLatency ? \n        Math.random() * mockDataDelay : \n        0;\n\n      // Simulate random errors if enabled\n      if (mockDataOptions.simulateErrors && Math.random() < mockDataOptions.errorRate) {\n        setTimeout(() => {\n          reject(new Error('Simulated network error'));\n        }, delay);\n        return;\n      }\n\n      setTimeout(() => {\n        try {\n          // Generate new trades\n          const newTrades = generateRandomTrades(\n            symbol,\n            limit,\n            mockVolatility,\n            mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n          );\n\n          // Update cache\n          tradesCache[symbol] = newTrades;\n\n          resolve(newTrades);\n        } catch (error) {\n          reject(error);\n        }\n      }, delay);\n    });\n  },\n\n  /**\n   * Get mock ticker data for a specific symbol\n   */\n  getTicker: (symbol: string): Promise<Ticker> => {\n    const { \n      isMockMode, \n      mockDataDelay, \n      mockVolatility,\n      mockTrendBias,\n      mockDataOptions \n    } = useMockMode();\n\n    // If not in mock mode, reject with error\n    if (!isMockMode) {\n      return Promise.reject(new Error('Mock mode is disabled'));\n    }\n\n    return new Promise((resolve, reject) => {\n      // Simulate network delay if enabled\n      const delay = mockDataOptions.simulateLatency ? \n        Math.random() * mockDataDelay : \n        0;\n\n      // Simulate random errors if enabled\n      if (mockDataOptions.simulateErrors && Math.random() < mockDataOptions.errorRate) {\n        setTimeout(() => {\n          reject(new Error('Simulated network error'));\n        }, delay);\n        return;\n      }\n\n      setTimeout(() => {\n        try {\n          // Use cached ticker as base or generate new one\n          if (!tickerCache[symbol]) {\n            tickerCache[symbol] = generateRandomTicker(\n              symbol,\n              mockVolatility,\n              mockTrendBias,\n              mockDataOptions.useRandomSeed ? mockDataOptions.randomSeed : undefined\n            );\n          } else {\n            // Update the existing ticker with some changes to simulate market activity\n            const prevTicker = tickerCache[symbol];\n            const priceFactor = 1 + (Math.random() * mockVolatility * 0.02 - 0.01 + mockTrendBias * 0.005);\n            const volumeFactor = 1 + (Math.random() * mockVolatility * 0.1 - 0.05);\n            \n            tickerCache[symbol] = {\n              ...prevTicker,\n              lastPrice: prevTicker.lastPrice * priceFactor,\n              bidPrice: prevTicker.bidPrice * priceFactor,\n              askPrice: prevTicker.askPrice * priceFactor,\n              volume24h: prevTicker.volume24h * volumeFactor,\n              high24h: Math.max(prevTicker.high24h, prevTicker.lastPrice * priceFactor),\n              low24h: Math.min(prevTicker.low24h, prevTicker.lastPrice * priceFactor),\n              timestamp: Date.now()\n            };\n          }\n\n          resolve(tickerCache[symbol]);\n        } catch (error) {\n          reject(error);\n        }\n      }, delay);\n    });\n  },\n\n  /**\n   * Clear all cached mock data\n   */\n  clearCache: () => {\n    Object.keys(historicalDataCache).forEach(key => delete historicalDataCache[key]);\n    Object.keys(orderBookCache).forEach(key => delete orderBookCache[key]);\n    Object.keys(tradesCache).forEach(key => delete tradesCache[key]);\n    Object.keys(tickerCache).forEach(key => delete tickerCache[key]);\n  }\n};\n\nexport default mockDataService;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/mockTradingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":136,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'leverage' is assigned a value but never used.","line":222,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is defined but never used.","line":544,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is defined but never used.","line":563,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":563,"endColumn":15}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { poloniexApi } from \"@/services/poloniexAPI\";\nimport { MarketData, Strategy } from \"@/types\";\nimport { BacktestTrade } from \"@/types/backtest\";\nimport { executeStrategy } from \"@/utils/strategyExecutors\";\n\n// Mock trading interfaces\nexport interface MockTrade extends BacktestTrade {\n  realPrice: number; // Actual market price at execution\n  slippage: number; // Actual slippage experienced\n  latency: number; // Execution latency in ms\n  confidence: number; // Trade confidence score (0-1)\n  marketConditions: {\n    volatility: number;\n    volume: number;\n    spread: number;\n    momentum: number;\n  };\n}\n\nexport interface MockPosition {\n  id: string;\n  symbol: string;\n  side: \"LONG\" | \"SHORT\";\n  entryPrice: number;\n  currentPrice: number;\n  quantity: number;\n  entryTime: number;\n  unrealizedPnL: number;\n  unrealizedPnLPercent: number;\n  marketValue: number;\n  marginUsed: number;\n}\n\nexport interface MockPortfolio {\n  balance: number;\n  equity: number;\n  availableBalance: number;\n  positions: MockPosition[];\n  totalUnrealizedPnL: number;\n  marginUsed: number;\n  marginLevel: number;\n  dayPnL: number;\n  totalPnL: number;\n}\n\nexport interface MockTradingSession {\n  id: string;\n  strategyId: string;\n  startTime: number;\n  endTime?: number;\n  initialBalance: number;\n  currentBalance: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  trades: MockTrade[];\n  portfolio: MockPortfolio;\n  performance: MockSessionPerformance;\n  isActive: boolean;\n}\n\nexport interface MockSessionPerformance {\n  winRate: number;\n  profitFactor: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  averageWin: number;\n  averageLoss: number;\n  totalReturn: number;\n  volatility: number;\n  confidenceScore: number;\n  riskAdjustedReturn: number;\n  consistencyScore: number;\n  stabilityIndex: number;\n}\n\nexport interface ConfidenceMetrics {\n  overall: number; // 0-100 confidence score\n  profitability: number;\n  consistency: number;\n  riskManagement: number;\n  executionQuality: number;\n  marketAdaptability: number;\n  timeStability: number;\n  components: {\n    winRate: { score: number; weight: number; value: number };\n    profitFactor: { score: number; weight: number; value: number };\n    sharpeRatio: { score: number; weight: number; value: number };\n    maxDrawdown: { score: number; weight: number; value: number };\n    consistency: { score: number; weight: number; value: number };\n    riskAdjustedReturn: { score: number; weight: number; value: number };\n    executionLatency: { score: number; weight: number; value: number };\n    slippageControl: { score: number; weight: number; value: number };\n  };\n  recommendation:\n    | \"READY_FOR_LIVE\"\n    | \"NEEDS_IMPROVEMENT\"\n    | \"HIGH_RISK\"\n    | \"INSUFFICIENT_DATA\";\n  requiredConfidence: number;\n  timeInMockMode: number; // days\n  minimumTimeRequired: number; // days\n  readinessChecklist: {\n    profitabilityTest: boolean;\n    riskManagementTest: boolean;\n    consistencyTest: boolean;\n    executionTest: boolean;\n    timeTest: boolean;\n    drawdownTest: boolean;\n  };\n}\n\nexport class MockTradingService {\n  private static instance: MockTradingService;\n  private activeSessions: Map<string, MockTradingSession> = new Map();\n  private marketDataCache: Map<string, MarketData[]> = new Map();\n  private priceSubscriptions: Map<string, (data: MarketData) => void> =\n    new Map();\n  private isRunning: boolean = false;\n\n  private constructor() {}\n\n  public static getInstance(): MockTradingService {\n    if (!MockTradingService.instance) {\n      MockTradingService.instance = new MockTradingService();\n    }\n    return MockTradingService.instance;\n  }\n\n  /**\n   * Start a new mock trading session\n   */\n  public async startMockSession(\n    strategy: Strategy,\n    initialBalance: number = 10000,\n    options: {\n      maxDrawdownLimit?: number;\n      stopLossPercent?: number;\n      takeProfitPercent?: number;\n      maxPositions?: number;\n    } = {}\n  ): Promise<string> {\n    const sessionId = `mock_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    const session: MockTradingSession = {\n      id: sessionId,\n      strategyId: strategy.id,\n      startTime: Date.now(),\n      initialBalance,\n      currentBalance: initialBalance,\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      trades: [],\n      portfolio: this.createInitialPortfolio(initialBalance),\n      performance: this.createInitialPerformance(),\n      isActive: true,\n    };\n\n    this.activeSessions.set(sessionId, session);\n\n    // Start monitoring market data for this strategy\n    await this.startMarketDataMonitoring(sessionId, strategy);\n\n    return sessionId;\n  }\n\n  /**\n   * Stop a mock trading session\n   */\n  public stopMockSession(sessionId: string): MockTradingSession | null {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) return null;\n\n    session.isActive = false;\n    session.endTime = Date.now();\n\n    // Close all open positions\n    this.closeAllPositions(sessionId);\n\n    // Calculate final performance\n    session.performance = this.calculateSessionPerformance(session);\n\n    return session;\n  }\n\n  /**\n   * Get active mock session\n   */\n  public getMockSession(sessionId: string): MockTradingSession | null {\n    return this.activeSessions.get(sessionId) || null;\n  }\n\n  /**\n   * Get all mock sessions for a strategy\n   */\n  public getStrategyMockSessions(strategyId: string): MockTradingSession[] {\n    return Array.from(this.activeSessions.values()).filter(\n      (session) => session.strategyId === strategyId\n    );\n  }\n\n  /**\n   * Execute a mock trade based on strategy signal\n   */\n  public async executeMockTrade(\n    sessionId: string,\n    signal: { signal: \"BUY\" | \"SELL\" | null; confidence: number },\n    marketData: MarketData,\n    options: {\n      amount?: number;\n      leverage?: number;\n      orderType?: \"MARKET\" | \"LIMIT\";\n      limitPrice?: number;\n    } = {}\n  ): Promise<MockTrade | null> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session || !session.isActive || !signal.signal) return null;\n\n    const { amount = this.calculatePositionSize(session), leverage = 1 } =\n      options;\n\n    // Calculate realistic execution parameters\n    const executionLatency = this.simulateExecutionLatency();\n    const slippage = this.simulateSlippage(marketData, amount);\n    const executionPrice = this.calculateExecutionPrice(\n      marketData.close,\n      signal.signal,\n      slippage\n    );\n\n    // Create mock trade\n    const trade: MockTrade = {\n      timestamp: Date.now(),\n      type: signal.signal,\n      price: executionPrice,\n      amount,\n      total: executionPrice * amount,\n      pnl: 0, // Will be calculated when position is closed\n      pnlPercent: 0,\n      balance: session.currentBalance,\n      realPrice: marketData.close,\n      slippage,\n      latency: executionLatency,\n      confidence: signal.confidence,\n      marketConditions: {\n        volatility: this.calculateVolatility(marketData),\n        volume: marketData.volume || 0,\n        spread: this.calculateSpread(marketData),\n        momentum: this.calculateMomentum(marketData),\n      },\n    };\n\n    // Update session\n    session.trades.push(trade);\n    session.totalTrades++;\n\n    // Update portfolio\n    this.updatePortfolio(session, trade, marketData);\n\n    // Calculate updated performance\n    session.performance = this.calculateSessionPerformance(session);\n\n    return trade;\n  }\n\n  /**\n   * Calculate confidence score for a mock trading session\n   */\n  public calculateConfidenceScore(\n    session: MockTradingSession\n  ): ConfidenceMetrics {\n    const trades = session.trades;\n    const performance = session.performance;\n    const timeInMockMode =\n      (Date.now() - session.startTime) / (1000 * 60 * 60 * 24); // days\n\n    // Define scoring weights and targets\n    const weights = {\n      winRate: 0.15,\n      profitFactor: 0.2,\n      sharpeRatio: 0.18,\n      maxDrawdown: 0.15,\n      consistency: 0.12,\n      riskAdjustedReturn: 0.1,\n      executionLatency: 0.05,\n      slippageControl: 0.05,\n    };\n\n    // Calculate component scores (0-100)\n    const components = {\n      winRate: this.scoreWinRate(performance.winRate, 0.6), // Target 60%+\n      profitFactor: this.scoreProfitFactor(performance.profitFactor, 1.5), // Target 1.5+\n      sharpeRatio: this.scoreSharpeRatio(performance.sharpeRatio, 1.0), // Target 1.0+\n      maxDrawdown: this.scoreMaxDrawdown(performance.maxDrawdown, 0.2), // Target <20%\n      consistency: this.scoreConsistency(trades),\n      riskAdjustedReturn: this.scoreRiskAdjustedReturn(\n        performance.riskAdjustedReturn,\n        0.15\n      ), // Target 15%+\n      executionLatency: this.scoreExecutionLatency(trades),\n      slippageControl: this.scoreSlippageControl(trades),\n    };\n\n    // Calculate weighted overall score\n    const overallScore = Object.entries(components).reduce(\n      (sum, [key, component]) => {\n        return sum + component.score * weights[key as keyof typeof weights];\n      },\n      0\n    );\n\n    // Calculate category scores\n    const profitability =\n      components.winRate.score * 0.4 + components.profitFactor.score * 0.6;\n    const consistency = components.consistency.score;\n    const riskManagement =\n      components.maxDrawdown.score * 0.6 +\n      components.riskAdjustedReturn.score * 0.4;\n    const executionQuality =\n      components.executionLatency.score * 0.5 +\n      components.slippageControl.score * 0.5;\n    const marketAdaptability = this.calculateMarketAdaptability(trades);\n    const timeStability = this.calculateTimeStability(session);\n\n    // Readiness checklist\n    const requiredConfidence = 75; // Minimum 75% confidence for live trading\n    const minimumTimeRequired = 7; // Minimum 7 days of mock trading\n\n    const readinessChecklist = {\n      profitabilityTest: profitability >= 70,\n      riskManagementTest: riskManagement >= 70,\n      consistencyTest: consistency >= 60,\n      executionTest: executionQuality >= 75,\n      timeTest: timeInMockMode >= minimumTimeRequired,\n      drawdownTest: performance.maxDrawdown <= 0.25, // Max 25% drawdown\n    };\n\n    // Determine recommendation\n    let recommendation: ConfidenceMetrics[\"recommendation\"] =\n      \"INSUFFICIENT_DATA\";\n\n    if (trades.length < 10) {\n      recommendation = \"INSUFFICIENT_DATA\";\n    } else if (\n      overallScore >= requiredConfidence &&\n      Object.values(readinessChecklist).every(Boolean)\n    ) {\n      recommendation = \"READY_FOR_LIVE\";\n    } else if (overallScore >= 50 && riskManagement >= 60) {\n      recommendation = \"NEEDS_IMPROVEMENT\";\n    } else {\n      recommendation = \"HIGH_RISK\";\n    }\n\n    return {\n      overall: Math.round(overallScore),\n      profitability: Math.round(profitability),\n      consistency: Math.round(consistency),\n      riskManagement: Math.round(riskManagement),\n      executionQuality: Math.round(executionQuality),\n      marketAdaptability: Math.round(marketAdaptability),\n      timeStability: Math.round(timeStability),\n      components,\n      recommendation,\n      requiredConfidence,\n      timeInMockMode,\n      minimumTimeRequired,\n      readinessChecklist,\n    };\n  }\n\n  // Private helper methods\n\n  private createInitialPortfolio(balance: number): MockPortfolio {\n    return {\n      balance,\n      equity: balance,\n      availableBalance: balance,\n      positions: [],\n      totalUnrealizedPnL: 0,\n      marginUsed: 0,\n      marginLevel: 0,\n      dayPnL: 0,\n      totalPnL: 0,\n    };\n  }\n\n  private createInitialPerformance(): MockSessionPerformance {\n    return {\n      winRate: 0,\n      profitFactor: 0,\n      sharpeRatio: 0,\n      maxDrawdown: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      totalReturn: 0,\n      volatility: 0,\n      confidenceScore: 0,\n      riskAdjustedReturn: 0,\n      consistencyScore: 0,\n      stabilityIndex: 0,\n    };\n  }\n\n  private async startMarketDataMonitoring(\n    sessionId: string,\n    strategy: Strategy\n  ): Promise<void> {\n    const symbol = strategy.parameters.pair;\n\n    // Subscribe to live market data updates\n    const callback = (data: MarketData) => {\n      this.processMarketDataUpdate(sessionId, strategy, data);\n    };\n\n    this.priceSubscriptions.set(`${sessionId}_${symbol}`, callback);\n\n    // Start receiving live data (would integrate with WebSocket service)\n    // For now, simulate with periodic API calls\n    this.startMarketDataSimulation(sessionId, strategy);\n  }\n\n  private async startMarketDataSimulation(\n    sessionId: string,\n    strategy: Strategy\n  ): Promise<void> {\n    const symbol = strategy.parameters.pair;\n\n    const updateInterval = setInterval(async () => {\n      const session = this.activeSessions.get(sessionId);\n      if (!session || !session.isActive) {\n        clearInterval(updateInterval);\n        return;\n      }\n\n      try {\n        // Get latest market data\n        const marketDataArray = await poloniexApi.getMarketData(symbol);\n\n        if (marketDataArray && marketDataArray.length > 0) {\n          // Convert the market data format and use the latest candle\n          const latestCandle = marketDataArray[marketDataArray.length - 1];\n          const latestData = {\n            pair: symbol,\n            timestamp: Date.now(),\n            open: parseFloat(latestCandle[1]),\n            high: parseFloat(latestCandle[2]),\n            low: parseFloat(latestCandle[3]),\n            close: parseFloat(latestCandle[4]),\n            volume: parseFloat(latestCandle[5]),\n          };\n\n          this.processMarketDataUpdate(sessionId, strategy, latestData);\n        }\n      } catch {\n        // Continue trying\n      }\n    }, 5000); // Update every 5 seconds\n  }\n\n  private async processMarketDataUpdate(\n    sessionId: string,\n    strategy: Strategy,\n    marketData: MarketData\n  ): Promise<void> {\n    const session = this.activeSessions.get(sessionId);\n    if (!session || !session.isActive) return;\n\n    // Update market data cache\n    const symbol = strategy.parameters.pair;\n    const cache = this.marketDataCache.get(symbol) || [];\n    cache.push(marketData);\n\n    // Keep last 200 data points\n    if (cache.length > 200) {\n      cache.shift();\n    }\n\n    this.marketDataCache.set(symbol, cache);\n\n    // Generate trading signal\n    const signal = executeStrategy(strategy, cache);\n\n    // Execute trade if signal is generated\n    if (signal.signal) {\n      await this.executeMockTrade(sessionId, signal, marketData);\n    }\n\n    // Update portfolio with current prices\n    this.updatePortfolioWithCurrentPrices(session, marketData);\n  }\n\n  private calculatePositionSize(session: MockTradingSession): number {\n    // Use 2% risk per trade\n    const riskPercent = 0.02;\n    return (session.portfolio.availableBalance * riskPercent) / 100;\n  }\n\n  private simulateExecutionLatency(): number {\n    // Simulate realistic execution latency (50-200ms)\n    return Math.random() * 150 + 50;\n  }\n\n  private simulateSlippage(marketData: MarketData, amount: number): number {\n    // Simulate slippage based on market conditions and order size\n    const baseSlippage = 0.001; // 0.1%\n    const volumeImpact = Math.min(\n      0.005,\n      (amount / (marketData.volume || 1000000)) * 0.1\n    );\n    const volatilityImpact =\n      ((marketData.high - marketData.low) / marketData.close) * 0.01;\n\n    return baseSlippage + volumeImpact + volatilityImpact;\n  }\n\n  private calculateExecutionPrice(\n    price: number,\n    side: \"BUY\" | \"SELL\",\n    slippage: number\n  ): number {\n    return side === \"BUY\" ? price * (1 + slippage) : price * (1 - slippage);\n  }\n\n  private calculateVolatility(marketData: MarketData): number {\n    return (marketData.high - marketData.low) / marketData.close;\n  }\n\n  private calculateSpread(marketData: MarketData): number {\n    // Estimate spread from high-low range\n    return ((marketData.high - marketData.low) / marketData.close) * 0.1;\n  }\n\n  private calculateMomentum(marketData: MarketData): number {\n    return (marketData.close - marketData.open) / marketData.open;\n  }\n\n  private updatePortfolio(\n    session: MockTradingSession,\n    trade: MockTrade,\n    marketData: MarketData\n  ): void {\n    // Update balance\n    session.currentBalance = trade.balance;\n    session.portfolio.balance = trade.balance;\n\n    // Update trade counts\n    if (trade.pnl > 0) {\n      session.winningTrades++;\n    } else if (trade.pnl < 0) {\n      session.losingTrades++;\n    }\n\n    // Update total PnL\n    session.portfolio.totalPnL += trade.pnl;\n  }\n\n  private updatePortfolioWithCurrentPrices(\n    session: MockTradingSession,\n    marketData: MarketData\n  ): void {\n    // Update portfolio equity with current market prices\n    session.portfolio.equity =\n      session.portfolio.balance + session.portfolio.totalUnrealizedPnL;\n  }\n\n  private closeAllPositions(sessionId: string): void {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) return;\n\n    // Close all open positions (simplified for mock trading)\n    session.portfolio.positions = [];\n    session.portfolio.totalUnrealizedPnL = 0;\n    session.portfolio.marginUsed = 0;\n  }\n\n  private calculateSessionPerformance(\n    session: MockTradingSession\n  ): MockSessionPerformance {\n    const trades = session.trades;\n\n    if (trades.length === 0) {\n      return this.createInitialPerformance();\n    }\n\n    const winningTrades = trades.filter((t) => t.pnl > 0);\n    const losingTrades = trades.filter((t) => t.pnl < 0);\n\n    const winRate = winningTrades.length / trades.length;\n    const grossProfit = winningTrades.reduce((sum, t) => sum + t.pnl, 0);\n    const grossLoss = Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0));\n    const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : 0;\n\n    const averageWin =\n      winningTrades.length > 0 ? grossProfit / winningTrades.length : 0;\n    const averageLoss =\n      losingTrades.length > 0 ? grossLoss / losingTrades.length : 0;\n\n    const totalReturn =\n      (session.currentBalance - session.initialBalance) /\n      session.initialBalance;\n    const returns = trades.map((t) => t.pnlPercent / 100);\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const volatility = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) /\n        returns.length\n    );\n\n    const sharpeRatio = volatility > 0 ? avgReturn / volatility : 0;\n    const maxDrawdown = this.calculateMaxDrawdown(trades);\n    const riskAdjustedReturn = volatility > 0 ? totalReturn / volatility : 0;\n    const consistencyScore = this.calculateConsistencyScore(trades);\n    const stabilityIndex = this.calculateStabilityIndex(session);\n\n    return {\n      winRate,\n      profitFactor,\n      sharpeRatio,\n      maxDrawdown,\n      averageWin,\n      averageLoss,\n      totalReturn,\n      volatility,\n      confidenceScore: 0, // Will be calculated separately\n      riskAdjustedReturn,\n      consistencyScore,\n      stabilityIndex,\n    };\n  }\n\n  // Scoring methods for confidence calculation\n  private scoreWinRate(\n    value: number,\n    target: number\n  ): { score: number; weight: number; value: number } {\n    const score = Math.min(100, (value / target) * 100);\n    return { score, weight: 0.15, value };\n  }\n\n  private scoreProfitFactor(\n    value: number,\n    target: number\n  ): { score: number; weight: number; value: number } {\n    const score = Math.min(100, (value / target) * 100);\n    return { score, weight: 0.2, value };\n  }\n\n  private scoreSharpeRatio(\n    value: number,\n    target: number\n  ): { score: number; weight: number; value: number } {\n    const score = Math.min(100, Math.max(0, (value / target) * 100));\n    return { score, weight: 0.18, value };\n  }\n\n  private scoreMaxDrawdown(\n    value: number,\n    target: number\n  ): { score: number; weight: number; value: number } {\n    const score = Math.min(100, Math.max(0, (1 - value / target) * 100));\n    return { score, weight: 0.15, value };\n  }\n\n  private scoreConsistency(trades: MockTrade[]): {\n    score: number;\n    weight: number;\n    value: number;\n  } {\n    const consistency = this.calculateConsistencyScore(trades);\n    return { score: consistency * 100, weight: 0.12, value: consistency };\n  }\n\n  private scoreRiskAdjustedReturn(\n    value: number,\n    target: number\n  ): { score: number; weight: number; value: number } {\n    const score = Math.min(100, (value / target) * 100);\n    return { score, weight: 0.1, value };\n  }\n\n  private scoreExecutionLatency(trades: MockTrade[]): {\n    score: number;\n    weight: number;\n    value: number;\n  } {\n    const avgLatency =\n      trades.reduce((sum, t) => sum + t.latency, 0) / trades.length;\n    const score = Math.min(100, Math.max(0, ((200 - avgLatency) / 200) * 100)); // Target <200ms\n    return { score, weight: 0.05, value: avgLatency };\n  }\n\n  private scoreSlippageControl(trades: MockTrade[]): {\n    score: number;\n    weight: number;\n    value: number;\n  } {\n    const avgSlippage =\n      trades.reduce((sum, t) => sum + t.slippage, 0) / trades.length;\n    const score = Math.min(\n      100,\n      Math.max(0, ((0.005 - avgSlippage) / 0.005) * 100)\n    ); // Target <0.5%\n    return { score, weight: 0.05, value: avgSlippage };\n  }\n\n  private calculateMaxDrawdown(trades: MockTrade[]): number {\n    let peak = -Infinity;\n    let maxDrawdown = 0;\n\n    trades.forEach((trade) => {\n      if (trade.balance > peak) {\n        peak = trade.balance;\n      }\n      const drawdown = (peak - trade.balance) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    });\n\n    return maxDrawdown;\n  }\n\n  private calculateConsistencyScore(trades: MockTrade[]): number {\n    if (trades.length < 10) return 0;\n\n    // Calculate rolling win rate consistency\n    const windowSize = Math.max(5, Math.floor(trades.length / 4));\n    const rollingWinRates: number[] = [];\n\n    for (let i = windowSize; i <= trades.length; i++) {\n      const window = trades.slice(i - windowSize, i);\n      const winRate = window.filter((t) => t.pnl > 0).length / window.length;\n      rollingWinRates.push(winRate);\n    }\n\n    // Calculate standard deviation of rolling win rates\n    const avgWinRate =\n      rollingWinRates.reduce((sum, wr) => sum + wr, 0) / rollingWinRates.length;\n    const variance =\n      rollingWinRates.reduce(\n        (sum, wr) => sum + Math.pow(wr - avgWinRate, 2),\n        0\n      ) / rollingWinRates.length;\n    const stdDev = Math.sqrt(variance);\n\n    // Lower standard deviation = higher consistency\n    return Math.max(0, 1 - stdDev * 2);\n  }\n\n  private calculateMarketAdaptability(trades: MockTrade[]): number {\n    // Analyze performance across different market conditions\n    if (trades.length < 20) return 0;\n\n    const highVolatilityTrades = trades.filter(\n      (t) => t.marketConditions.volatility > 0.03\n    );\n    const lowVolatilityTrades = trades.filter(\n      (t) => t.marketConditions.volatility <= 0.03\n    );\n\n    const highVolPerformance =\n      highVolatilityTrades.length > 0\n        ? highVolatilityTrades.filter((t) => t.pnl > 0).length /\n          highVolatilityTrades.length\n        : 0;\n\n    const lowVolPerformance =\n      lowVolatilityTrades.length > 0\n        ? lowVolatilityTrades.filter((t) => t.pnl > 0).length /\n          lowVolatilityTrades.length\n        : 0;\n\n    // Good adaptability means consistent performance across market conditions\n    const adaptability = 1 - Math.abs(highVolPerformance - lowVolPerformance);\n    return Math.max(0, adaptability * 100);\n  }\n\n  private calculateTimeStability(session: MockTradingSession): number {\n    const trades = session.trades;\n    if (trades.length < 20) return 0;\n\n    // Analyze performance stability over time\n    const timeChunks = 4;\n    const chunkSize = Math.floor(trades.length / timeChunks);\n    const chunkPerformances: number[] = [];\n\n    for (let i = 0; i < timeChunks; i++) {\n      const start = i * chunkSize;\n      const end = i === timeChunks - 1 ? trades.length : (i + 1) * chunkSize;\n      const chunk = trades.slice(start, end);\n\n      const winRate = chunk.filter((t) => t.pnl > 0).length / chunk.length;\n      chunkPerformances.push(winRate);\n    }\n\n    // Calculate coefficient of variation\n    const avgPerformance =\n      chunkPerformances.reduce((sum, p) => sum + p, 0) /\n      chunkPerformances.length;\n    const variance =\n      chunkPerformances.reduce(\n        (sum, p) => sum + Math.pow(p - avgPerformance, 2),\n        0\n      ) / chunkPerformances.length;\n    const stdDev = Math.sqrt(variance);\n    const coefficientOfVariation =\n      avgPerformance > 0 ? stdDev / avgPerformance : 1;\n\n    return Math.max(0, (1 - coefficientOfVariation) * 100);\n  }\n\n  private calculateStabilityIndex(session: MockTradingSession): number {\n    // Combine various stability metrics\n    const timeStability = this.calculateTimeStability(session);\n    const consistencyScore = this.calculateConsistencyScore(session.trades);\n    const adaptability = this.calculateMarketAdaptability(session.trades);\n\n    return (\n      (timeStability * 0.4 +\n        consistencyScore * 100 * 0.4 +\n        adaptability * 0.2) /\n      100\n    );\n  }\n\n  /**\n   * Get aggregated confidence metrics across all sessions for a strategy\n   */\n  public getStrategyConfidenceAggregate(\n    strategyId: string\n  ): ConfidenceMetrics | null {\n    const sessions = this.getStrategyMockSessions(strategyId);\n    if (sessions.length === 0) return null;\n\n    // Calculate weighted average confidence across all sessions\n    let totalTrades = 0;\n    let totalScore = 0;\n\n    sessions.forEach((session) => {\n      const confidence = this.calculateConfidenceScore(session);\n      const weight = session.trades.length;\n      totalTrades += weight;\n      totalScore += confidence.overall * weight;\n    });\n\n    const avgConfidence = totalTrades > 0 ? totalScore / totalTrades : 0;\n\n    // Use the most recent session's detailed breakdown\n    const latestSession = sessions[sessions.length - 1];\n    const latestConfidence = this.calculateConfidenceScore(latestSession);\n\n    return {\n      ...latestConfidence,\n      overall: Math.round(avgConfidence),\n    };\n  }\n}\n\nexport const mockTradingService = MockTradingService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/openAIService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":19,"suggestions":[{"fix":{"range":[815,890],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":18,"suggestions":[{"fix":{"range":[1186,1240],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"fix":{"range":[1269,1329],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"fix":{"range":[2898,2940],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"fix":{"range":[4189,4231],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userQuery' is defined but never used.","line":214,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":54}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\n\nexport interface TradingInsight {\n  type: 'analysis' | 'recommendation' | 'risk_assessment' | 'market_outlook';\n  title: string;\n  content: string;\n  confidence: number; // 0-100\n  timeframe: string;\n  createdAt: Date;\n}\n\nexport interface TradingData {\n  symbol: string;\n  price: number;\n  change24h: number;\n  volume: number;\n  marketCap?: number;\n  technicalIndicators?: {\n    rsi?: number;\n    macd?: number;\n    bollingerBands?: {\n      upper: number;\n      middle: number;\n      lower: number;\n    };\n  };\n}\n\nclass OpenAITradingService {\n  private client: OpenAI | null = null;\n  private isConfigured = false;\n\n  constructor() {\n    this.initializeClient();\n  }\n\n  private initializeClient() {\n    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;\n    \n    if (!apiKey) {\n      console.warn('OpenAI API key not found. LLM features will use mock data.');\n      return;\n    }\n\n    try {\n      this.client = new OpenAI({\n        apiKey,\n        // Note: In a production environment, API calls should go through your backend\n        // This is for demo purposes only\n        dangerouslyAllowBrowser: true\n      });\n      this.isConfigured = true;\n      console.log('OpenAI client initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize OpenAI client:', error);\n    }\n  }\n\n  async generateTradingInsight(\n    tradingData: TradingData,\n    userQuery?: string\n  ): Promise<TradingInsight> {\n    if (!this.isConfigured || !this.client) {\n      return this.getMockInsight(tradingData, userQuery);\n    }\n\n    try {\n      const prompt = this.buildTradingPrompt(tradingData, userQuery);\n      \n      const completion = await this.client.chat.completions.create({\n        model: \"gpt-4.1-nano\", // Using the new GPT-4.1 model as specified\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert cryptocurrency trading analyst. Provide concise, actionable trading insights based on market data. Always include:\n            1. Clear analysis of current market conditions\n            2. Specific recommendations with risk levels\n            3. Timeframe for the analysis\n            4. Confidence level (0-100)\n            \n            Keep responses under 200 words and focus on actionable insights.`\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 300,\n        temperature: 0.7,\n        top_p: 1,\n      });\n\n      const content = completion.choices[0]?.message?.content || '';\n      \n      return {\n        type: this.determineInsightType(content, userQuery),\n        title: this.extractTitle(content, tradingData.symbol),\n        content: content,\n        confidence: this.extractConfidence(content),\n        timeframe: this.extractTimeframe(content),\n        createdAt: new Date()\n      };\n\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n      return this.getMockInsight(tradingData, userQuery);\n    }\n  }\n\n  async generateMarketAnalysis(symbols: string[]): Promise<TradingInsight> {\n    if (!this.isConfigured || !this.client) {\n      return this.getMockMarketAnalysis(symbols);\n    }\n\n    try {\n      const prompt = `Analyze the current cryptocurrency market focusing on ${symbols.join(', ')}. \n      Provide a brief market outlook, key trends, and overall sentiment. Include any significant market-moving events or technical patterns.`;\n\n      const completion = await this.client.chat.completions.create({\n        model: \"gpt-4.1-nano\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a cryptocurrency market analyst. Provide concise market analysis with key insights and trends.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 250,\n        temperature: 0.6,\n      });\n\n      const content = completion.choices[0]?.message?.content || '';\n\n      return {\n        type: 'market_outlook',\n        title: 'Market Analysis',\n        content: content,\n        confidence: 75,\n        timeframe: '24h',\n        createdAt: new Date()\n      };\n\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n      return this.getMockMarketAnalysis(symbols);\n    }\n  }\n\n  private buildTradingPrompt(data: TradingData, userQuery?: string): string {\n    let prompt = `Analyze ${data.symbol} trading data:\n    - Current Price: $${data.price.toFixed(2)}\n    - 24h Change: ${data.change24h.toFixed(2)}%\n    - Volume: ${data.volume.toLocaleString()}`;\n\n    if (data.technicalIndicators) {\n      prompt += `\\n- Technical Indicators:`;\n      if (data.technicalIndicators.rsi) {\n        prompt += `\\n  RSI: ${data.technicalIndicators.rsi}`;\n      }\n      if (data.technicalIndicators.macd) {\n        prompt += `\\n  MACD: ${data.technicalIndicators.macd}`;\n      }\n    }\n\n    if (userQuery) {\n      prompt += `\\n\\nSpecific question: ${userQuery}`;\n    }\n\n    prompt += `\\n\\nProvide trading insight including entry/exit points, risk level, and confidence.`;\n\n    return prompt;\n  }\n\n  private determineInsightType(content: string, userQuery?: string): TradingInsight['type'] {\n    if (userQuery?.toLowerCase().includes('risk')) return 'risk_assessment';\n    if (content.toLowerCase().includes('buy') || content.toLowerCase().includes('sell')) return 'recommendation';\n    if (content.toLowerCase().includes('outlook') || content.toLowerCase().includes('trend')) return 'market_outlook';\n    return 'analysis';\n  }\n\n  private extractTitle(content: string, symbol: string): string {\n    // Simple title extraction - in production, this could be more sophisticated\n    if (content.toLowerCase().includes('bullish')) return `${symbol} Bullish Signal`;\n    if (content.toLowerCase().includes('bearish')) return `${symbol} Bearish Signal`;\n    if (content.toLowerCase().includes('neutral')) return `${symbol} Neutral Outlook`;\n    return `${symbol} Analysis`;\n  }\n\n  private extractConfidence(content: string): number {\n    // Look for confidence indicators in the text\n    const confidenceRegex = /confidence[:\\s]+(\\d+)%?/i;\n    const match = content.match(confidenceRegex);\n    if (match) {\n      return parseInt(match[1]);\n    }\n    \n    // Fallback: estimate confidence based on language\n    if (content.toLowerCase().includes('strong') || content.toLowerCase().includes('clear')) return 85;\n    if (content.toLowerCase().includes('likely') || content.toLowerCase().includes('probable')) return 70;\n    if (content.toLowerCase().includes('possible') || content.toLowerCase().includes('might')) return 60;\n    return 75;\n  }\n\n  private extractTimeframe(content: string): string {\n    if (content.toLowerCase().includes('short term') || content.toLowerCase().includes('1-3 days')) return '1-3 days';\n    if (content.toLowerCase().includes('medium term') || content.toLowerCase().includes('1-2 weeks')) return '1-2 weeks';\n    if (content.toLowerCase().includes('long term') || content.toLowerCase().includes('month')) return '1 month+';\n    return '24-48h';\n  }\n\n  private getMockInsight(data: TradingData, userQuery?: string): TradingInsight {\n    const mockInsights = [\n      {\n        type: 'analysis' as const,\n        title: `${data.symbol} Technical Analysis`,\n        content: `Based on current price action at $${data.price.toFixed(2)} with ${data.change24h > 0 ? 'positive' : 'negative'} momentum (${data.change24h.toFixed(2)}%), ${data.symbol} shows ${data.change24h > 5 ? 'strong bullish' : data.change24h < -5 ? 'bearish' : 'neutral'} signals. Volume of ${data.volume.toLocaleString()} indicates ${data.volume > 1000000 ? 'high' : 'moderate'} market interest. Consider ${data.change24h > 0 ? 'taking profits on rallies' : 'accumulating on dips'} with proper risk management.`,\n        confidence: Math.floor(Math.random() * 20) + 70,\n        timeframe: '24-48h',\n        createdAt: new Date()\n      },\n      {\n        type: 'recommendation' as const,\n        title: `${data.symbol} Trading Signal`,\n        content: `${data.change24h > 2 ? 'BUY' : data.change24h < -2 ? 'SELL' : 'HOLD'} signal detected for ${data.symbol}. Current momentum suggests ${data.change24h > 0 ? 'continuation upward' : 'potential reversal'}. Entry point: $${(data.price * (data.change24h > 0 ? 0.98 : 1.02)).toFixed(2)}, Stop loss: $${(data.price * (data.change24h > 0 ? 0.95 : 1.05)).toFixed(2)}, Target: $${(data.price * (data.change24h > 0 ? 1.05 : 0.95)).toFixed(2)}. Risk level: ${Math.abs(data.change24h) > 5 ? 'High' : 'Medium'}.`,\n        confidence: Math.floor(Math.random() * 15) + 75,\n        timeframe: '1-3 days',\n        createdAt: new Date()\n      }\n    ];\n\n    return mockInsights[Math.floor(Math.random() * mockInsights.length)];\n  }\n\n  private getMockMarketAnalysis(symbols: string[]): TradingInsight {\n    return {\n      type: 'market_outlook',\n      title: 'Crypto Market Outlook',\n      content: `Current market sentiment appears ${Math.random() > 0.5 ? 'bullish' : 'cautiously optimistic'} across major cryptocurrencies including ${symbols.slice(0, 3).join(', ')}. Bitcoin continues to show institutional adoption signals while altcoins demonstrate mixed performance. Key resistance levels are being tested across the board. Traders should monitor volume patterns and regulatory developments. Overall market volatility remains elevated, suggesting opportunities for active traders with proper risk management.`,\n      confidence: Math.floor(Math.random() * 10) + 70,\n      timeframe: '1 week',\n      createdAt: new Date()\n    };\n  }\n\n  isReady(): boolean {\n    return this.isConfigured;\n  }\n\n  getConnectionStatus(): 'connected' | 'mock' | 'error' {\n    if (this.isConfigured) return 'connected';\n    return 'mock';\n  }\n}\n\nexport const openAITradingService = new OpenAITradingService();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/poloniexAPI.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_method' is defined but never used.","line":66,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_endpoint' is defined but never used.","line":66,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is defined but never used.","line":66,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":171,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":495,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":495,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAppStore } from \"@/store\";\nimport { FuturesOrder, MarketData, Position } from \"@/types\";\nimport axios from \"axios\";\n\nimport {\n  getApiBaseUrl,\n  IS_WEBCONTAINER,\n  shouldUseMockMode,\n} from \"@/utils/environment\";\n\n// Use our secure backend API instead of direct Poloniex calls\nconst API_BASE_URL = getApiBaseUrl();\n\n// Authentication token for backend API\nconst getAuthToken = (): string | null => {\n  return localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n};\n\n// Create axios instance with authentication\nconst createAuthenticatedAxios = () => {\n  const token = getAuthToken();\n  return axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 30000,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(token && { Authorization: `Bearer ${token}` }),\n    },\n  });\n};\n\n// Custom error classes for better error handling\nexport class PoloniexAPIError extends Error {\n  constructor(\n    message: string,\n    public code?: string,\n    public statusCode?: number\n  ) {\n    super(message);\n    this.name = \"PoloniexAPIError\";\n  }\n}\n\nexport class PoloniexConnectionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PoloniexConnectionError\";\n  }\n}\n\nexport class PoloniexAuthenticationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PoloniexAuthenticationError\";\n  }\n}\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  PUBLIC_REQUESTS_PER_SECOND: 10,\n  PRIVATE_REQUESTS_PER_SECOND: 5,\n  ORDERS_PER_SECOND: 2,\n};\n\n// Create a logger for API calls\nconst logApiCall = (_method: string, _endpoint: string, _data?: unknown) => {\n  // Production logging should be handled by a dedicated service\n};\n\n// Safe error handler\nconst safeErrorHandler = (error: unknown): Error => {\n  if (error instanceof Error) {\n    return new Error(error.message);\n  }\n  return new Error(String(error));\n};\n\n// Create a singleton API client\nclass PoloniexApiClient {\n  private static instance: PoloniexApiClient;\n  private mockMode: boolean = true;\n  private lastBalanceUpdate: number = 0;\n  private cachedBalance: unknown = null;\n  private historicalData: Map<string, MarketData[]> = new Map();\n  private balanceUpdateInterval: number = 10000; // 10 seconds\n  private requestCounter: number = 0;\n  private rateLimitQueue: Map<string, number[]> = new Map();\n  private positionUpdateCallbacks: Set<(positions: Position[]) => void> =\n    new Set();\n  private orderUpdateCallbacks: Set<(orders: FuturesOrder[]) => void> =\n    new Set();\n  private liquidationCallbacks: Set<\n    (warning: { pair: string; message: string }) => void\n  > = new Set();\n  private marginCallbacks: Set<\n    (margin: { pair: string; ratio: number }) => void\n  > = new Set();\n\n  private constructor() {\n    this.loadCredentials();\n  }\n\n  public static getInstance(): PoloniexApiClient {\n    if (!PoloniexApiClient.instance) {\n      PoloniexApiClient.instance = new PoloniexApiClient();\n    }\n    return PoloniexApiClient.instance;\n  }\n\n  public onPositionUpdate(callback: (positions: Position[]) => void): void {\n    this.positionUpdateCallbacks.add(callback);\n  }\n\n  public onOrderUpdate(callback: (orders: FuturesOrder[]) => void): void {\n    this.orderUpdateCallbacks.add(callback);\n  }\n\n  public onLiquidationWarning(\n    callback: (warning: { pair: string; message: string }) => void\n  ): void {\n    this.liquidationCallbacks.add(callback);\n  }\n\n  public onMarginUpdate(\n    callback: (margin: { pair: string; ratio: number }) => void\n  ): void {\n    this.marginCallbacks.add(callback);\n  }\n\n  private async checkRateLimit(\n    type: \"public\" | \"private\" | \"order\"\n  ): Promise<void> {\n    const now = Date.now();\n    const key = `${type}_requests`;\n    const limit =\n      type === \"public\"\n        ? RATE_LIMITS.PUBLIC_REQUESTS_PER_SECOND\n        : type === \"private\"\n        ? RATE_LIMITS.PRIVATE_REQUESTS_PER_SECOND\n        : RATE_LIMITS.ORDERS_PER_SECOND;\n\n    if (!this.rateLimitQueue.has(key)) {\n      this.rateLimitQueue.set(key, []);\n    }\n\n    const queue = this.rateLimitQueue.get(key)!;\n    const oneSecondAgo = now - 1000;\n\n    while (queue.length > 0 && queue[0] < oneSecondAgo) {\n      queue.shift();\n    }\n\n    if (queue.length >= limit) {\n      const oldestRequest = queue[0];\n      const waitTime = 1000 - (now - oldestRequest);\n      await new Promise((resolve) => setTimeout(resolve, waitTime));\n    }\n\n    queue.push(now);\n  }\n\n  public loadCredentials(): void {\n    try {\n      const storeState = useAppStore.getState();\n      const { isLiveTrading } = storeState.apiCredentials;\n\n      this.mockMode = shouldUseMockMode(true) || !isLiveTrading;\n\n      this.cachedBalance = null;\n      this.lastBalanceUpdate = 0;\n    } catch (error) {\n      this.mockMode = shouldUseMockMode(false);\n    }\n  }\n\n  /**\n   * Get account balance via secure backend\n   */\n  public async getAccountBalance() {\n    if (\n      this.cachedBalance &&\n      Date.now() - this.lastBalanceUpdate < this.balanceUpdateInterval\n    ) {\n      return this.cachedBalance;\n    }\n\n    try {\n      if (this.mockMode) {\n        return {\n          totalAmount: \"15478.23\",\n          availableAmount: \"12345.67\",\n          accountEquity: \"15820.45\",\n          unrealizedPnL: \"342.22\",\n          todayPnL: \"156.78\",\n          todayPnLPercentage: \"1.02\",\n        };\n      }\n\n      const api = createAuthenticatedAxios();\n      logApiCall(\"GET\", \"/account/balances\");\n\n      const response = await api.get(\"/account/balances\");\n\n      this.cachedBalance = response.data;\n      this.lastBalanceUpdate = Date.now();\n\n      return this.cachedBalance;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 401) {\n          throw new PoloniexAuthenticationError(\n            \"Authentication failed - please check your API credentials\"\n          );\n        }\n        if (\n          error.response?.status === 400 &&\n          error.response.data?.requiresApiKeys\n        ) {\n          throw new PoloniexAuthenticationError(\n            \"API credentials required - please add your Poloniex API keys\"\n          );\n        }\n        if (error.response?.status) {\n          throw new PoloniexAPIError(\n            `Backend API error: ${error.response.statusText}`,\n            error.response.data?.code || \"API_ERROR\",\n            error.response.status\n          );\n        }\n      }\n\n      throw new PoloniexConnectionError(\n        `Failed to fetch account balance: ${safeErrorHandler(error).message}`\n      );\n    }\n  }\n\n  /**\n   * Get market data via secure backend\n   */\n  public async getMarketData(pair: string) {\n    try {\n      if (this.mockMode) {\n        return this.generateMockMarketData(100);\n      }\n\n      await this.checkRateLimit(\"public\");\n      const api = createAuthenticatedAxios();\n\n      logApiCall(\"GET\", `/klines/${pair}`);\n      const response = await api.get(`/klines/${pair}`, {\n        params: {\n          interval: \"5m\",\n          limit: 100,\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 404) {\n          throw new PoloniexAPIError(\n            `Market data not found for ${pair}`,\n            \"NOT_FOUND\",\n            404\n          );\n        }\n      }\n\n      throw new PoloniexConnectionError(\n        `Failed to fetch market data for ${pair}: ${\n          safeErrorHandler(error).message\n        }`\n      );\n    }\n  }\n\n  private generateMockMarketData(count: number) {\n    return Array.from({ length: count }, (_, i) => {\n      const basePrice = 50000 + Math.random() * 5000;\n      const volatility = basePrice * 0.01;\n      const timestamp = Date.now() - (count - 1 - i) * 60 * 1000;\n      const open = basePrice + (Math.random() - 0.5) * volatility;\n      const high = open + Math.random() * volatility;\n      const low = open - Math.random() * volatility;\n      const close = low + Math.random() * (high - low);\n\n      return [\n        new Date(timestamp).toISOString(),\n        open.toString(),\n        high.toString(),\n        low.toString(),\n        close.toString(),\n        (100 + Math.random() * 900).toString(),\n      ];\n    });\n  }\n\n  /**\n   * Get open positions via secure backend\n   */\n  public async getOpenPositions() {\n    try {\n      if (this.mockMode) {\n        return {\n          positions: [\n            {\n              symbol: \"BTC_USDT_PERP\",\n              posId: \"12345\",\n              pos: \"long\",\n              marginMode: \"cross\",\n              posCost: \"25000\",\n              posSide: \"long\",\n              posSize: \"0.5\",\n              markPrice: \"51000\",\n              unrealizedPnL: \"500\",\n              liquidationPrice: \"45000\",\n            },\n          ],\n        };\n      }\n\n      await this.checkRateLimit(\"private\");\n      const api = createAuthenticatedAxios();\n\n      logApiCall(\"GET\", \"/account/balances\");\n      const response = await api.get(\"/account/balances\");\n\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 401) {\n          throw new PoloniexAuthenticationError(\n            \"Authentication failed for positions\"\n          );\n        }\n      }\n\n      throw new PoloniexConnectionError(\n        `Failed to fetch open positions: ${safeErrorHandler(error).message}`\n      );\n    }\n  }\n\n  /**\n   * Place an order via secure backend\n   */\n  public async placeOrder(\n    pair: string,\n    side: \"buy\" | \"sell\",\n    type: \"limit\" | \"market\",\n    quantity: number,\n    price?: number\n  ) {\n    await this.checkRateLimit(\"order\");\n\n    try {\n      if (this.mockMode) {\n        return {\n          success: true,\n          orderId: \"mock-order-\" + Date.now(),\n          pair,\n          side,\n          type,\n          quantity,\n          price: price || \"market\",\n        };\n      }\n\n      const api = createAuthenticatedAxios();\n      const orderData = {\n        symbol: pair,\n        side: side.toUpperCase(),\n        type: type.toUpperCase(),\n        amount: quantity.toString(),\n        ...(type === \"limit\" && price ? { price: price.toString() } : {}),\n      };\n\n      logApiCall(\"POST\", \"/orders\", orderData);\n      const response = await api.post(\"/orders\", orderData);\n\n      return response.data;\n    } catch (error) {\n      const safeError = safeErrorHandler(error);\n\n      if (IS_WEBCONTAINER) {\n        return {\n          success: true,\n          orderId: \"mock-order-\" + Date.now(),\n          pair,\n          side,\n          type,\n          quantity,\n          price: price || \"market\",\n        };\n      }\n\n      throw safeError;\n    }\n  }\n\n  /**\n   * Get recent trades via secure backend\n   */\n  public async getRecentTrades(pair: string, limit: number = 50) {\n    try {\n      if (this.mockMode) {\n        return this.generateMockTrades(pair, limit);\n      }\n\n      await this.checkRateLimit(\"public\");\n      const api = createAuthenticatedAxios();\n\n      logApiCall(\"GET\", \"/trades\");\n      const response = await api.get(\"/trades\", {\n        params: { symbol: pair, limit },\n      });\n\n      return response.data;\n    } catch (error) {\n      throw new PoloniexConnectionError(\n        `Failed to fetch recent trades for ${pair}: ${\n          safeErrorHandler(error).message\n        }`\n      );\n    }\n  }\n\n  private generateMockTrades(_pair: string, limit: number) {\n    return Array.from({ length: limit }, (_, i) => {\n      const basePrice = 51000 + (Math.random() - 0.5) * 1000;\n      const amount = 0.01 + Math.random() * 0.5;\n      const timestamp = Date.now() - i * 60 * 1000;\n\n      return {\n        id: `mock-trade-${i}-${Date.now()}`,\n        price: basePrice.toString(),\n        quantity: amount.toString(),\n        amount: (basePrice * amount).toString(),\n        takerSide: Math.random() > 0.5 ? \"buy\" : \"sell\",\n        ts: timestamp,\n        createdAt: new Date(timestamp).toISOString(),\n      };\n    });\n  }\n\n  /**\n   * Get historical market data for backtesting via secure backend\n   */\n  public async getHistoricalData(\n    pair: string,\n    startDate: string,\n    endDate: string\n  ): Promise<MarketData[]> {\n    const cacheKey = `${pair}-${startDate}-${endDate}`;\n\n    if (this.historicalData.has(cacheKey)) {\n      return this.historicalData.get(cacheKey)!;\n    }\n\n    try {\n      if (this.mockMode) {\n        const mockData = this.generateMockHistoricalData(\n          pair,\n          startDate,\n          endDate\n        );\n        this.historicalData.set(cacheKey, mockData);\n        return mockData;\n      }\n\n      const api = createAuthenticatedAxios();\n\n      const response = await api.get(`/klines/${pair}`, {\n        params: {\n          interval: \"1h\",\n          startTime: new Date(startDate).getTime(),\n          endTime: new Date(endDate).getTime(),\n          limit: 1000,\n        },\n      });\n\n      const data = response.data.map((candle: unknown[]) => ({\n        pair,\n        timestamp: new Date(candle[0] as string).getTime(),\n        open: parseFloat(candle[1] as string),\n        high: parseFloat(candle[2] as string),\n        low: parseFloat(candle[3] as string),\n        close: parseFloat(candle[4] as string),\n        volume: parseFloat(candle[5] as string),\n      }));\n\n      this.historicalData.set(cacheKey, data);\n      return data;\n    } catch (error) {\n      const mockData = this.generateMockHistoricalData(\n        pair,\n        startDate,\n        endDate\n      );\n      this.historicalData.set(cacheKey, mockData);\n      return mockData;\n    }\n  }\n\n  private generateMockHistoricalData(\n    pair: string,\n    startDate: string,\n    endDate: string\n  ): MarketData[] {\n    const start = new Date(startDate).getTime();\n    const end = new Date(endDate).getTime();\n    const hourMs = 60 * 60 * 1000;\n    const data: MarketData[] = [];\n\n    let basePrice = 50000;\n\n    for (let time = start; time <= end; time += hourMs) {\n      const volatility = basePrice * 0.01;\n      const open = basePrice + (Math.random() - 0.5) * volatility;\n      const high = open + Math.random() * volatility;\n      const low = open - Math.random() * volatility;\n      const close = low + Math.random() * (high - low);\n\n      data.push({\n        pair,\n        timestamp: time,\n        open,\n        high,\n        low,\n        close,\n        volume: 100 + Math.random() * 900,\n      });\n\n      basePrice = close;\n    }\n\n    return data;\n  }\n}\n\n// Export a singleton instance\nexport const poloniexApi = PoloniexApiClient.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/poloniexFuturesAPI.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getEnvVariable' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4502,4505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4502,4505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":20,"suggestions":[{"fix":{"range":[5633,5694],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5842,5845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5842,5845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5880,5883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5880,5883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6884,6887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6884,6887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8160,8163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8160,8163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8191,8194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8191,8194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":322,"column":120,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":123,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8561,8564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8561,8564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8592,8595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8592,8595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":326,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8745,8748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8745,8748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8776,8779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8776,8779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8876,8879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8876,8879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8907,8910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8907,8910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9057,9060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9057,9060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9088,9091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9088,9091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":338,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9200,9203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9200,9203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":339,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9231,9234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9231,9234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":355,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9678,9681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9678,9681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9709,9712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9709,9712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9835,9838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9835,9838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":360,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9866,9869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9866,9869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9969,9972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9969,9972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":364,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10000,10003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10000,10003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":367,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10178,10181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10178,10181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10209,10212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10209,10212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10494,10497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10494,10497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":377,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10525,10528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10525,10528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10722,10725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10722,10725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10753,10756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10753,10756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10889,10892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10889,10892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10920,10923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10920,10923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":388,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11056,11059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11056,11059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11087,11090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11087,11090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11201,11204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11201,11204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11232,11235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11232,11235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getEnvVariable, getApiBaseUrl, getPoloniexApiKey, getPoloniexApiSecret } from '@/utils/environment';\nimport crypto from 'crypto';\n\n// Get configured API base URL\nconst BASE_URL = getApiBaseUrl('futures').replace('/v3', ''); // Remove /v3 since it's added to endpoints\nconst V3_PREFIX = '/v3';\n\n// API endpoints\nconst ENDPOINTS = {\n  // Account endpoints\n  ACCOUNT_BALANCE: `${V3_PREFIX}/account/balance`,\n  ACCOUNT_BILLS: `${V3_PREFIX}/account/bills`,\n  \n  // Position endpoints\n  CURRENT_POSITIONS: `${V3_PREFIX}/trade/position/opens`,\n  POSITION_HISTORY: `${V3_PREFIX}/trade/position/history`,\n  ADJUST_MARGIN: `${V3_PREFIX}/position/margin`,\n  GET_LEVERAGES: `${V3_PREFIX}/account/leverage-info`,\n  SET_LEVERAGE: `${V3_PREFIX}/trade/set-leverage`,\n  SWITCH_POSITION_MODE: `${V3_PREFIX}/position/mode`,\n  VIEW_POSITION_MODE: `${V3_PREFIX}/position/mode-info`,\n  POSITION_RISK_LIMIT: `${V3_PREFIX}/position/risk-limit`,\n  \n  // Trading endpoints\n  PLACE_ORDER: `${V3_PREFIX}/trade/order`,\n  CANCEL_ORDER: `${V3_PREFIX}/trade/cancel-order`,\n  CANCEL_ALL_ORDERS: `${V3_PREFIX}/trade/cancel-all-orders`,\n  ORDER_HISTORY: `${V3_PREFIX}/trade/history-orders`,\n  OPEN_ORDERS: `${V3_PREFIX}/trade/open-orders`,\n  \n  // Market data endpoints\n  MARKET_TICKER: `${V3_PREFIX}/market/ticker`,\n  MARKET_KLINES: `${V3_PREFIX}/market/candles`,\n  MARKET_DEPTH: `${V3_PREFIX}/market/orderbook`,\n  MARKET_TRADES: `${V3_PREFIX}/market/trades`,\n  MARKET_FUNDING_RATE: `${V3_PREFIX}/market/funding-rate`,\n};\n\n// Position modes\nexport enum PositionMode {\n  HEDGE = 'HEDGE',\n  ONE_WAY = 'ONE_WAY'\n}\n\n// Position sides\nexport enum PositionSide {\n  LONG = 'LONG',\n  SHORT = 'SHORT',\n  BOTH = 'BOTH'\n}\n\n// Margin modes\nexport enum MarginMode {\n  ISOLATED = 'ISOLATED',\n  CROSS = 'CROSS'\n}\n\n// Order types\nexport enum OrderType {\n  LIMIT = 'LIMIT',\n  MARKET = 'MARKET',\n  POST_ONLY = 'POST_ONLY',\n  FOK = 'FOK',\n  IOC = 'IOC'\n}\n\n// Order sides\nexport enum OrderSide {\n  BUY = 'BUY',\n  SELL = 'SELL'\n}\n\n// Position status\nexport enum PositionStatus {\n  NORMAL = 'NORMAL',\n  LIQ = 'LIQ',\n  ADL = 'ADL'\n}\n\n// Interface for futures position\nexport interface FuturesPosition {\n  symbol: string;\n  side: OrderSide;\n  mgnMode: MarginMode;\n  posSide: PositionSide;\n  openAvgPx: string;\n  qty: string;\n  availQty: string;\n  lever: string;\n  adl: string;\n  liqPx: string;\n  im: string;\n  mm: string;\n  mgn: string;\n  maxWAmt: string;\n  upl: string;\n  uplRatio: string;\n  pnl: string;\n  markPx: string;\n  mgnRatio: string;\n  state: PositionStatus;\n}\n\n// Interface for futures account balance\nexport interface FuturesAccountBalance {\n  state: string;\n  eq: string;\n  isoEq: string;\n  im: string;\n  mm: string;\n}\n\n// Interface for futures order\nexport interface FuturesOrder {\n  id: string;\n  symbol: string;\n  side: OrderSide;\n  type: OrderType;\n  price: string;\n  size: string;\n  value: string;\n  leverage: string;\n  marginMode: MarginMode;\n  positionSide: PositionSide;\n  state: string;\n  createTime: number;\n  updateTime: number;\n  filledSize: string;\n  filledValue: string;\n  avgPrice: string;\n  fee: string;\n  clientOrderId?: string;\n}\n\n// Generate HMAC-SHA256 signature for API authentication\nconst generateSignature = (timestamp: string, method: string, requestPath: string, body: string = '') => {\n  const apiSecret = getPoloniexApiSecret();\n  \n  if (!apiSecret) {\n    throw new Error('VITE_POLONIEX_API_SECRET is not defined in environment variables');\n  }\n  \n  const message = timestamp + method + requestPath + body;\n  return crypto.createHmac('sha256', apiSecret).update(message).digest('base64');\n};\n\n// Create headers for authenticated requests\nconst createAuthHeaders = (method: string, endpoint: string, body: string = '') => {\n  const apiKey = getPoloniexApiKey();\n  \n  if (!apiKey) {\n    throw new Error('VITE_POLONIEX_API_KEY is not defined in environment variables');\n  }\n  \n  const timestamp = Date.now().toString();\n  const signature = generateSignature(timestamp, method, endpoint, body);\n  \n  return {\n    'Content-Type': 'application/json',\n    'PF-API-KEY': apiKey,\n    'PF-API-SIGN': signature,\n    'PF-API-TIMESTAMP': timestamp\n  };\n};\n\n// Poloniex Futures API client\nclass PoloniexFuturesAPI {\n  private baseUrl: string;\n  private mockMode: boolean;\n  \n  constructor(mockMode: boolean = false) {\n    this.baseUrl = BASE_URL;\n    this.mockMode = mockMode;\n  }\n  \n  // Helper method for making API requests\n  private async request<T>(\n    method: string,\n    endpoint: string,\n    params: Record<string, any> = {},\n    authenticated: boolean = true\n  ): Promise<T> {\n    if (this.mockMode) {\n      return this.mockResponse<T>(endpoint, params);\n    }\n    \n    const url = new URL(this.baseUrl + endpoint);\n    let body = '';\n    \n    if (method === 'GET' && Object.keys(params).length > 0) {\n      Object.keys(params).forEach(key => {\n        if (params[key] !== undefined) {\n          url.searchParams.append(key, params[key]);\n        }\n      });\n    } else if (method !== 'GET' && Object.keys(params).length > 0) {\n      body = JSON.stringify(params);\n    }\n    \n    const headers: Record<string, string> = authenticated \n      ? createAuthHeaders(method, endpoint, body)\n      : { 'Content-Type': 'application/json' };\n    \n    try {\n      const response = await fetch(url.toString(), {\n        method,\n        headers,\n        body: method !== 'GET' ? body : undefined\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Poloniex Futures API error: ${JSON.stringify(errorData)}`);\n      }\n      \n      return await response.json() as T;\n    } catch (error) {\n      console.error('Poloniex Futures API request failed:', error);\n      throw error;\n    }\n  }\n  \n  // Mock responses for development and testing\n  private mockResponse<T>(endpoint: string, params: Record<string, any>): Promise<T> {\n    let mockData: any;\n    \n    switch (endpoint) {\n      case ENDPOINTS.ACCOUNT_BALANCE:\n        mockData = {\n          state: 'NORMAL',\n          eq: '10000.00',\n          isoEq: '5000.00',\n          im: '1000.00',\n          mm: '500.00'\n        };\n        break;\n        \n      case ENDPOINTS.CURRENT_POSITIONS:\n        mockData = [\n          {\n            symbol: 'BTC-USDT',\n            side: 'BUY',\n            mgnMode: 'ISOLATED',\n            posSide: 'LONG',\n            openAvgPx: '50000.00',\n            qty: '0.1',\n            availQty: '0.1',\n            lever: '10',\n            adl: '1',\n            liqPx: '45000.00',\n            im: '500.00',\n            mm: '250.00',\n            mgn: '500.00',\n            maxWAmt: '4500.00',\n            upl: '100.00',\n            uplRatio: '0.02',\n            pnl: '100.00',\n            markPx: '51000.00',\n            mgnRatio: '0.05',\n            state: 'NORMAL'\n          }\n        ];\n        \n        if (params.symbol) {\n          mockData = mockData.filter((pos: any) => pos.symbol === params.symbol);\n        }\n        break;\n        \n      case ENDPOINTS.VIEW_POSITION_MODE:\n        mockData = {\n          posMode: 'ONE_WAY'\n        };\n        break;\n        \n      case ENDPOINTS.GET_LEVERAGES:\n        mockData = {\n          symbol: params.symbol || 'BTC-USDT',\n          leverage: '10',\n          maxLeverage: '75'\n        };\n        break;\n        \n      case ENDPOINTS.OPEN_ORDERS:\n        mockData = [];\n        break;\n        \n      case ENDPOINTS.MARKET_TICKER:\n        mockData = {\n          symbol: params.symbol || 'BTC-USDT',\n          last: '50000.00',\n          bestAsk: '50010.00',\n          bestBid: '49990.00',\n          high24h: '51000.00',\n          low24h: '49000.00',\n          volume24h: '1000.00',\n          fundingRate: '0.0001',\n          nextFundingTime: Date.now() + 8 * 60 * 60 * 1000\n        };\n        break;\n        \n      default:\n        mockData = {};\n    }\n    \n    return Promise.resolve(mockData as T);\n  }\n  \n  // Account endpoints\n  async getAccountBalance(): Promise<FuturesAccountBalance> {\n    return this.request<FuturesAccountBalance>('GET', ENDPOINTS.ACCOUNT_BALANCE);\n  }\n  \n  async getAccountBills(params: { symbol?: string; startTime?: number; endTime?: number; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.ACCOUNT_BILLS, params);\n  }\n  \n  // Position endpoints\n  async getCurrentPositions(symbol?: string): Promise<FuturesPosition[]> {\n    return this.request<FuturesPosition[]>('GET', ENDPOINTS.CURRENT_POSITIONS, { symbol });\n  }\n  \n  async getPositionHistory(params: { symbol?: string; startTime?: number; endTime?: number; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.POSITION_HISTORY, params);\n  }\n  \n  async adjustMargin(params: { symbol: string; posSide: PositionSide; amount: string }): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.ADJUST_MARGIN, params);\n  }\n  \n  async getLeverages(symbol: string): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.GET_LEVERAGES, { symbol });\n  }\n  \n  async setLeverage(params: { symbol: string; lever: string; mgnMode: MarginMode }): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.SET_LEVERAGE, params);\n  }\n  \n  async switchPositionMode(posMode: PositionMode): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.SWITCH_POSITION_MODE, { posMode });\n  }\n  \n  async getPositionMode(): Promise<{ posMode: PositionMode }> {\n    return this.request<{ posMode: PositionMode }>('GET', ENDPOINTS.VIEW_POSITION_MODE);\n  }\n  \n  // Trading endpoints\n  async placeOrder(params: {\n    symbol: string;\n    side: OrderSide;\n    type: OrderType;\n    price?: string;\n    size: string;\n    posSide: PositionSide;\n    clientOrderId?: string;\n  }): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.PLACE_ORDER, params);\n  }\n  \n  async cancelOrder(params: { symbol: string; orderId: string }): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.CANCEL_ORDER, params);\n  }\n  \n  async cancelAllOrders(symbol?: string): Promise<any> {\n    return this.request<any>('POST', ENDPOINTS.CANCEL_ALL_ORDERS, { symbol });\n  }\n  \n  async getOrderHistory(params: { symbol?: string; startTime?: number; endTime?: number; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.ORDER_HISTORY, params);\n  }\n  \n  async getOpenOrders(symbol?: string): Promise<FuturesOrder[]> {\n    return this.request<FuturesOrder[]>('GET', ENDPOINTS.OPEN_ORDERS, { symbol });\n  }\n  \n  // Market data endpoints\n  async getMarketTicker(symbol: string): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.MARKET_TICKER, { symbol }, false);\n  }\n  \n  async getMarketKlines(params: { symbol: string; interval: string; startTime?: number; endTime?: number; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.MARKET_KLINES, params, false);\n  }\n  \n  async getMarketDepth(params: { symbol: string; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.MARKET_DEPTH, params, false);\n  }\n  \n  async getMarketTrades(params: { symbol: string; limit?: number }): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.MARKET_TRADES, params, false);\n  }\n  \n  async getMarketFundingRate(symbol: string): Promise<any> {\n    return this.request<any>('GET', ENDPOINTS.MARKET_FUNDING_RATE, { symbol }, false);\n  }\n}\n\nexport default PoloniexFuturesAPI;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/websocket/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/services/websocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HEALTH_CHECK_CONFIG' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2201,2204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2201,2204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2971,2974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2971,2974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3773,3776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3773,3776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4062,4065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4062,4065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":16,"suggestions":[{"fix":{"range":[5664,5826],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":20,"suggestions":[{"fix":{"range":[6094,6146],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8001,8004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8001,8004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":22,"suggestions":[{"fix":{"range":[8193,8225],"text":""},"messageId":"removeMethodCall","desc":"Remove the console method call."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"fix":{"range":[9034,9101],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":16,"suggestions":[{"fix":{"range":[9347,9419],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":20,"suggestions":[{"fix":{"range":[13610,13677],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":22,"suggestions":[{"fix":{"range":[13795,13853],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":26,"suggestions":[{"fix":{"range":[14648,14714],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":24,"suggestions":[{"fix":{"range":[14804,14854],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":22,"suggestions":[{"fix":{"range":[14995,15047],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":469,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":469,"endColumn":22,"suggestions":[{"fix":{"range":[15143,15215],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":478,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15352,15355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15352,15355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":484,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15605,15608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15605,15608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":501,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16326,16329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16326,16329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":515,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":515,"endColumn":20,"suggestions":[{"fix":{"range":[16822,16879],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":535,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":535,"endColumn":16,"suggestions":[{"fix":{"range":[17375,17429],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":560,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":560,"endColumn":18,"suggestions":[{"fix":{"range":[18067,18146],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":571,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":571,"endColumn":16,"suggestions":[{"fix":{"range":[18478,18568],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":576,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":576,"endColumn":22,"suggestions":[{"fix":{"range":[18682,18730],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":580,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":580,"endColumn":22,"suggestions":[{"fix":{"range":[18830,18874],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":661,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":661,"endColumn":23,"suggestions":[{"fix":{"range":[21627,21705],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":667,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":667,"endColumn":27,"suggestions":[{"fix":{"range":[21853,21934],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":673,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":673,"endColumn":23,"suggestions":[{"fix":{"range":[22103,22171],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":679,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":679,"endColumn":27,"suggestions":[{"fix":{"range":[22323,22393],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":697,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":697,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reject' is defined but never used.","line":698,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":698,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":701,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":701,"endColumn":23,"suggestions":[{"fix":{"range":[23087,23155],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":788,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":788,"endColumn":18,"suggestions":[{"fix":{"range":[26641,26689],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":850,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":850,"endColumn":20,"suggestions":[{"fix":{"range":[28895,28988],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":861,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":861,"endColumn":16,"suggestions":[{"fix":{"range":[29212,29280],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":885,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":885,"endColumn":16,"suggestions":[{"fix":{"range":[30023,30094],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":936,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":936,"endColumn":18,"suggestions":[{"fix":{"range":[31652,31754],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":951,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":951,"endColumn":18,"suggestions":[{"fix":{"range":[32197,32271],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":965,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":965,"endColumn":16,"suggestions":[{"fix":{"range":[32656,32761],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":973,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":973,"endColumn":24,"suggestions":[{"fix":{"range":[33009,33049],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":976,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":976,"endColumn":24,"suggestions":[{"fix":{"range":[33138,33178],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":983,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":983,"endColumn":22,"suggestions":[{"fix":{"range":[33369,33420],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1014,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1014,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34193,34196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34193,34196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1019,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1019,"endColumn":20,"suggestions":[{"fix":{"range":[34393,34444],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1031,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1031,"endColumn":18,"suggestions":[{"fix":{"range":[34677,34746],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1082,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1082,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36221,36224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36221,36224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1084,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1084,"endColumn":18,"suggestions":[{"fix":{"range":[36271,36338],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1114,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1114,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37121,37124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37121,37124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1125,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1125,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37396,37399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37396,37399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1134,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1134,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37641,37644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37641,37644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1146,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1146,"endColumn":22,"suggestions":[{"fix":{"range":[38038,38145],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1182,"endColumn":18,"suggestions":[{"fix":{"range":[39022,39092],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1189,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1189,"endColumn":18,"suggestions":[{"fix":{"range":[39334,39410],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useState\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":1255,"column":31,"nodeType":"MemberExpression","endLine":1255,"endColumn":45},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useEffect\" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function.","line":1257,"column":5,"nodeType":"MemberExpression","endLine":1257,"endColumn":20}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { MarketData, Trade } from '@/types';\nimport { useErrorHandler } from '@/hooks/useErrorHandler';\nimport { getBackendUrl, getPoloniexApiKey, getPoloniexApiSecret, shouldUseMockMode, getPoloniexWebSocketUrl } from '@/utils/environment';\nimport { WEBSOCKET_CONFIG, HEALTH_CHECK_CONFIG } from './websocket/config';\n\n// Socket.io events for internal backend\nconst SOCKET_IO_EVENTS = {\n  CONNECT: 'connect',\n  DISCONNECT: 'disconnect',\n  RECONNECT: 'reconnect',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RECONNECT_ERROR: 'reconnect_error',\n  RECONNECT_FAILED: 'reconnect_failed',\n  CONNECT_ERROR: 'connect_error',\n  CONNECT_TIMEOUT: 'connect_timeout',\n  MARKET_DATA: 'marketData',\n  TRADE_EXECUTED: 'tradeExecuted',\n  CHAT_MESSAGE: 'chatMessage',\n  ERROR: 'error',\n  SUBSCRIBE_MARKET: 'subscribeMarket',\n  UNSUBSCRIBE_MARKET: 'unsubscribeMarket',\n  PING: 'ping',\n  PONG: 'pong'\n};\n\n// Poloniex V3 futures WebSocket configuration\nconst POLONIEX_WS_CONFIG = {\n  url: getPoloniexWebSocketUrl('private'), // V3 futures private stream\n  publicUrl: getPoloniexWebSocketUrl('public'), // V3 futures public stream\n  reconnectInterval: 5000,\n  maxReconnectAttempts: 10,\n  pingInterval: 30000\n};\n\n// Connection states\nexport enum ConnectionState {\n  DISCONNECTED = 'disconnected',\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  RECONNECTING = 'reconnecting',\n  FAILED = 'failed'\n}\n\n// Reconnection strategies\nenum ReconnectionStrategy {\n  EXPONENTIAL_BACKOFF = 'exponential_backoff',\n  LINEAR_BACKOFF = 'linear_backoff',\n  IMMEDIATE = 'immediate',\n  NONE = 'none'\n}\n\ninterface ChatMessage {\n  userId: string;\n  username: string;\n  message: string;\n  timestamp: number;\n}\n\ninterface ConnectionConfig {\n  url: string;\n  options?: {\n    reconnectionStrategy?: ReconnectionStrategy;\n    initialReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectionJitter?: number;\n    timeout?: number;\n    pingInterval?: number;\n    pingTimeout?: number;\n    autoConnect?: boolean;\n    forceNew?: boolean;\n    transports?: string[];\n  };\n  auth?: {\n    token?: string;\n    [key: string]: any;\n  };\n}\n\ninterface ConnectionStats {\n  connectTime: number | null;\n  disconnectTime: number | null;\n  lastPingTime: number | null;\n  lastPongTime: number | null;\n  pingLatency: number | null;\n  reconnectAttempts: number;\n  successfulReconnects: number;\n  failedReconnects: number;\n  totalDisconnects: number;\n  connectionUptime: number;\n  connectionDowntime: number;\n}\n\nclass WebSocketService {\n  private static instance: WebSocketService;\n  private socket: Socket | null = null;\n  private poloniexWs: WebSocket | null = null; // Direct Poloniex WebSocket\n  private usePoloniexDirect: boolean = false; // Flag to determine connection type\n  private connectionState: ConnectionState = ConnectionState.DISCONNECTED;\n  private eventListeners: Map<string, Set<(...args: any[]) => void>> = new Map();\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 10;\n  private initialReconnectDelay: number = 1000;\n  private maxReconnectDelay: number = 30000;\n  private reconnectionJitter: number = 0.5; // Random factor to avoid thundering herd\n  private currentReconnectDelay: number = this.initialReconnectDelay;\n  private reconnectionStrategy: ReconnectionStrategy = ReconnectionStrategy.EXPONENTIAL_BACKOFF;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private pingTimer: NodeJS.Timeout | null = null;\n  private pingInterval: number = WEBSOCKET_CONFIG.pingInterval;\n  private pingTimeout: number = WEBSOCKET_CONFIG.pingTimeout;\n  private lastPingTime: number = 0;\n  private lastPongTime: number = 0;\n  private offlineData: Map<string, any> = new Map();\n  private connectionAttempted: boolean = false;\n  private useMockData: boolean = true; // Default to mock data\n  private healthCheckEndpoint: string = '/api/health';\n  private subscriptions: Set<string> = new Set();\n  private pendingMessages: Array<{event: string, data: any}> = [];\n  \n  // Add error logging throttling\n  private lastErrorLog: { [key: string]: number } = {};\n  private ERROR_LOG_THROTTLE_MS = 30000; // 30 seconds\n  private connectionStats: ConnectionStats = {\n    connectTime: null,\n    disconnectTime: null,\n    lastPingTime: null,\n    lastPongTime: null,\n    pingLatency: null,\n    reconnectAttempts: 0,\n    successfulReconnects: 0,\n    failedReconnects: 0,\n    totalDisconnects: 0,\n    connectionUptime: 0,\n    connectionDowntime: 0\n  };\n  \n  private config: ConnectionConfig = {\n    url: getBackendUrl(),\n    options: {\n      ...WEBSOCKET_CONFIG,\n      reconnectionStrategy: ReconnectionStrategy.EXPONENTIAL_BACKOFF,\n      initialReconnectDelay: WEBSOCKET_CONFIG.reconnectionDelay,\n      maxReconnectDelay: WEBSOCKET_CONFIG.reconnectionDelayMax,\n      maxReconnectAttempts: WEBSOCKET_CONFIG.reconnectionAttempts,\n      reconnectionJitter: WEBSOCKET_CONFIG.randomizationFactor,\n      timeout: 10000,\n      pingInterval: WEBSOCKET_CONFIG.pingInterval,\n      pingTimeout: WEBSOCKET_CONFIG.pingTimeout,\n      autoConnect: WEBSOCKET_CONFIG.autoConnect,\n      forceNew: true,\n      transports: WEBSOCKET_CONFIG.transports\n    }\n  };\n  \n  private constructor() {\n    // Determine connection strategy based on environment and credentials\n    const hasCredentials = !!(getPoloniexApiKey() && getPoloniexApiSecret());\n    const mockMode = shouldUseMockMode(hasCredentials);\n    \n    // Use direct Poloniex connection if we have credentials and not in mock mode\n    this.usePoloniexDirect = hasCredentials && !mockMode;\n    this.useMockData = mockMode;\n    \n    console.log('WebSocket Service initialized:', {\n      usePoloniexDirect: this.usePoloniexDirect,\n      useMockData: this.useMockData,\n      hasCredentials\n    });\n    \n    // Initialize offline data from localStorage if available\n    try {\n      const savedData = localStorage.getItem('websocket_offline_data');\n      if (savedData) {\n        this.offlineData = new Map(JSON.parse(savedData));\n      }\n    } catch (error) {\n      console.error('Error loading offline data:', error);\n    }\n    \n    // Listen for online/offline events\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline.bind(this));\n      window.addEventListener('offline', this.handleOffline.bind(this));\n      window.addEventListener('beforeunload', this.cleanup.bind(this));\n    }\n  }\n  \n  public static getInstance(): WebSocketService {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n  \n  /**\n   * Configure the WebSocket service\n   */\n  public configure(config: Partial<ConnectionConfig>): void {\n    this.config = {\n      ...this.config,\n      ...config,\n      options: {\n        ...this.config.options,\n        ...config.options\n      },\n      auth: {\n        ...this.config.auth,\n        ...config.auth\n      }\n    };\n    \n    // Update internal settings from config\n    if (this.config.options) {\n      const { \n        reconnectionStrategy, \n        initialReconnectDelay, \n        maxReconnectDelay, \n        maxReconnectAttempts,\n        reconnectionJitter,\n        pingInterval,\n        pingTimeout\n      } = this.config.options;\n      \n      if (reconnectionStrategy) this.reconnectionStrategy = reconnectionStrategy;\n      if (initialReconnectDelay) this.initialReconnectDelay = initialReconnectDelay;\n      if (maxReconnectDelay) this.maxReconnectDelay = maxReconnectDelay;\n      if (maxReconnectAttempts) this.maxReconnectAttempts = maxReconnectAttempts;\n      if (reconnectionJitter) this.reconnectionJitter = reconnectionJitter;\n      if (pingInterval) this.pingInterval = pingInterval;\n      if (pingTimeout) this.pingTimeout = pingTimeout;\n    }\n  }\n  \n  /**\n   * Throttled logging to prevent console spam\n   */\n  private throttledLog(type: 'log' | 'warn' | 'error', key: string, message: string, ...args: any[]): void {\n    const now = Date.now();\n    const lastLog = this.lastErrorLog[key] || 0;\n    \n    if (now - lastLog > this.ERROR_LOG_THROTTLE_MS) {\n      if (import.meta.env.DEV) {\n        console[type](message, ...args);\n      }\n      this.lastErrorLog[key] = now;\n    }\n  }\n\n  /**\n   * Get current connection state\n   */\n  public getConnectionState(): ConnectionState {\n    return this.connectionState;\n  }\n  \n  /**\n   * Get connection statistics\n   */\n  public getConnectionStats(): ConnectionStats {\n    // Update uptime/downtime calculations\n    if (this.connectionState === ConnectionState.CONNECTED && this.connectionStats.connectTime) {\n      this.connectionStats.connectionUptime = Date.now() - this.connectionStats.connectTime;\n    } else if (this.connectionStats.disconnectTime) {\n      this.connectionStats.connectionDowntime = Date.now() - this.connectionStats.disconnectTime;\n    }\n    \n    return { ...this.connectionStats };\n  }\n  \n  /**\n   * Handle device coming online\n   */\n  private handleOnline(): void {\n    console.log('Device is online, attempting to reconnect WebSocket');\n    if (this.connectionState === ConnectionState.DISCONNECTED || \n        this.connectionState === ConnectionState.FAILED) {\n      this.reconnect();\n    }\n  }\n  \n  /**\n   * Handle device going offline\n   */\n  private handleOffline(): void {\n    console.log('Device is offline, WebSocket connection will be affected');\n    // We don't disconnect here as the socket will handle this automatically\n    // but we update our state to reflect the network status\n    if (this.connectionState === ConnectionState.CONNECTED) {\n      this.connectionState = ConnectionState.DISCONNECTED;\n      this.connectionStats.disconnectTime = Date.now();\n      this.connectionStats.totalDisconnects++;\n    }\n  }\n  \n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    this.stopPingTimer();\n    this.stopPoloniexPingTimer();\n    this.stopReconnectTimer();\n    this.disconnect();\n    \n    if (typeof window !== 'undefined') {\n      window.removeEventListener('online', this.handleOnline.bind(this));\n      window.removeEventListener('offline', this.handleOffline.bind(this));\n      window.removeEventListener('beforeunload', this.cleanup.bind(this));\n    }\n  }\n  \n  /**\n   * Calculate next reconnect delay based on strategy\n   */\n  private calculateReconnectDelay(): number {\n    let delay: number;\n    \n    switch (this.reconnectionStrategy) {\n      case ReconnectionStrategy.EXPONENTIAL_BACKOFF:\n        // Exponential backoff with jitter: delay = min(initialDelay * 2^attempts, maxDelay) * (1 ± jitter)\n        delay = Math.min(\n          this.initialReconnectDelay * Math.pow(2, this.reconnectAttempts),\n          this.maxReconnectDelay\n        );\n        break;\n        \n      case ReconnectionStrategy.LINEAR_BACKOFF:\n        // Linear backoff with jitter: delay = min(initialDelay * attempts, maxDelay) * (1 ± jitter)\n        delay = Math.min(\n          this.initialReconnectDelay * (this.reconnectAttempts + 1),\n          this.maxReconnectDelay\n        );\n        break;\n        \n      case ReconnectionStrategy.IMMEDIATE:\n        // Immediate reconnection with minimal delay\n        delay = 100;\n        break;\n        \n      case ReconnectionStrategy.NONE:\n      default:\n        // No automatic reconnection\n        return -1;\n    }\n    \n    // Apply jitter to avoid thundering herd problem\n    // Random value between (1 - jitter) and (1 + jitter)\n    const jitterFactor = 1 + (Math.random() * 2 - 1) * this.reconnectionJitter;\n    \n    return Math.floor(delay * jitterFactor);\n  }\n  \n  /**\n   * Start ping timer to detect connection issues\n   */\n  private startPingTimer(): void {\n    this.stopPingTimer();\n    \n    this.pingTimer = setInterval(() => {\n      if (this.connectionState !== ConnectionState.CONNECTED) {\n        return;\n      }\n      \n      this.lastPingTime = Date.now();\n      this.connectionStats.lastPingTime = this.lastPingTime;\n      \n      if (this.usePoloniexDirect && this.poloniexWs) {\n        // For Poloniex, the WebSocket handles ping/pong automatically\n        // We just track timing\n      } else if (this.socket) {\n        // For backend Socket.IO connection, send ping\n        this.socket.emit(SOCKET_IO_EVENTS.PING, { timestamp: this.lastPingTime });\n        \n        // Set timeout for pong response\n        setTimeout(() => {\n          const pongElapsed = this.lastPongTime - this.lastPingTime;\n          \n          // If we haven't received a pong or it's too old\n          if (pongElapsed <= 0 || pongElapsed > this.pingTimeout) {\n            this.throttledLog('warn', 'ping-timeout', `WebSocket ping timeout after ${this.pingTimeout}ms`);\n            \n            // Force disconnect and reconnect\n            if (this.socket) {\n              this.socket.disconnect();\n              this.handleDisconnect(new Error('Ping timeout'));\n            }\n          }\n        }, this.pingTimeout);\n      }\n    }, this.pingInterval);\n  }\n  \n  /**\n   * Stop ping timer\n   */\n  private stopPingTimer(): void {\n    if (this.pingTimer) {\n      clearInterval(this.pingTimer);\n      this.pingTimer = null;\n    }\n  }\n  \n  /**\n   * Stop reconnect timer\n   */\n  private stopReconnectTimer(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n  \n  /**\n   * Connect to Poloniex V3 futures WebSocket directly\n   */\n  private connectToPoloniex(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        const wsUrl = POLONIEX_WS_CONFIG.publicUrl; // Start with public stream\n        \n        console.log('Connecting to Poloniex V3 futures WebSocket:', wsUrl);\n        \n        this.poloniexWs = new WebSocket(wsUrl);\n        \n        this.poloniexWs.onopen = () => {\n          console.log('Connected to Poloniex V3 futures WebSocket');\n          this.connectionState = ConnectionState.CONNECTED;\n          this.useMockData = false;\n          this.reconnectAttempts = 0;\n          \n          // Update connection stats\n          this.connectionStats.connectTime = Date.now();\n          \n          // Start ping timer\n          this.startPoloniexPingTimer();\n          \n          // Subscribe to default channels\n          this.subscribeToPoloniexChannels();\n          \n          // Notify listeners\n          this.notifyListeners('connectionStateChanged', this.connectionState);\n          \n          resolve();\n        };\n        \n        this.poloniexWs.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            this.handlePoloniexMessage(data);\n          } catch (error) {\n            console.error('Error parsing Poloniex WebSocket message:', error);\n          }\n        };\n        \n        this.poloniexWs.onerror = (error) => {\n          console.error('Poloniex WebSocket error:', error);\n          this.handlePoloniexDisconnect();\n          reject(error);\n        };\n        \n        this.poloniexWs.onclose = () => {\n          console.log('Poloniex WebSocket connection closed');\n          this.handlePoloniexDisconnect();\n        };\n        \n      } catch (error) {\n        console.error('Failed to create Poloniex WebSocket connection:', error);\n        reject(error);\n      }\n    });\n  }\n  \n  /**\n   * Handle Poloniex WebSocket messages\n   */\n  private handlePoloniexMessage(data: any): void {\n    try {\n      // Handle different message types from Poloniex\n      if (data.channel === 'ticker' && data.data) {\n        const tickerData = Array.isArray(data.data) ? data.data : [data.data];\n        \n        tickerData.forEach((ticker: any) => {\n          const marketData: MarketData = {\n            pair: ticker.symbol?.replace('_', '-') || 'BTC-USDT',\n            timestamp: Date.now(),\n            open: parseFloat(ticker.open) || 0,\n            high: parseFloat(ticker.high) || 0,\n            low: parseFloat(ticker.low) || 0,\n            close: parseFloat(ticker.close) || 0,\n            volume: parseFloat(ticker.quantity) || 0\n          };\n          \n          this.notifyListeners(SOCKET_IO_EVENTS.MARKET_DATA, marketData);\n        });\n      } else if (data.channel === 'trades' && data.data) {\n        // Handle trades data\n        const tradesData = Array.isArray(data.data) ? data.data : [data.data];\n        \n        tradesData.forEach((trade: any) => {\n          const tradeData: Trade = {\n            id: trade.id,\n            pair: trade.symbol?.replace('_', '-') || 'BTC-USDT',\n            price: parseFloat(trade.price) || 0,\n            amount: parseFloat(trade.quantity) || 0,\n            side: trade.takerSide === 'buy' ? 'buy' : 'sell',\n            timestamp: trade.ts || Date.now()\n          };\n          \n          this.notifyListeners(SOCKET_IO_EVENTS.TRADE_EXECUTED, tradeData);\n        });\n      }\n    } catch (error) {\n      console.error('Error handling Poloniex message:', error);\n    }\n  }\n  \n  /**\n   * Subscribe to Poloniex channels\n   */\n  private subscribeToPoloniexChannels(): void {\n    if (!this.poloniexWs || this.poloniexWs.readyState !== WebSocket.OPEN) {\n      return;\n    }\n    \n    // Subscribe to ticker data for major pairs\n    const subscribeMessage = {\n      event: 'subscribe',\n      channel: ['ticker'],\n      symbols: ['BTC_USDT', 'ETH_USDT', 'SOL_USDT', 'ADA_USDT', 'DOT_USDT']\n    };\n    \n    this.poloniexWs.send(JSON.stringify(subscribeMessage));\n    console.log('Subscribed to Poloniex ticker channels');\n  }\n  \n  /**\n   * Handle Poloniex WebSocket disconnection\n   */\n  private handlePoloniexDisconnect(): void {\n    this.connectionState = ConnectionState.DISCONNECTED;\n    this.connectionStats.disconnectTime = Date.now();\n    this.connectionStats.totalDisconnects++;\n    \n    this.stopPoloniexPingTimer();\n    \n    // Notify listeners\n    this.notifyListeners('connectionStateChanged', this.connectionState);\n    \n    // Attempt to reconnect\n    this.reconnectToPoloniex();\n  }\n  \n  /**\n   * Reconnect to Poloniex WebSocket\n   */\n  private reconnectToPoloniex(): void {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Max Poloniex reconnect attempts reached, switching to mock mode');\n      this.useMockData = true;\n      this.connectionState = ConnectionState.FAILED;\n      this.notifyListeners('connectionStateChanged', this.connectionState);\n      return;\n    }\n    \n    const delay = this.calculateReconnectDelay();\n    this.reconnectAttempts++;\n    this.connectionState = ConnectionState.RECONNECTING;\n    \n    console.log(`Reconnecting to Poloniex in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.connectToPoloniex()\n        .then(() => {\n          console.log('Poloniex reconnection successful');\n          this.connectionStats.successfulReconnects++;\n        })\n        .catch(() => {\n          console.log('Poloniex reconnection failed');\n          this.connectionStats.failedReconnects++;\n          this.reconnectToPoloniex();\n        });\n    }, delay);\n  }\n  \n  /**\n   * Start ping timer for Poloniex connection\n   */\n  private startPoloniexPingTimer(): void {\n    this.stopPoloniexPingTimer();\n    \n    this.pingTimer = setInterval(() => {\n      if (this.poloniexWs && this.poloniexWs.readyState === WebSocket.OPEN) {\n        // Poloniex WebSocket handles ping/pong automatically\n        // We just track the connection health\n        this.lastPingTime = Date.now();\n        this.connectionStats.lastPingTime = this.lastPingTime;\n      }\n    }, POLONIEX_WS_CONFIG.pingInterval);\n  }\n  \n  /**\n   * Stop ping timer for Poloniex connection\n   */\n  private stopPoloniexPingTimer(): void {\n    if (this.pingTimer) {\n      clearInterval(this.pingTimer);\n      this.pingTimer = null;\n    }\n  }\n  /**\n   * Connect to the WebSocket server (either Poloniex direct or internal backend)\n   */\n  public connect(token?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Update auth token if provided\n        if (token) {\n          this.config.auth = { ...this.config.auth, token };\n        }\n        \n        // If already connected or connecting, return immediately\n        if (this.connectionState === ConnectionState.CONNECTED) {\n          resolve();\n          return;\n        }\n        \n        if (this.connectionState === ConnectionState.CONNECTING) {\n          // Wait for connection to complete\n          const checkConnection = setInterval(() => {\n            if (this.connectionState === ConnectionState.CONNECTED) {\n              clearInterval(checkConnection);\n              resolve();\n            } else if (this.connectionState === ConnectionState.FAILED || \n                      this.connectionState === ConnectionState.DISCONNECTED) {\n              clearInterval(checkConnection);\n              reject(new Error('Connection failed'));\n            }\n          }, 100);\n          return;\n        }\n        \n        // Reset reconnect attempts on new connection\n        this.reconnectAttempts = 0;\n        this.currentReconnectDelay = this.initialReconnectDelay;\n        this.connectionState = ConnectionState.CONNECTING;\n        \n        // If we already attempted to connect and failed, don't retry\n        if (this.connectionAttempted && this.useMockData) {\n          this.throttledLog('log', 'using-mock-data', 'Using mock data (previous connection attempt failed)');\n          this.connectionState = ConnectionState.FAILED;\n          resolve();\n          return;\n        }\n        \n        this.connectionAttempted = true;\n        \n        // Choose connection method based on configuration\n        if (this.usePoloniexDirect) {\n          console.info('Attempting direct Poloniex V3 futures WebSocket connection...');\n          this.connectToPoloniex()\n            .then(() => {\n              resolve();\n            })\n            .catch((error) => {\n              console.warn('Failed to connect to Poloniex, falling back to mock mode:', error);\n              this.useMockData = true;\n              this.connectionState = ConnectionState.FAILED;\n              resolve();\n            });\n        } else {\n          console.info('Attempting internal backend WebSocket connection...');\n          this.connectToBackend(token)\n            .then(() => {\n              resolve();\n            })\n            .catch((error) => {\n              console.warn('Failed to connect to backend, using mock mode:', error);\n              this.useMockData = true;\n              this.connectionState = ConnectionState.FAILED;\n              resolve();\n            });\n        }\n      } catch (error) {\n        this.throttledLog('error', 'websocket-connection-error', 'WebSocket connection error:', error instanceof Error ? error.message : String(error));\n        this.useMockData = true;\n        this.connectionState = ConnectionState.FAILED;\n        resolve();\n      }\n    });\n  }\n  \n  /**\n   * Connect to internal backend (original Socket.IO logic)\n   */\n  private connectToBackend(token?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        if (import.meta.env.DEV) {\n          console.info('Attempting internal backend WebSocket connection...');\n        }\n        \n        // Set a connection timeout\n        const connectionTimeout = setTimeout(() => {\n          this.throttledLog('warn', 'connection-timeout', `WebSocket connection timed out after ${this.config.options?.timeout || 10000}ms`);\n          this.connectionState = ConnectionState.FAILED;\n          this.useMockData = true;\n          resolve();\n        }, this.config.options?.timeout || 10000);\n        \n        // In WebContainer environment, always use mock data\n        // WebSocket connections outside the container domain aren't possible\n        if (typeof window !== 'undefined' && window.location && window.location.hostname.includes('webcontainer-api.io')) {\n          this.useMockData = true;\n          this.connectionState = ConnectionState.FAILED;\n          clearTimeout(connectionTimeout);\n          this.throttledLog('log', 'webcontainer-mock', 'Running in WebContainer environment, defaulting to mock data');\n          resolve();\n          return;\n        }\n        \n        // Check if server is available before attempting socket connection\n        fetch(this.config.url + this.healthCheckEndpoint, { \n          method: 'GET',\n          signal: AbortSignal.timeout(5000) // 5s timeout for the health check\n        })\n        .then(response => {\n          if (!response.ok) throw new Error('Server health check failed');\n          return response.json();\n        })\n        .then(() => {\n          // Server is available, attempt WebSocket connection\n          clearTimeout(connectionTimeout);\n          \n          // Configure socket.io options with enhanced stability settings\n          const socketOptions = {\n            auth: this.config.auth,\n            transports: this.config.options?.transports || ['websocket', 'polling'],\n            reconnection: false, // We handle reconnection ourselves\n            timeout: this.config.options?.timeout || 10000,\n            forceNew: this.config.options?.forceNew || true,\n            autoConnect: this.config.options?.autoConnect !== undefined ? \n                        this.config.options.autoConnect : false,\n            // Additional stability settings\n            closeOnBeforeunload: false,\n            withCredentials: true,\n            upgrade: true\n          };\n          \n          this.socket = io(this.config.url, socketOptions);\n          \n          // Set up event handlers\n          this.setupSocketEventHandlers();\n          \n          // Connect if autoConnect is false\n          if (!socketOptions.autoConnect) {\n            this.socket.connect();\n          }\n          \n          resolve();\n        })\n        .catch(error => {\n          // Server is not available, use mock data\n          clearTimeout(connectionTimeout);\n          this.throttledLog('log', 'server-unavailable', 'Server not available, using mock data:', error.message);\n          this.useMockData = true;\n          this.connectionState = ConnectionState.FAILED;\n          resolve();\n        });\n      } catch (error) {\n        this.throttledLog('error', 'websocket-connection-error', 'WebSocket connection error:', error instanceof Error ? error.message : String(error));\n        this.useMockData = true;\n        this.connectionState = ConnectionState.FAILED;\n        resolve();\n      }\n    });\n  }\n  \n  /**\n   * Set up socket event handlers\n   */\n  private setupSocketEventHandlers(): void {\n    if (!this.socket) return;\n    \n    // Connection events\n    this.socket.on(SOCKET_IO_EVENTS.CONNECT, () => {\n      console.log('WebSocket connected successfully');\n      this.connectionState = ConnectionState.CONNECTED;\n      this.useMockData = false;\n      this.reconnectAttempts = 0;\n      this.currentReconnectDelay = this.initialReconnectDelay;\n      \n      // Update connection stats\n      this.connectionStats.connectTime = Date.now();\n      \n      // Start ping timer\n      this.startPingTimer();\n      \n      // Resubscribe to previous subscriptions\n      this.resubscribe();\n      \n      // Send any pending messages\n      this.sendPendingMessages();\n      \n      // Notify listeners\n      this.notifyListeners('connectionStateChanged', this.connectionState);\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.DISCONNECT, (reason) => {\n      this.throttledLog('log', 'websocket-disconnect', `WebSocket disconnected: ${reason}`);\n      this.handleDisconnect(new Error(reason));\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.CONNECT_ERROR, (error) => {\n      this.throttledLog('error', 'websocket-connect-error', 'WebSocket connection error:', error);\n      this.handleDisconnect(error);\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.CONNECT_TIMEOUT, () => {\n      this.throttledLog('error', 'websocket-timeout', 'WebSocket connection timeout');\n      this.handleDisconnect(new Error('Connection timeout'));\n    });\n    \n    // Ping/pong for connection health monitoring\n    this.socket.on(SOCKET_IO_EVENTS.PONG, (data: { timestamp: number }) => {\n      this.lastPongTime = Date.now();\n      this.connectionStats.lastPongTime = this.lastPongTime;\n      \n      // Calculate ping latency\n      if (data && data.timestamp) {\n        this.connectionStats.pingLatency = this.lastPongTime - data.timestamp;\n      }\n    });\n    \n    // Data events\n    this.socket.on(SOCKET_IO_EVENTS.MARKET_DATA, (data: MarketData) => {\n      this.notifyListeners(SOCKET_IO_EVENTS.MARKET_DATA, data);\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.TRADE_EXECUTED, (data: Trade) => {\n      this.notifyListeners(SOCKET_IO_EVENTS.TRADE_EXECUTED, data);\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.CHAT_MESSAGE, (data: ChatMessage) => {\n      this.notifyListeners(SOCKET_IO_EVENTS.CHAT_MESSAGE, data);\n    });\n    \n    this.socket.on(SOCKET_IO_EVENTS.ERROR, (error) => {\n      console.error('WebSocket error:', typeof error === 'object' ? JSON.stringify(error) : error);\n      this.notifyListeners(SOCKET_IO_EVENTS.ERROR, error);\n    });\n  }\n  \n  /**\n   * Resubscribe to previous subscriptions after reconnect\n   */\n  private resubscribe(): void {\n    if (!this.isConnected()) return;\n    \n    console.log(`Resubscribing to ${this.subscriptions.size} channels`);\n    \n    this.subscriptions.forEach(subscription => {\n      if (this.usePoloniexDirect && this.poloniexWs) {\n        // For Poloniex direct connection, send subscription message\n        const subscribeMessage = {\n          event: 'subscribe',\n          channel: ['ticker'],\n          symbols: [subscription.replace('-', '_')]\n        };\n        this.poloniexWs.send(JSON.stringify(subscribeMessage));\n      } else if (this.socket) {\n        // For backend connection, use Socket.IO events\n        this.socket.emit(SOCKET_IO_EVENTS.SUBSCRIBE_MARKET, { pair: subscription });\n      }\n    });\n  }\n  \n  /**\n   * Send any pending messages after reconnect\n   */\n  private sendPendingMessages(): void {\n    if (!this.isConnected()) return;\n    \n    console.log(`Sending ${this.pendingMessages.length} pending messages`);\n    \n    while (this.pendingMessages.length > 0) {\n      const message = this.pendingMessages.shift();\n      if (message) {\n        if (this.usePoloniexDirect && this.poloniexWs) {\n          // For Poloniex direct connection, send as JSON\n          this.poloniexWs.send(JSON.stringify(message));\n        } else if (this.socket) {\n          // For backend connection, use Socket.IO events\n          this.socket.emit(message.event, message.data);\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle WebSocket disconnection with reconnect logic\n   */\n  private handleDisconnect(error: Error): void {\n    // Update connection state and stats\n    this.connectionState = ConnectionState.DISCONNECTED;\n    this.connectionStats.disconnectTime = Date.now();\n    this.connectionStats.totalDisconnects++;\n    \n    // Stop ping timer\n    this.stopPingTimer();\n    \n    // Notify listeners\n    this.notifyListeners('connectionStateChanged', this.connectionState);\n    this.notifyListeners(EVENTS.ERROR, error);\n    \n    // If reconnection strategy is NONE, don't attempt to reconnect\n    if (this.reconnectionStrategy === ReconnectionStrategy.NONE) {\n      this.useMockData = true;\n      return;\n    }\n    \n    // Attempt to reconnect\n    this.reconnect();\n  }\n  \n  /**\n   * Attempt to reconnect to the WebSocket server\n   */\n  private reconnect(): void {\n    // Stop any existing reconnect timer\n    this.stopReconnectTimer();\n    \n    // Check if we've reached the maximum number of reconnect attempts\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log(`Max reconnection attempts (${this.maxReconnectAttempts}) reached, staying in mock mode`);\n      this.connectionState = ConnectionState.FAILED;\n      this.useMockData = true;\n      this.connectionStats.failedReconnects++;\n      \n      // Notify listeners\n      this.notifyListeners('connectionStateChanged', this.connectionState);\n      return;\n    }\n    \n    // Calculate delay for next reconnect attempt\n    const delay = this.calculateReconnectDelay();\n    \n    // If delay is negative, don't reconnect\n    if (delay < 0) {\n      console.log('Reconnection strategy is NONE, not attempting to reconnect');\n      this.connectionState = ConnectionState.FAILED;\n      this.useMockData = true;\n      return;\n    }\n    \n    // Update state and stats\n    this.reconnectAttempts++;\n    this.connectionState = ConnectionState.RECONNECTING;\n    this.connectionStats.reconnectAttempts++;\n    \n    // Notify listeners\n    this.notifyListeners('connectionStateChanged', this.connectionState);\n    \n    console.log(`Attempting reconnect ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`);\n    \n    // Schedule reconnect attempt\n    this.reconnectTimer = setTimeout(() => {\n      // Create a new socket connection\n      this.connect()\n        .then(() => {\n          if (this.connectionState === ConnectionState.CONNECTED) {\n            console.log('Reconnected successfully');\n            this.connectionStats.successfulReconnects++;\n          } else {\n            console.log('Reconnect attempt failed');\n            this.connectionStats.failedReconnects++;\n            // Continue with reconnection attempts\n            this.reconnect();\n          }\n        })\n        .catch(() => {\n          console.log('Reconnect attempt failed with error');\n          this.connectionStats.failedReconnects++;\n          // Continue with reconnection attempts\n          this.reconnect();\n        });\n    }, delay);\n  }\n  \n  /**\n   * Check if WebSocket is connected\n   */\n  public isConnected(): boolean {\n    if (this.usePoloniexDirect) {\n      return this.connectionState === ConnectionState.CONNECTED && \n             this.poloniexWs !== null && \n             this.poloniexWs.readyState === WebSocket.OPEN;\n    } else {\n      return this.connectionState === ConnectionState.CONNECTED && this.socket !== null;\n    }\n  }\n  \n  /**\n   * Check if we're using mock data\n   */\n  public isMockMode(): boolean {\n    return this.useMockData;\n  }\n  \n  /**\n   * Save data for offline access\n   */\n  private saveOfflineData(key: string, data: any): void {\n    try {\n      this.offlineData.set(key, data);\n      localStorage.setItem('websocket_offline_data', JSON.stringify(Array.from(this.offlineData.entries())));\n    } catch (error) {\n      console.error('Error saving offline data:', error);\n    }\n  }\n  \n  /**\n   * Subscribe to market data for a specific pair\n   */\n  public subscribeToMarket(pair: string): void {\n    // Add to subscriptions set\n    this.subscriptions.add(pair);\n    \n    if (!this.isConnected()) {\n      console.log('WebSocket not connected, skipping market subscription');\n      // Try to load offline data\n      const offlineData = this.offlineData.get(`market_${pair}`);\n      if (offlineData) {\n        this.notifyListeners(SOCKET_IO_EVENTS.MARKET_DATA, offlineData);\n      }\n      return;\n    }\n    \n    if (this.usePoloniexDirect && this.poloniexWs) {\n      // For Poloniex direct connection\n      const subscribeMessage = {\n        event: 'subscribe',\n        channel: ['ticker'],\n        symbols: [pair.replace('-', '_')]\n      };\n      this.poloniexWs.send(JSON.stringify(subscribeMessage));\n    } else if (this.socket) {\n      // For backend Socket.IO connection\n      this.socket.emit(SOCKET_IO_EVENTS.SUBSCRIBE_MARKET, { pair });\n    }\n  }\n  \n  /**\n   * Unsubscribe from market data for a specific pair\n   */\n  public unsubscribeFromMarket(pair: string): void {\n    // Remove from subscriptions set\n    this.subscriptions.delete(pair);\n    \n    if (!this.isConnected()) {\n      return;\n    }\n    \n    if (this.usePoloniexDirect && this.poloniexWs) {\n      // For Poloniex direct connection\n      const unsubscribeMessage = {\n        event: 'unsubscribe',\n        channel: ['ticker'],\n        symbols: [pair.replace('-', '_')]\n      };\n      this.poloniexWs.send(JSON.stringify(unsubscribeMessage));\n    } else if (this.socket) {\n      // For backend Socket.IO connection\n      this.socket.emit(SOCKET_IO_EVENTS.UNSUBSCRIBE_MARKET, { pair });\n    }\n  }\n  \n  /**\n   * Send a message to the server\n   */\n  public send(event: string, data: any): void {\n    if (!this.isConnected()) {\n      console.log(`WebSocket not connected, queueing message: ${event}`);\n      // Queue message to be sent when connection is established\n      this.pendingMessages.push({ event, data });\n      return;\n    }\n    \n    if (this.usePoloniexDirect && this.poloniexWs) {\n      // For Poloniex direct connection, send as JSON\n      const message = { event, ...data };\n      this.poloniexWs.send(JSON.stringify(message));\n    } else if (this.socket) {\n      // For backend Socket.IO connection\n      this.socket.emit(event, data);\n    }\n  }\n  \n  /**\n   * Send a chat message\n   */\n  public sendChatMessage(message: string, username: string): void {\n    this.send(SOCKET_IO_EVENTS.CHAT_MESSAGE, {\n      message,\n      username,\n      timestamp: Date.now(),\n    });\n  }\n  \n  /**\n   * Register an event listener\n   */\n  public on(event: string, callback: (...args: any[]) => void): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n    \n    this.eventListeners.get(event)?.add(callback);\n  }\n  \n  /**\n   * Remove an event listener\n   */\n  public off(event: string, callback: (...args: any[]) => void): void {\n    if (!this.eventListeners.has(event)) return;\n    \n    this.eventListeners.get(event)?.delete(callback);\n  }\n  \n  /**\n   * Notify all listeners for a specific event\n   */\n  private notifyListeners(event: string, data: any): void {\n    if (!this.eventListeners.has(event)) return;\n    \n    // Save data for offline access if it's a data event\n    if (event === SOCKET_IO_EVENTS.MARKET_DATA || event === SOCKET_IO_EVENTS.TRADE_EXECUTED) {\n      this.saveOfflineData(event, data);\n    }\n    \n    this.eventListeners.get(event)?.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`Error in ${event} event listener:`, error instanceof Error ? error.message : String(error));\n      }\n    });\n  }\n  \n  /**\n   * Disconnect from the WebSocket server\n   */\n  public disconnect(): void {\n    // Stop timers\n    this.stopPingTimer();\n    this.stopPoloniexPingTimer();\n    this.stopReconnectTimer();\n    \n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    if (this.poloniexWs) {\n      this.poloniexWs.close();\n      this.poloniexWs = null;\n    }\n    \n    this.connectionState = ConnectionState.DISCONNECTED;\n    this.notifyListeners('connectionStateChanged', this.connectionState);\n  }\n\n  /**\n   * Handle page visibility change\n   * When page becomes hidden, we maintain connection but reduce activity\n   * When page becomes visible, we ensure connection is active\n   */\n  public handlePageVisibilityChange(isVisible: boolean): void {\n    if (isVisible) {\n      // Page visible - ensure connection is active\n      console.log('Page visible - ensuring WebSocket connection is active');\n      if (this.connectionState === ConnectionState.DISCONNECTED || \n          this.connectionState === ConnectionState.FAILED) {\n        this.connect();\n      }\n    } else {\n      // Page hidden - maintain connection but log the state\n      console.log('Page hidden - maintaining WebSocket connection in background');\n      // We don't disconnect on tab blur to maintain real-time data flow\n    }\n  }\n\n  /**\n   * Get connection health information\n   */\n  public getConnectionHealth(): {\n    state: ConnectionState;\n    isHealthy: boolean;\n    uptime: number;\n    lastPing: number;\n    latency: number | null;\n    reconnectAttempts: number;\n  } {\n    const now = Date.now();\n    const uptime = this.connectionStats.connectTime ? \n      now - this.connectionStats.connectTime : 0;\n    \n    return {\n      state: this.connectionState,\n      isHealthy: this.connectionState === ConnectionState.CONNECTED,\n      uptime,\n      lastPing: this.connectionStats.lastPingTime || 0,\n      latency: this.connectionStats.pingLatency,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n\n  /**\n   * Send market data to other connected clients\n   * This is primarily for testing without a backend\n   */\n  public broadcastMarketData(data: MarketData): void {\n    if (this.useMockData) {\n      // When in mock mode, simulate receiving the data from server\n      setTimeout(() => {\n        this.notifyListeners(SOCKET_IO_EVENTS.MARKET_DATA, data);\n      }, 100);\n    } else if (this.isConnected()) {\n      // When connected to real server, emit the data\n      this.send(SOCKET_IO_EVENTS.MARKET_DATA, data);\n    }\n  }\n\n  /**\n   * Send trade data to other connected clients\n   * This is primarily for testing without a backend\n   */\n  public broadcastTradeExecuted(data: Trade): void {\n    if (this.useMockData) {\n      // When in mock mode, simulate receiving the data from server\n      setTimeout(() => {\n        this.notifyListeners(SOCKET_IO_EVENTS.TRADE_EXECUTED, data);\n      }, 100);\n    } else if (this.isConnected()) {\n      // When connected to real server, emit the data\n      this.send(SOCKET_IO_EVENTS.TRADE_EXECUTED, data);\n    }\n  }\n  \n  /**\n   * Get a hook for monitoring connection state\n   */\n  public useConnectionState() {\n    const [state, setState] = React.useState(this.connectionState);\n    \n    React.useEffect(() => {\n      const handleStateChange = (newState: ConnectionState) => {\n        setState(newState);\n      };\n      \n      this.on('connectionStateChanged', handleStateChange);\n      \n      return () => {\n        this.off('connectionStateChanged', handleStateChange);\n      };\n    }, []);\n    \n    return state;\n  }\n}\n\n// Export a singleton instance\nexport const webSocketService = WebSocketService.getInstance();\n\n// Hook for using WebSocket in React components\nexport const useWebSocket = () => {\n  const [connectionState, setConnectionState] = React.useState<ConnectionState>(\n    webSocketService.getConnectionState()\n  );\n  const [isMockMode, setIsMockMode] = React.useState<boolean>(\n    webSocketService.isMockMode()\n  );\n  const errorHandler = useErrorHandler();\n  \n  React.useEffect(() => {\n    const handleStateChange = (state: ConnectionState) => {\n      setConnectionState(state);\n      setIsMockMode(webSocketService.isMockMode());\n      \n      // Handle connection errors\n      if (state === ConnectionState.FAILED) {\n        errorHandler.handleError(new Error('WebSocket connection failed after multiple attempts'));\n      }\n    };\n    \n    webSocketService.on('connectionStateChanged', handleStateChange);\n    \n    return () => {\n      webSocketService.off('connectionStateChanged', handleStateChange);\n    };\n  }, [errorHandler]);\n  \n  return {\n    connectionState,\n    isMockMode,\n    isConnected: webSocketService.isConnected(),\n    connect: webSocketService.connect.bind(webSocketService),\n    disconnect: webSocketService.disconnect.bind(webSocketService),\n    subscribe: webSocketService.subscribeToMarket.bind(webSocketService),\n    unsubscribe: webSocketService.unsubscribeFromMarket.bind(webSocketService),\n    send: webSocketService.send.bind(webSocketService),\n    on: webSocketService.on.bind(webSocketService),\n    off: webSocketService.off.bind(webSocketService),\n    getStats: webSocketService.getConnectionStats.bind(webSocketService)\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/store/index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":18,"suggestions":[{"fix":{"range":[1781,1824],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":18,"suggestions":[{"fix":{"range":[2082,2125],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":20,"suggestions":[{"fix":{"range":[2941,2992],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":20,"suggestions":[{"fix":{"range":[3681,3725],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CryptoJS from \"crypto-js\";\nimport { create } from \"zustand\";\nimport { createJSONStorage, persist } from \"zustand/middleware\";\nimport { immer } from \"zustand/middleware/immer\";\n\n// Define store state interface\nexport interface AppState {\n  // API Configuration\n  apiCredentials: {\n    apiKey: string;\n    apiSecret: string;\n    isLiveTrading: boolean;\n  };\n\n  // UI State\n  ui: {\n    darkMode: boolean;\n    showExtension: boolean;\n    notifications: {\n      email: boolean;\n      trade: boolean;\n      price: boolean;\n      chat: boolean;\n    };\n  };\n\n  // Trading Configuration\n  trading: {\n    defaultPair: string;\n    mockMode: boolean;\n  };\n\n  // Toast Notifications\n  toasts: Array<{\n    id: string;\n    message: string;\n    type: \"success\" | \"error\" | \"warning\" | \"info\";\n    timestamp: number;\n    dismissible: boolean;\n  }>;\n}\n\n// Define store actions interface\nexport interface AppActions {\n  // API Credentials\n  setApiCredentials: (credentials: Partial<AppState[\"apiCredentials\"]>) => void;\n  clearApiCredentials: () => void;\n\n  // UI Actions\n  setDarkMode: (enabled: boolean) => void;\n  setShowExtension: (show: boolean) => void;\n  setNotifications: (\n    notifications: Partial<AppState[\"ui\"][\"notifications\"]>\n  ) => void;\n\n  // Trading Actions\n  setDefaultPair: (pair: string) => void;\n  setMockMode: (enabled: boolean) => void;\n\n  // Toast Actions\n  addToast: (toast: Omit<AppState[\"toasts\"][0], \"id\" | \"timestamp\">) => void;\n  removeToast: (id: string) => void;\n  clearToasts: () => void;\n}\n\n// Encryption key for sensitive data\nconst ENCRYPTION_KEY = \"poloniex-trading-platform-key\";\n\n// Encrypt sensitive data\nconst encryptData = (data: string): string => {\n  try {\n    return CryptoJS.AES.encrypt(data, ENCRYPTION_KEY).toString();\n  } catch (error) {\n    console.error(\"Encryption failed:\", error);\n    return data;\n  }\n};\n\n// Decrypt sensitive data\nconst decryptData = (encryptedData: string): string => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return encryptedData;\n  }\n};\n\n// Custom storage with encryption for sensitive data\nconst createEncryptedStorage = () => ({\n  getItem: (name: string): string | null => {\n    const item = localStorage.getItem(name);\n    if (!item) return null;\n\n    try {\n      const parsed = JSON.parse(item);\n      if (parsed.state?.apiCredentials) {\n        // Decrypt API credentials\n        if (parsed.state.apiCredentials.apiKey) {\n          parsed.state.apiCredentials.apiKey = decryptData(\n            parsed.state.apiCredentials.apiKey\n          );\n        }\n        if (parsed.state.apiCredentials.apiSecret) {\n          parsed.state.apiCredentials.apiSecret = decryptData(\n            parsed.state.apiCredentials.apiSecret\n          );\n        }\n      }\n      return JSON.stringify(parsed);\n    } catch (error) {\n      console.error(\"Error parsing stored data:\", error);\n      return item;\n    }\n  },\n\n  setItem: (name: string, value: string): void => {\n    try {\n      const parsed = JSON.parse(value);\n      if (parsed.state?.apiCredentials) {\n        // Encrypt API credentials before storing\n        if (parsed.state.apiCredentials.apiKey) {\n          parsed.state.apiCredentials.apiKey = encryptData(\n            parsed.state.apiCredentials.apiKey\n          );\n        }\n        if (parsed.state.apiCredentials.apiSecret) {\n          parsed.state.apiCredentials.apiSecret = encryptData(\n            parsed.state.apiCredentials.apiSecret\n          );\n        }\n      }\n      localStorage.setItem(name, JSON.stringify(parsed));\n    } catch (error) {\n      console.error(\"Error storing data:\", error);\n      localStorage.setItem(name, value);\n    }\n  },\n\n  removeItem: (name: string): void => {\n    localStorage.removeItem(name);\n  },\n});\n\n// Default state\nconst defaultState: AppState = {\n  apiCredentials: {\n    apiKey: \"\",\n    apiSecret: \"\",\n    isLiveTrading: false,\n  },\n  ui: {\n    darkMode: false,\n    showExtension: true,\n    notifications: {\n      email: true,\n      trade: true,\n      price: true,\n      chat: true,\n    },\n  },\n  trading: {\n    defaultPair: \"BTC_USDT\",\n    mockMode: true,\n  },\n  toasts: [],\n};\n\n// Create the store\nexport const useAppStore = create<AppState & AppActions>()(\n  persist(\n    immer((set) => ({\n      ...defaultState,\n\n      // API Credentials Actions\n      setApiCredentials: (credentials) =>\n        set((state) => {\n          Object.assign(state.apiCredentials, credentials);\n        }),\n\n      clearApiCredentials: () =>\n        set((state) => {\n          state.apiCredentials = {\n            apiKey: \"\",\n            apiSecret: \"\",\n            isLiveTrading: false,\n          };\n        }),\n\n      // UI Actions\n      setDarkMode: (enabled) =>\n        set((state) => {\n          state.ui.darkMode = enabled;\n        }),\n\n      setShowExtension: (show) =>\n        set((state) => {\n          state.ui.showExtension = show;\n        }),\n\n      setNotifications: (notifications) =>\n        set((state) => {\n          Object.assign(state.ui.notifications, notifications);\n        }),\n\n      // Trading Actions\n      setDefaultPair: (pair) =>\n        set((state) => {\n          state.trading.defaultPair = pair;\n        }),\n\n      setMockMode: (enabled) =>\n        set((state) => {\n          state.trading.mockMode = enabled;\n        }),\n\n      // Toast Actions\n      addToast: (toast) =>\n        set((state) => {\n          const newToast = {\n            ...toast,\n            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n            timestamp: Date.now(),\n          };\n          state.toasts.push(newToast);\n        }),\n\n      removeToast: (id) =>\n        set((state) => {\n          const index = state.toasts.findIndex((t) => t.id === id);\n          if (index !== -1) {\n            state.toasts.splice(index, 1);\n          }\n        }),\n\n      clearToasts: () =>\n        set((state) => {\n          state.toasts = [];\n        }),\n    })),\n    {\n      name: \"poloniex-app-storage\",\n      storage: createJSONStorage(() => createEncryptedStorage()),\n      partialize: (state) => ({\n        apiCredentials: state.apiCredentials,\n        ui: state.ui,\n        trading: state.trading,\n        // Don't persist toasts\n      }),\n    }\n  )\n);\n\n// Selector hooks for better performance\nexport const useApiCredentials = () =>\n  useAppStore((state) => state.apiCredentials);\nexport const useUISettings = () => useAppStore((state) => state.ui);\nexport const useTradingSettings = () => useAppStore((state) => state.trading);\nexport const useToasts = () => useAppStore((state) => state.toasts);\n\n// Action hooks\nexport const useApiActions = () =>\n  useAppStore((state) => ({\n    setApiCredentials: state.setApiCredentials,\n    clearApiCredentials: state.clearApiCredentials,\n  }));\n\nexport const useUIActions = () =>\n  useAppStore((state) => ({\n    setDarkMode: state.setDarkMode,\n    setShowExtension: state.setShowExtension,\n    setNotifications: state.setNotifications,\n  }));\n\nexport const useTradingActions = () =>\n  useAppStore((state) => ({\n    setDefaultPair: state.setDefaultPair,\n    setMockMode: state.setMockMode,\n  }));\n\nexport const useToastActions = () =>\n  useAppStore((state) => ({\n    addToast: state.addToast,\n    removeToast: state.removeToast,\n    clearToasts: state.clearToasts,\n  }));\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/advanced-backtesting.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/advanced-features.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/ai-signal-generator.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":127,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":65}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach } from 'vitest';\nimport { AISignalGenerator } from '@/ml/aiSignalGenerator';\nimport { MarketData } from '@/types';\n\ndescribe('AI Signal Generator', () => {\n  let aiSignalGenerator: AISignalGenerator;\n  let mockMarketData: MarketData[];\n\n  beforeEach(() => {\n    aiSignalGenerator = new AISignalGenerator({\n      lookbackPeriod: 20,\n      confidenceThreshold: 0.6,\n      riskTolerance: 'MODERATE'\n    });\n\n    // Create mock market data\n    mockMarketData = [];\n    const basePrice = 50000;\n    for (let i = 0; i < 25; i++) {\n      const price = basePrice + (Math.sin(i / 5) * 1000) + (Math.random() * 500 - 250);\n      mockMarketData.push({\n        symbol: 'BTC_USDT',\n        interval: '5m',\n        open: price - 50,\n        high: price + 100,\n        low: price - 100,\n        close: price,\n        volume: 1000 + Math.random() * 500,\n        timestamp: Date.now() - (25 - i) * 5 * 60 * 1000,\n        quoteVolume: 0,\n        takerBuyBaseVolume: 0,\n        takerBuyQuoteVolume: 0,\n        count: 0\n      });\n    }\n  });\n\n  describe('Signal Generation', () => {\n    it('should generate a valid AI signal with sufficient data', async () => {\n      const signal = await aiSignalGenerator.generateSignal(mockMarketData);\n      \n      expect(signal).toBeDefined();\n      expect(signal.action).toMatch(/^(BUY|SELL|HOLD)$/);\n      expect(signal.confidence).toBeGreaterThanOrEqual(0);\n      expect(signal.confidence).toBeLessThanOrEqual(1);\n      expect(signal.reason).toBeDefined();\n      expect(signal.features).toBeDefined();\n      expect(signal.riskLevel).toMatch(/^(LOW|MEDIUM|HIGH)$/);\n      expect(typeof signal.expectedReturn).toBe('number');\n    });\n\n    it('should return HOLD signal with insufficient data', async () => {\n      const insufficientData = mockMarketData.slice(0, 5);\n      const signal = await aiSignalGenerator.generateSignal(insufficientData);\n      \n      expect(signal.action).toBe('HOLD');\n      expect(signal.confidence).toBe(0);\n      expect(signal.reason).toBe('Insufficient data for analysis');\n    });\n\n    it('should include stop loss and take profit when risk management is enabled', async () => {\n      const signalGenerator = new AISignalGenerator({\n        enableRiskManagement: true,\n        confidenceThreshold: 0.1 // Lower threshold to ensure signal generation\n      });\n\n      const signal = await signalGenerator.generateSignal(mockMarketData);\n      \n      if (signal.action !== 'HOLD') {\n        expect(signal.stopLoss).toBeDefined();\n        expect(signal.takeProfit).toBeDefined();\n        expect(typeof signal.stopLoss).toBe('number');\n        expect(typeof signal.takeProfit).toBe('number');\n      }\n    });\n  });\n\n  describe('Feature Extraction', () => {\n    it('should extract technical features correctly', async () => {\n      const signal = await aiSignalGenerator.generateSignal(mockMarketData);\n      const features = signal.features;\n      \n      expect(features.currentPrice).toBeDefined();\n      expect(features.sma5).toBeDefined();\n      expect(features.sma10).toBeDefined();\n      expect(features.sma20).toBeDefined();\n      expect(features.rsi).toBeGreaterThanOrEqual(0);\n      expect(features.rsi).toBeLessThanOrEqual(100);\n      expect(features.volatility).toBeGreaterThanOrEqual(0);\n      expect(features.volumeRatio).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should calculate Bollinger Bands correctly', async () => {\n      const signal = await aiSignalGenerator.generateSignal(mockMarketData);\n      const features = signal.features;\n      \n      expect(features.bbUpper).toBeGreaterThan(features.bbMiddle);\n      expect(features.bbMiddle).toBeGreaterThan(features.bbLower);\n      expect(features.pricePosition).toBeGreaterThanOrEqual(0);\n      expect(features.pricePosition).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('Risk Management', () => {\n    it('should adjust confidence based on risk level', async () => {\n      const conservativeGenerator = new AISignalGenerator({\n        riskTolerance: 'CONSERVATIVE',\n        enableRiskManagement: true\n      });\n\n      const aggressiveGenerator = new AISignalGenerator({\n        riskTolerance: 'AGGRESSIVE',\n        enableRiskManagement: true\n      });\n\n      const conservativeSignal = await conservativeGenerator.generateSignal(mockMarketData);\n      const aggressiveSignal = await aggressiveGenerator.generateSignal(mockMarketData);\n\n      // Conservative should generally have lower confidence for risky signals\n      if (conservativeSignal.riskLevel === 'HIGH' && aggressiveSignal.riskLevel === 'HIGH') {\n        expect(conservativeSignal.confidence).toBeLessThanOrEqual(aggressiveSignal.confidence);\n      }\n    });\n\n    it('should calculate appropriate risk level', async () => {\n      // Create high volatility data\n      const highVolatilityData = mockMarketData.map((data, index) => ({\n        ...data,\n        close: data.close + (Math.random() * 2000 - 1000) // Add high volatility\n      }));\n\n      const signal = await aiSignalGenerator.generateSignal(highVolatilityData);\n      \n      // Signal should have a valid risk level\n      expect(['LOW', 'MEDIUM', 'HIGH']).toContain(signal.riskLevel);\n      \n      // Risk level should be calculated based on market conditions\n      expect(signal.riskLevel).toBeDefined();\n    });\n  });\n\n  describe('Signal Combination', () => {\n    it('should generate stronger signals when technical and ML agree', async () => {\n      // Create trending data that should generate strong signals\n      const trendingData = mockMarketData.map((data, index) => ({\n        ...data,\n        close: 50000 + (index * 100), // Strong uptrend\n        volume: 1000 + (index * 10) // Increasing volume\n      }));\n\n      const signal = await aiSignalGenerator.generateSignal(trendingData);\n      \n      // Should generate a strong buy signal with high confidence\n      if (signal.action === 'BUY') {\n        expect(signal.confidence).toBeGreaterThan(0.5);\n      }\n    });\n  });\n\n  describe('Configuration Impact', () => {\n    it('should respect confidence threshold setting', async () => {\n      const highThresholdGenerator = new AISignalGenerator({\n        confidenceThreshold: 0.9\n      });\n\n      const lowThresholdGenerator = new AISignalGenerator({\n        confidenceThreshold: 0.1\n      });\n\n      const highThresholdSignal = await highThresholdGenerator.generateSignal(mockMarketData);\n      const lowThresholdSignal = await lowThresholdGenerator.generateSignal(mockMarketData);\n\n      // High threshold should be more likely to return HOLD\n      // Low threshold should be more likely to return BUY/SELL\n      if (highThresholdSignal.action === 'HOLD' && lowThresholdSignal.action !== 'HOLD') {\n        expect(lowThresholdSignal.confidence).toBeLessThan(0.9);\n      }\n    });\n\n    it('should use correct lookback period', async () => {\n      const shortLookbackGenerator = new AISignalGenerator({\n        lookbackPeriod: 10\n      });\n\n      const longLookbackGenerator = new AISignalGenerator({\n        lookbackPeriod: 20\n      });\n\n      // Both should work with sufficient data\n      const shortSignal = await shortLookbackGenerator.generateSignal(mockMarketData);\n      const longSignal = await longLookbackGenerator.generateSignal(mockMarketData);\n\n      expect(shortSignal.action).toMatch(/^(BUY|SELL|HOLD)$/);\n      expect(longSignal.action).toMatch(/^(BUY|SELL|HOLD)$/);\n\n      // Test with limited data that should work for short lookback\n      const limitedData = mockMarketData.slice(0, 15);\n      const shortWithLimitedData = await shortLookbackGenerator.generateSignal(limitedData);\n      const longWithLimitedData = await longLookbackGenerator.generateSignal(limitedData);\n\n      // Short lookback should be able to generate signals with limited data\n      expect(shortWithLimitedData.action).toMatch(/^(BUY|SELL|HOLD)$/);\n      // Long lookback should return HOLD with insufficient data\n      expect(longWithLimitedData.action).toBe('HOLD');\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/api-behavior-changes.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":20,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\n\n// Test that demonstrates the key differences in behavior\ndescribe('API Behavior Changes - No Mock Fallbacks', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Old vs New Behavior', () => {\n    it('OLD: would silently fall back to mock data on API errors', () => {\n      // This is what used to happen - NOT what we want anymore\n      \n      // Mock API failure\n      const apiError = new Error('Network timeout');\n      \n      // Old behavior would catch this and return mock data\n      const oldBehavior = () => {\n        try {\n          throw apiError;\n        } catch (error) {\n          // Silent fallback to mock data (BAD)\n          return {\n            totalAmount: \"15478.23\", // Mock data\n            mockMode: true\n          };\n        }\n      };\n      \n      const result = oldBehavior();\n      expect(result.mockMode).toBe(true); // This is what we DON'T want anymore\n    });\n\n    it('NEW: throws errors instead of falling back to mock data', () => {\n      // This is the new behavior we want\n      \n      // Mock API failure  \n      const apiError = new Error('Network timeout');\n      \n      // New behavior throws the error\n      const newBehavior = () => {\n        throw apiError; // Let the UI handle the error properly\n      };\n      \n      // Should throw instead of returning mock data\n      expect(() => newBehavior()).toThrow('Network timeout');\n    });\n  });\n\n  describe('Environment-based Mock Mode', () => {\n    it('should use mock mode only when explicitly configured', () => {\n      // Mock environment configuration\n      const mockEnv = {\n        VITE_FORCE_MOCK_MODE: 'true',\n        VITE_POLONIEX_API_KEY: 'test_key'\n      };\n      \n      // Mock mode should be enabled when explicitly forced\n      const shouldUseMock = mockEnv.VITE_FORCE_MOCK_MODE === 'true';\n      expect(shouldUseMock).toBe(true);\n    });\n\n    it('should NOT use mock mode in production without explicit configuration', () => {\n      // Mock production environment\n      const mockEnv = {\n        VITE_FORCE_MOCK_MODE: undefined,\n        VITE_DISABLE_MOCK_MODE: undefined,\n        VITE_POLONIEX_API_KEY: undefined\n      };\n      \n      // In production without credentials, should show errors instead of mock\n      const isProduction = true;\n      const hasCredentials = Boolean(mockEnv.VITE_POLONIEX_API_KEY);\n      const forceMock = mockEnv.VITE_FORCE_MOCK_MODE === 'true';\n      \n      // New logic: don't fall back to mock in production\n      const shouldUseMock = forceMock || (!isProduction && !hasCredentials);\n      expect(shouldUseMock).toBe(false); // Should NOT use mock mode\n    });\n  });\n\n  describe('Error Handling Improvements', () => {\n    it('should provide specific error types for different failures', () => {\n      const connectionError = { name: 'PoloniexConnectionError', message: 'Network timeout' };\n      const authError = { name: 'PoloniexAuthenticationError', message: 'Invalid API key' };\n      const apiError = { name: 'PoloniexAPIError', message: 'Rate limit exceeded', statusCode: 429 };\n      \n      // Each error type can be handled differently by the UI\n      expect(connectionError.name).toBe('PoloniexConnectionError');\n      expect(authError.name).toBe('PoloniexAuthenticationError');\n      expect(apiError.name).toBe('PoloniexAPIError');\n    });\n\n    it('should provide context-specific error messages', () => {\n      const context = 'Account Balance';\n      const error = new Error('Connection failed');\n      \n      // Error boundary should show context\n      const errorMessage = `${context} operation failed. ${error.message}`;\n      expect(errorMessage).toBe('Account Balance operation failed. Connection failed');\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/comprehensive-simple.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/comprehensive.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/connectivity-fix.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'backendUrl' is assigned a value but never used.","line":49,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { getBackendUrl } from '../utils/environment';\n\ndescribe('WebSocket & API Connectivity Fix', () => {\n  beforeEach(() => {\n    // Reset environment\n    vi.resetModules();\n    \n    // Mock window object\n    Object.defineProperty(global, 'window', {\n      value: {\n        location: {\n          hostname: 'localhost',\n          origin: 'http://localhost:3000'\n        }\n      },\n      writable: true\n    });\n  });\n\n  describe('Backend URL Configuration', () => {\n    it('should return localhost for local development', () => {\n      global.window.location.hostname = 'localhost';\n      const backendUrl = getBackendUrl();\n      expect(backendUrl).toBe('http://localhost:3000');\n    });\n\n    it('should return Railway backend URL for Railway deployment', () => {\n      global.window.location.hostname = 'poloniex-trading-platform-production.up.railway.app';\n      const backendUrl = getBackendUrl();\n      expect(backendUrl).toBe('https://polytrade-be.up.railway.app');\n    });\n\n    it('should return Railway backend URL for any Railway domain', () => {\n      global.window.location.hostname = 'some-service.railway.app';\n      const backendUrl = getBackendUrl();\n      expect(backendUrl).toBe('https://polytrade-be.up.railway.app');\n    });\n\n    it('should respect VITE_BACKEND_URL environment variable', () => {\n      // For this test, we need to mock getEnvVariable to return our custom URL\n      global.window.location.hostname = 'test.example.com';\n      \n      // This test validates that environment variables take precedence\n      // In a real scenario, VITE_BACKEND_URL would be set during build time\n      // We'll test the logic directly since mocking import.meta.env is complex in this test setup\n      \n      const mockEnvUrl = 'https://custom-backend.example.com';\n      const backendUrl = mockEnvUrl || getBackendUrl(); // Environment variable would take precedence\n      \n      expect(mockEnvUrl).toBe('https://custom-backend.example.com');\n    });\n\n    it('should fall back to window.location.origin for other domains', () => {\n      global.window.location.hostname = 'example.com';\n      global.window.location.origin = 'https://example.com';\n      \n      const backendUrl = getBackendUrl();\n      expect(backendUrl).toBe('https://example.com');\n    });\n  });\n\n  describe('CORS Configuration Validation', () => {\n    it('should validate that Railway backend URL is included in CORS origins', async () => {\n      // This test validates the CORS configuration by checking the backend code\n      // In a real deployment, this would be validated by making actual HTTP requests\n      \n      const railwayBackendUrl = 'https://polytrade-be.up.railway.app';\n      \n      // Simulate what the CORS middleware should allow\n      const allowedOrigins = [\n        'https://healthcheck.railway.app',\n        'https://poloniex-trading-platform-production.up.railway.app',\n        'https://polytrade-red.vercel.app',\n        'https://polytrade-be.up.railway.app', // This should be present after our fix\n        'http://localhost:5173'\n      ];\n      \n      expect(allowedOrigins).toContain(railwayBackendUrl);\n      expect(allowedOrigins).toContain('https://poloniex-trading-platform-production.up.railway.app');\n    });\n  });\n\n  describe('Health Check Endpoint Validation', () => {\n    it('should validate health check endpoints are properly configured', () => {\n      // Test that the expected health check paths exist\n      const expectedHealthPaths = [\n        '/api/health', // API health check with detailed info\n        '/health'      // Standard Railway health check\n      ];\n      \n      expectedHealthPaths.forEach(path => {\n        expect(path).toMatch(/^\\/(?:api\\/)?health$/);\n      });\n    });\n  });\n\n  describe('WebSocket Configuration Validation', () => {\n    it('should validate WebSocket transport configuration', () => {\n      // Validate that the WebSocket service uses proper transports\n      const expectedTransports = ['websocket', 'polling'];\n      const configuredTransports = ['websocket', 'polling']; // This matches what's in the config\n      \n      expect(configuredTransports).toEqual(expectedTransports);\n    });\n\n    it('should validate Socket.IO CORS configuration includes Railway URLs', () => {\n      // Validate that Socket.IO CORS includes the necessary Railway URLs\n      const expectedCorsOrigins = [\n        'https://poloniex-trading-platform-production.up.railway.app',\n        'https://polytrade-be.up.railway.app'\n      ];\n      \n      expectedCorsOrigins.forEach(origin => {\n        expect(origin).toMatch(/^https:\\/\\/.*\\.railway\\.app$/);\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/environment-api.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'afterEach' is defined but never used.","line":1,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'waitFor' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MemoryRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { MemoryRouter } from 'react-router-dom';\n\n// Mock the environment utilities\nvi.mock('@/utils/environment', () => ({\n  getEnvVariable: vi.fn(),\n  getApiBaseUrl: vi.fn(),\n  getPoloniexApiKey: vi.fn(),\n  getPoloniexApiSecret: vi.fn(),\n  getPoloniexPassphrase: vi.fn(),\n  shouldUseMockMode: vi.fn(),\n  isMockModeForced: vi.fn(),\n  isMockModeDisabled: vi.fn(),\n  IS_WEBCONTAINER: false,\n  IS_LOCAL_DEV: false,\n}));\n\n// Mock the API services\nvi.mock('@/services/poloniexAPI', () => ({\n  poloniexApi: {\n    loadCredentials: vi.fn(),\n    getMarketData: vi.fn(),\n    getAccountBalance: vi.fn(),\n    getOpenPositions: vi.fn(),\n    getRecentTrades: vi.fn(),\n    placeOrder: vi.fn(),\n  },\n  PoloniexAPIError: class extends Error {\n    constructor(message: string, public code?: string, public statusCode?: number) {\n      super(message);\n      this.name = 'PoloniexAPIError';\n    }\n  },\n  PoloniexConnectionError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = 'PoloniexConnectionError';\n    }\n  },\n  PoloniexAuthenticationError: class extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = 'PoloniexAuthenticationError';\n    }\n  },\n}));\n\nimport { \n  getEnvVariable, \n  getApiBaseUrl, \n  shouldUseMockMode, \n  isMockModeForced, \n  isMockModeDisabled \n} from '@/utils/environment';\nimport { \n  poloniexApi, \n  PoloniexAPIError, \n  PoloniexConnectionError, \n  PoloniexAuthenticationError \n} from '@/services/poloniexAPI';\nimport APIErrorBoundary from '@/components/APIErrorBoundary';\n\ndescribe('Environment Configuration Tests', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('Environment Variable Support', () => {\n    it('should use VITE_API_URL when provided', () => {\n      const mockGetEnvVariable = getEnvVariable as jest.MockedFunction<typeof getEnvVariable>;\n      const mockGetApiBaseUrl = getApiBaseUrl as jest.MockedFunction<typeof getApiBaseUrl>;\n      \n      mockGetEnvVariable.mockImplementation((key: string) => {\n        if (key === 'VITE_API_URL') return 'https://custom-api.example.com/v3';\n        return '';\n      });\n      \n      mockGetApiBaseUrl.mockImplementation(() => 'https://custom-api.example.com/v3');\n      \n      const result = getApiBaseUrl('futures');\n      expect(result).toBe('https://custom-api.example.com/v3');\n    });\n\n    it('should use NEXT_PUBLIC_API_URL as fallback', () => {\n      const mockGetEnvVariable = getEnvVariable as jest.MockedFunction<typeof getEnvVariable>;\n      const mockGetApiBaseUrl = getApiBaseUrl as jest.MockedFunction<typeof getApiBaseUrl>;\n      \n      mockGetEnvVariable.mockImplementation((key: string) => {\n        if (key === 'VITE_API_URL') return '';\n        if (key === 'NEXT_PUBLIC_API_URL') return 'https://next-api.example.com/v3';\n        return '';\n      });\n      \n      mockGetApiBaseUrl.mockImplementation(() => 'https://next-api.example.com/v3');\n      \n      const result = getApiBaseUrl('futures');\n      expect(result).toBe('https://next-api.example.com/v3');\n    });\n\n    it('should default to official Poloniex API when no custom URL provided', () => {\n      const mockGetEnvVariable = getEnvVariable as jest.MockedFunction<typeof getEnvVariable>;\n      const mockGetApiBaseUrl = getApiBaseUrl as jest.MockedFunction<typeof getApiBaseUrl>;\n      \n      mockGetEnvVariable.mockReturnValue('');\n      mockGetApiBaseUrl.mockImplementation((service) => \n        service === 'futures' \n          ? 'https://futures-api.poloniex.com/v3'\n          : 'https://api.poloniex.com/v3'\n      );\n      \n      const futuresResult = getApiBaseUrl('futures');\n      const spotResult = getApiBaseUrl('spot');\n      \n      expect(futuresResult).toBe('https://futures-api.poloniex.com/v3');\n      expect(spotResult).toBe('https://api.poloniex.com/v3');\n    });\n  });\n\n  describe('Mock Mode Control', () => {\n    it('should force mock mode when VITE_FORCE_MOCK_MODE=true', () => {\n      const mockIsMockModeForced = isMockModeForced as jest.MockedFunction<typeof isMockModeForced>;\n      const mockShouldUseMockMode = shouldUseMockMode as jest.MockedFunction<typeof shouldUseMockMode>;\n      \n      mockIsMockModeForced.mockReturnValue(true);\n      mockShouldUseMockMode.mockReturnValue(true);\n      \n      const result = shouldUseMockMode(true); // Even with credentials\n      expect(result).toBe(true);\n    });\n\n    it('should disable mock mode when VITE_DISABLE_MOCK_MODE=true and credentials provided', () => {\n      const mockIsMockModeDisabled = isMockModeDisabled as jest.MockedFunction<typeof isMockModeDisabled>;\n      const mockShouldUseMockMode = shouldUseMockMode as jest.MockedFunction<typeof shouldUseMockMode>;\n      \n      mockIsMockModeDisabled.mockReturnValue(true);\n      mockShouldUseMockMode.mockReturnValue(false);\n      \n      const result = shouldUseMockMode(true); // With credentials\n      expect(result).toBe(false);\n    });\n\n    it('should use mock mode in production without credentials', () => {\n      const mockShouldUseMockMode = shouldUseMockMode as jest.MockedFunction<typeof shouldUseMockMode>;\n      \n      mockShouldUseMockMode.mockReturnValue(true);\n      \n      const result = shouldUseMockMode(false); // No credentials\n      expect(result).toBe(true);\n    });\n  });\n});\n\ndescribe('API Error Handling Tests', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('API Error Classes', () => {\n    it('should create PoloniexConnectionError correctly', () => {\n      const error = new PoloniexConnectionError('Network timeout');\n      expect(error.name).toBe('PoloniexConnectionError');\n      expect(error.message).toBe('Network timeout');\n      expect(error instanceof Error).toBe(true);\n    });\n\n    it('should create PoloniexAuthenticationError correctly', () => {\n      const error = new PoloniexAuthenticationError('Invalid API key');\n      expect(error.name).toBe('PoloniexAuthenticationError');\n      expect(error.message).toBe('Invalid API key');\n      expect(error instanceof Error).toBe(true);\n    });\n\n    it('should create PoloniexAPIError with status code', () => {\n      const error = new PoloniexAPIError('Not found', 'NOT_FOUND', 404);\n      expect(error.name).toBe('PoloniexAPIError');\n      expect(error.message).toBe('Not found');\n      expect(error.code).toBe('NOT_FOUND');\n      expect(error.statusCode).toBe(404);\n    });\n  });\n\n  describe('APIErrorBoundary Component', () => {\n    it('should render connection error with retry button', () => {\n      const mockRetry = vi.fn();\n      const error = new PoloniexConnectionError('Network timeout');\n      \n      render(\n        <APIErrorBoundary \n          error={error} \n          onRetry={mockRetry} \n          context=\"Market Data\"\n        />\n      );\n      \n      expect(screen.getByText('Connection Error')).toBeInTheDocument();\n      expect(screen.getByText(/Unable to connect to the trading platform/)).toBeInTheDocument();\n      expect(screen.getByText('Try Again')).toBeInTheDocument();\n      \n      fireEvent.click(screen.getByText('Try Again'));\n      expect(mockRetry).toHaveBeenCalled();\n    });\n\n    it('should render authentication error with settings button', () => {\n      const error = new PoloniexAuthenticationError('Invalid API credentials');\n      \n      // Mock window.location for the settings redirect test\n      const mockLocation = { href: '' };\n      Object.defineProperty(window, 'location', {\n        value: mockLocation,\n        writable: true,\n      });\n      \n      render(\n        <APIErrorBoundary \n          error={error} \n          context=\"Account Balance\"\n        />\n      );\n      \n      expect(screen.getByText('Authentication Required')).toBeInTheDocument();\n      expect(screen.getByText(/API credentials are missing or invalid/)).toBeInTheDocument();\n      expect(screen.getByText('Go to Settings')).toBeInTheDocument();\n      \n      fireEvent.click(screen.getByText('Go to Settings'));\n      expect(mockLocation.href).toBe('/settings');\n    });\n\n    it('should render API error with proper guidance', () => {\n      const error = new PoloniexAPIError('Rate limit exceeded', 'RATE_LIMIT', 429);\n      \n      render(\n        <APIErrorBoundary \n          error={error} \n          context=\"Trading\"\n        />\n      );\n      \n      expect(screen.getByText('API Error')).toBeInTheDocument();\n      expect(screen.getByText(/Rate limit exceeded/)).toBeInTheDocument();\n      expect(screen.getByText('API Documentation')).toBeInTheDocument();\n    });\n\n    it('should show context-specific error message', () => {\n      const error = new PoloniexConnectionError('Connection failed');\n      \n      render(\n        <APIErrorBoundary \n          error={error} \n          context=\"Portfolio Data\"\n        />\n      );\n      \n      expect(screen.getByText(/Portfolio Data operation failed/)).toBeInTheDocument();\n    });\n  });\n});\n\ndescribe('Production Environment Tests', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    // Mock production environment\n    Object.defineProperty(window, 'location', {\n      value: { hostname: 'poloniex-trading-platform.vercel.app' },\n      writable: true,\n    });\n  });\n\n  it('should not fall back to mock data on API failures in production', async () => {\n    const mockPoloniexApi = poloniexApi as jest.Mocked<typeof poloniexApi>;\n    \n    // Mock API to throw connection error\n    mockPoloniexApi.getMarketData.mockRejectedValue(\n      new PoloniexConnectionError('Network error')\n    );\n    \n    // Should throw error, not return mock data\n    await expect(poloniexApi.getMarketData('BTC-USDT')).rejects.toThrow('Network error');\n  });\n\n  it('should handle authentication errors without falling back', async () => {\n    const mockPoloniexApi = poloniexApi as jest.Mocked<typeof poloniexApi>;\n    \n    // Mock API to throw auth error\n    mockPoloniexApi.getAccountBalance.mockRejectedValue(\n      new PoloniexAuthenticationError('Invalid API key')\n    );\n    \n    // Should throw error, not return mock data\n    await expect(poloniexApi.getAccountBalance()).rejects.toThrow('Invalid API key');\n  });\n});\n\ndescribe('Integration Tests', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should load credentials and update mock mode correctly', () => {\n    const mockShouldUseMockMode = shouldUseMockMode as jest.MockedFunction<typeof shouldUseMockMode>;\n    const mockPoloniexApi = poloniexApi as jest.Mocked<typeof poloniexApi>;\n    \n    mockShouldUseMockMode.mockReturnValue(false); // Has credentials, not in mock mode\n    \n    poloniexApi.loadCredentials();\n    \n    expect(mockPoloniexApi.loadCredentials).toHaveBeenCalled();\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'webSocketService' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'modelRecalibration' is defined but never used.","line":10,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport App from '@/App';\nimport { AppProviders } from '@/context/AppProviders';\nimport { webSocketService } from '@/services/websocketService';\nimport { LiveDataService } from '@/services/advancedLiveData';\nimport { default as mlTrading } from '@/ml/mlTrading';\nimport { default as dqnTrading } from '@/ml/dqnTrading';\nimport { default as modelRecalibration } from '@/ml/modelRecalibration';\n\n// Mock dependencies\nvi.mock('@/services/websocketService');\nvi.mock('@/services/advancedLiveData');\nvi.mock('@/ml/mlTrading');\nvi.mock('@/ml/dqnTrading');\nvi.mock('@/ml/modelRecalibration');\n\ndescribe('Integration Tests', () => {\n  beforeEach(() => {\n    // Reset mocks\n    vi.clearAllMocks();\n    \n    // Mock ML trading methods\n    vi.mocked(mlTrading.trainMLModel).mockResolvedValue({\n      id: 'test-model',\n      name: 'Test Model',\n      description: 'Test ML model',\n      config: {\n        modelType: 'neuralnetwork',\n        featureSet: 'technical',\n        predictionTarget: 'price_direction',\n        timeHorizon: 5\n      },\n      performance: {\n        accuracy: 0.75,\n        precision: 0.8,\n        recall: 0.7,\n        f1Score: 0.75,\n        trainingSamples: 1000,\n        validationSamples: 200\n      },\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      lastTrainedAt: Date.now(),\n      status: 'ready'\n    });\n    \n    vi.mocked(dqnTrading.trainDQNModel).mockResolvedValue({\n      id: 'test-agent',\n      name: 'Test DQN Agent',\n      description: 'Test DQN agent',\n      config: {\n        stateSize: 4,\n        actionSize: 3,\n        learningRate: 0.001,\n        memorySize: 10000,\n        batchSize: 32\n      },\n      performance: {\n        averageReward: 100,\n        maxReward: 200,\n        episodeLength: 1000\n      },\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      lastTrainedAt: Date.now(),\n      status: 'ready'\n    });\n    \n    // Mock LiveDataService\n    if (LiveDataService.prototype.fetchOrderBook) {\n      vi.mocked(LiveDataService.prototype.fetchOrderBook).mockResolvedValue({\n        asks: [],\n        bids: []\n      });\n    }\n    \n    // Mock additional ML methods\n    vi.mocked(mlTrading.predictWithMLModel).mockResolvedValue([\n      { prediction: 1, confidence: 0.8, timestamp: Date.now(), symbol: 'BTC_USDT' }\n    ]);\n    \n    vi.mocked(dqnTrading.getDQNActions).mockResolvedValue([\n      { action: 'buy', confidence: 0.7 }\n    ]);\n  });\n  \n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n  \n  it('should render main application components', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for app to load\n    await waitFor(() => {\n      expect(screen.getByText(/Poloniex Trading Platform/i)).toBeInTheDocument();\n    });\n    \n    // Check for main navigation elements\n    expect(screen.getByText(/Dashboard/i)).toBeInTheDocument();\n    expect(screen.getByText(/Trading/i)).toBeInTheDocument();\n    expect(screen.getByText(/Strategies/i)).toBeInTheDocument();\n    expect(screen.getByText(/Settings/i)).toBeInTheDocument();\n  });\n  \n  it('should navigate between main sections', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for app to load\n    await waitFor(() => {\n      expect(screen.getByText(/Poloniex Trading Platform/i)).toBeInTheDocument();\n    });\n    \n    // Navigate to Trading\n    fireEvent.click(screen.getByText(/Trading/i));\n    await waitFor(() => {\n      expect(screen.getByText(/Live Trading/i)).toBeInTheDocument();\n    });\n    \n    // Navigate to Strategies\n    fireEvent.click(screen.getByText(/Strategies/i));\n    await waitFor(() => {\n      expect(screen.getByText(/Strategy Builder/i)).toBeInTheDocument();\n    });\n    \n    // Navigate to Settings\n    fireEvent.click(screen.getByText(/Settings/i));\n    await waitFor(() => {\n      expect(screen.getByText(/Trading Settings/i)).toBeInTheDocument();\n    });\n  });\n  \n  it('should connect to WebSocket service on startup', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for app to load and verify WebSocket connection\n    await waitFor(() => {\n      expect(WebSocketService.prototype.connect).toHaveBeenCalled();\n    });\n  });\n  \n  it('should start live data service on startup', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for app to load and verify LiveDataService start\n    await waitFor(() => {\n      expect(LiveDataService.prototype.start).toHaveBeenCalled();\n    });\n  });\n  \n  it('should handle ML trading predictions', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for ML trading panel to load\n    await waitFor(() => {\n      expect(screen.getByText(/ML Trading/i)).toBeInTheDocument();\n    });\n    \n    // Trigger prediction (assuming there's a \"Get Prediction\" button)\n    const predictButton = screen.getByText(/Get Prediction/i);\n    fireEvent.click(predictButton);\n    \n    // Verify ML prediction was called\n    await waitFor(() => {\n      expect(mlTrading.predictWithMLModel).toHaveBeenCalled();\n    });\n  });\n  \n  it('should handle DQN trading actions', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for DQN trading panel to load\n    await waitFor(() => {\n      expect(screen.getByText(/DQN Trading/i)).toBeInTheDocument();\n    });\n    \n    // Trigger action (assuming there's a \"Get Action\" button)\n    const actionButton = screen.getByText(/Get Action/i);\n    fireEvent.click(actionButton);\n    \n    // Verify DQN action was called\n    await waitFor(() => {\n      expect(dqnTrading.getDQNActions).toHaveBeenCalled();\n    });\n  });\n  \n  it('should handle model recalibration', async () => {\n    render(\n      <AppProviders>\n        <App />\n      </AppProviders>\n    );\n    \n    // Wait for recalibration panel to load\n    await waitFor(() => {\n      expect(screen.getByText(/Model Recalibration/i)).toBeInTheDocument();\n    });\n    \n    // Trigger recalibration (assuming there's a \"Recalibrate\" button)\n    const recalibrateButton = screen.getByText(/Recalibrate/i);\n    fireEvent.click(recalibrateButton);\n    \n    // Verify recalibration was initiated\n    await waitFor(() => {\n      // Check for success message or other indicators\n      expect(screen.getByText(/Recalibration started/i)).toBeInTheDocument();\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/jwt-authentication.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/phase4-infrastructure.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'beforeEach' is defined but never used.","line":1,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'afterEach' is defined but never used.","line":1,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock all the dependencies\nvi.mock('@/services/websocketService');\nvi.mock('@/services/advancedLiveData');\nvi.mock('@/utils/chromeExtension');\nvi.mock('@/ml/mlTrading');\nvi.mock('@/ml/dqnTrading');\nvi.mock('@/ml/modelRecalibration');\nvi.mock('@/utils/strategyTester');\n\ndescribe('Phase 4 Testing Infrastructure', () => {\n  describe('Basic Testing Setup', () => {\n    it('should run tests successfully', () => {\n      expect(true).toBe(true);\n    });\n\n    it('should handle mock functions', () => {\n      const mockFn = vi.fn();\n      mockFn('test');\n      expect(mockFn).toHaveBeenCalledWith('test');\n    });\n\n    it('should render basic components', () => {\n      const TestComponent = () => <div data-testid=\"test\">Test Component</div>;\n      render(<TestComponent />);\n      expect(screen.getByTestId('test')).toBeInTheDocument();\n    });\n  });\n\n  describe('Mock Services Configuration', () => {\n    it('should have proper mock setup for services', () => {\n      // Just verify the mocks are set up - actual functionality will be tested elsewhere\n      expect(vi.isMockFunction(vi.mocked)).toBeDefined();\n    });\n  });\n\n  describe('Test Coverage Validation', () => {\n    it('should validate test coverage configuration exists', () => {\n      // This test validates that our test infrastructure is properly configured\n      // The actual coverage will be measured by Vitest\n      expect(process.env.NODE_ENV).toBeDefined();\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/phase5-features.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1317,1320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1317,1320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1737,1740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1737,1740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3229,3232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3229,3232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3272,3275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3272,3275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { openAITradingService } from '../services/openAIService';\nimport TradingInsights from '../components/TradingInsights';\nimport PWAInstallPrompt from '../components/PWAInstallPrompt';\n\n// Mock the OpenAI service\nvi.mock('../services/openAIService', () => ({\n  openAITradingService: {\n    generateTradingInsight: vi.fn(),\n    getConnectionStatus: vi.fn(() => 'mock'),\n    isReady: vi.fn(() => false)\n  }\n}));\n\ndescribe('Phase 5: Advanced Features', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('OpenAI Trading Insights', () => {\n    it('should render trading insights component', () => {\n      render(<TradingInsights />);\n      \n      expect(screen.getByText('AI Trading Insights')).toBeInTheDocument();\n      expect(screen.getByText('🧪 Mock')).toBeInTheDocument();\n    });\n\n    it('should generate insights when refresh button is clicked', async () => {\n      const mockInsight = {\n        type: 'analysis' as const,\n        title: 'BTC-USDT Analysis',\n        content: 'Bullish momentum detected',\n        confidence: 85,\n        timeframe: '24h',\n        createdAt: new Date()\n      };\n\n      (openAITradingService.generateTradingInsight as any).mockResolvedValue(mockInsight);\n\n      render(<TradingInsights />);\n      \n      const refreshButton = screen.getByTitle('Refresh insights');\n      fireEvent.click(refreshButton);\n\n      await waitFor(() => {\n        expect(openAITradingService.generateTradingInsight).toHaveBeenCalled();\n      });\n    });\n\n    it('should show GPT-4.1 connection status', () => {\n      (openAITradingService.getConnectionStatus as any).mockReturnValue('connected');\n      \n      render(<TradingInsights />);\n      \n      expect(screen.getByText('🤖 GPT-4.1')).toBeInTheDocument();\n    });\n\n    it('should expand to show custom query interface', () => {\n      render(<TradingInsights />);\n      \n      const expandButton = screen.getByText('Expand');\n      fireEvent.click(expandButton);\n      \n      expect(screen.getByPlaceholderText(/Ask AI about/)).toBeInTheDocument();\n      expect(screen.getByText('Ask')).toBeInTheDocument();\n    });\n  });\n\n  describe('PWA Install Prompt', () => {\n    beforeEach(() => {\n      // Clear localStorage\n      localStorage.clear();\n      \n      // Mock PWA-related APIs\n      Object.defineProperty(window, 'matchMedia', {\n        writable: true,\n        value: vi.fn().mockImplementation(query => ({\n          matches: false,\n          media: query,\n          onchange: null,\n          addListener: vi.fn(),\n          removeListener: vi.fn(),\n          addEventListener: vi.fn(),\n          removeEventListener: vi.fn(),\n          dispatchEvent: vi.fn(),\n        })),\n      });\n    });\n\n    it('should not render if dismissed', () => {\n      localStorage.setItem('pwa_install_dismissed', 'true');\n      \n      render(<PWAInstallPrompt />);\n      \n      expect(screen.queryByText('Install Poloniex Trading')).not.toBeInTheDocument();\n    });\n\n    it('should show install prompt when conditions are met', () => {\n      const mockEvent = new Event('beforeinstallprompt');\n      (mockEvent as any).prompt = vi.fn();\n      (mockEvent as any).userChoice = Promise.resolve({ outcome: 'accepted' });\n\n      render(<PWAInstallPrompt />);\n      \n      // Simulate beforeinstallprompt event\n      window.dispatchEvent(mockEvent);\n      \n      // Wait for the component to process the event\n      setTimeout(() => {\n        expect(screen.queryByText('Install Poloniex Trading')).toBeInTheDocument();\n      }, 100);\n    });\n  });\n\n  describe('Environment Debug Improvements', () => {\n    it('should remember dismissed state', () => {\n      // Test that dismissed state is persisted\n      localStorage.setItem('envDebug_dismissed', 'true');\n      \n      // This would need to be tested in an integration test with the actual component\n      expect(localStorage.getItem('envDebug_dismissed')).toBe('true');\n    });\n\n    it('should remember minimized state', () => {\n      localStorage.setItem('envDebug_minimized', 'true');\n      \n      expect(localStorage.getItem('envDebug_minimized')).toBe('true');\n    });\n  });\n\n  describe('Mobile PWA Features', () => {\n    it('should have manifest.json with correct properties', async () => {\n      // In a real test, you would fetch and validate the manifest\n      const expectedManifest = {\n        name: 'Poloniex Trading Platform',\n        short_name: 'Poloniex',\n        display: 'standalone',\n        theme_color: '#4a90e2'\n      };\n      \n      expect(expectedManifest.name).toBe('Poloniex Trading Platform');\n      expect(expectedManifest.display).toBe('standalone');\n    });\n\n    it('should register service worker', () => {\n      // Mock service worker registration\n      const mockServiceWorker = {\n        register: vi.fn().mockResolvedValue({ update: vi.fn() })\n      };\n      \n      Object.defineProperty(navigator, 'serviceWorker', {\n        value: mockServiceWorker,\n        writable: true\n      });\n      \n      expect(navigator.serviceWorker).toBeDefined();\n    });\n  });\n\n  describe('Mobile Responsiveness', () => {\n    it('should handle mobile viewport changes', () => {\n      // Test viewport meta tag\n      const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n      expect(viewportMeta?.getAttribute('content')).toContain('width=device-width');\n    });\n\n    it('should adapt layout for mobile screens', () => {\n      // Mock mobile screen size\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      // Test responsive classes would be applied\n      expect(window.innerWidth).toBe(375);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/phase5-realtime-dashboard.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":84,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2155,2158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2155,2158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":89,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2298,2301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2298,2301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":258,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":258,"endColumn":70},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":272,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":272,"endColumn":70},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":287,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":287,"endColumn":70},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":320,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":320,"endColumn":55},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":335,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":335,"endColumn":55}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport LiveTradingDashboard from '@/pages/LiveTradingDashboard';\nimport RealTimePortfolio from '@/components/dashboard/RealTimePortfolio';\nimport RealTimeAlerts from '@/components/dashboard/RealTimeAlerts';\nimport { TradingProvider } from '@/context/TradingContext';\nimport { WebSocketProvider } from '@/context/WebSocketContext';\nimport { SettingsProvider } from '@/context/SettingsContext';\n\n// Mock the WebSocket service\nvi.mock('@/services/websocketService', () => ({\n  useWebSocket: () => ({\n    connectionState: 'connected',\n    isMockMode: false,\n    isConnected: true,\n    on: vi.fn(),\n    off: vi.fn(),\n    connect: vi.fn(),\n    disconnect: vi.fn(),\n    subscribe: vi.fn(),\n    unsubscribe: vi.fn(),\n    send: vi.fn(),\n    getStats: vi.fn(() => ({\n      connectTime: Date.now(),\n      disconnectTime: null,\n      reconnectAttempts: 0,\n      totalDisconnects: 0\n    }))\n  })\n}));\n\n// Mock the trading context\nvi.mock('@/hooks/useTradingContext', () => ({\n  useTradingContext: () => ({\n    marketData: [\n      {\n        timestamp: Date.now(),\n        open: 50000,\n        high: 51000,\n        low: 49000,\n        close: 50500,\n        volume: 1000\n      }\n    ],\n    strategies: [\n      {\n        id: '1',\n        name: 'Test Strategy',\n        type: 'momentum',\n        isActive: true,\n        parameters: {\n          pair: 'BTC-USDT',\n          timeframe: '1h',\n          riskLevel: 'medium'\n        }\n      }\n    ],\n    activeStrategies: ['1'],\n    trades: [\n      {\n        id: '1',\n        pair: 'BTC-USDT',\n        side: 'buy',\n        amount: 0.001,\n        price: 50000,\n        timestamp: Date.now(),\n        status: 'filled'\n      }\n    ],\n    isMockMode: false,\n    accountBalance: {\n      totalAmount: '10000.00',\n      availableAmount: '8000.00',\n      unrealizedPnL: '200.00',\n      todayPnL: '150.00',\n      todayPnLPercentage: '1.5'\n    }\n  })\n}));\n\n// Mock Chart.js\nvi.mock('react-chartjs-2', () => ({\n  Line: ({ data, options }: any) => (\n    <div data-testid=\"line-chart\">\n      Chart: {data?.datasets?.[0]?.label || 'Unknown'}\n    </div>\n  ),\n  Bar: ({ data, options }: any) => (\n    <div data-testid=\"bar-chart\">\n      Chart: {data?.datasets?.[0]?.label || 'Unknown'}\n    </div>\n  )\n}));\n\n// Mock LiveDataDashboard\nvi.mock('@/components/dashboard/LiveDataDashboard', () => ({\n  default: () => <div data-testid=\"live-data-dashboard\">Live Data Dashboard</div>\n}));\n\nconst renderWithProviders = (component: React.ReactElement) => {\n  return render(\n    <BrowserRouter>\n      <SettingsProvider>\n        <WebSocketProvider>\n          <TradingProvider>\n            {component}\n          </TradingProvider>\n        </WebSocketProvider>\n      </SettingsProvider>\n    </BrowserRouter>\n  );\n};\n\ndescribe('Phase 5: Real-time WebSocket Trading Dashboard', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('LiveTradingDashboard', () => {\n    it('should render the live trading dashboard with all components', () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Check for main heading\n      expect(screen.getByText('Real-time Trading Dashboard')).toBeInTheDocument();\n      \n      // Check for connection status\n      expect(screen.getByText('Connected')).toBeInTheDocument();\n      \n      // Check for pair selector\n      expect(screen.getByDisplayValue('BTC-USDT')).toBeInTheDocument();\n      \n      // Check for live mode toggle\n      expect(screen.getByText('Start Live')).toBeInTheDocument();\n      \n      // Check for live data dashboard\n      expect(screen.getByTestId('live-data-dashboard')).toBeInTheDocument();\n    });\n\n    it('should toggle live mode when button is clicked', async () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      const liveButton = screen.getByText('Start Live');\n      expect(liveButton).toBeInTheDocument();\n      \n      fireEvent.click(liveButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Stop Live')).toBeInTheDocument();\n      });\n    });\n\n    it('should change selected trading pair', () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      const selector = screen.getByDisplayValue('BTC-USDT');\n      fireEvent.change(selector, { target: { value: 'ETH-USDT' } });\n      \n      expect(selector.value).toBe('ETH-USDT');\n    });\n\n    it('should display price chart when data is available', () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Initially should show waiting message\n      expect(screen.getByText('Start live mode to see real-time updates')).toBeInTheDocument();\n    });\n  });\n\n  describe('RealTimePortfolio', () => {\n    it('should render portfolio metrics correctly', () => {\n      renderWithProviders(<RealTimePortfolio />);\n      \n      // Check for portfolio cards\n      expect(screen.getByText('Total Portfolio')).toBeInTheDocument();\n      expect(screen.getByText('Today\\'s P&L')).toBeInTheDocument();\n      expect(screen.getByText('Unrealized P&L')).toBeInTheDocument();\n      expect(screen.getByText('Open Positions')).toBeInTheDocument();\n      \n      // Check for detailed metrics\n      expect(screen.getByText('Available Balance')).toBeInTheDocument();\n      expect(screen.getByText('Realized P&L')).toBeInTheDocument();\n      expect(screen.getByText('Total Equity')).toBeInTheDocument();\n    });\n\n    it('should display formatted currency values', () => {\n      renderWithProviders(<RealTimePortfolio />);\n      \n      // Should display formatted currency values\n      expect(screen.getByText(/\\$10,000\\.00/)).toBeInTheDocument();\n    });\n\n    it('should show live update status', () => {\n      renderWithProviders(<RealTimePortfolio />);\n      \n      expect(screen.getByText('Live updates active')).toBeInTheDocument();\n    });\n  });\n\n  describe('RealTimeAlerts', () => {\n    it('should render alerts component with header', () => {\n      renderWithProviders(<RealTimeAlerts />);\n      \n      expect(screen.getByText('Real-time Alerts')).toBeInTheDocument();\n      expect(screen.getByText('No alerts yet')).toBeInTheDocument();\n    });\n\n    it('should show sound toggle button', () => {\n      renderWithProviders(<RealTimeAlerts />);\n      \n      const soundButton = screen.getByTitle('Disable sound');\n      expect(soundButton).toBeInTheDocument();\n      \n      fireEvent.click(soundButton);\n      expect(screen.getByTitle('Enable sound')).toBeInTheDocument();\n    });\n\n    it('should show settings button and panel', () => {\n      renderWithProviders(<RealTimeAlerts />);\n      \n      const settingsButton = screen.getByTitle('Alert settings');\n      expect(settingsButton).toBeInTheDocument();\n      \n      fireEvent.click(settingsButton);\n      expect(screen.getByText('Alert Settings')).toBeInTheDocument();\n      expect(screen.getByText('Price change alerts')).toBeInTheDocument();\n    });\n\n    it('should handle alert configuration changes', () => {\n      renderWithProviders(<RealTimeAlerts />);\n      \n      // Open settings\n      fireEvent.click(screen.getByTitle('Alert settings'));\n      \n      // Find and toggle price change alerts\n      const priceChangeCheckbox = screen.getByRole('checkbox', { name: /price change alerts/i });\n      expect(priceChangeCheckbox).toBeChecked();\n      \n      fireEvent.click(priceChangeCheckbox);\n      expect(priceChangeCheckbox).not.toBeChecked();\n    });\n  });\n\n  describe('Integration with WebSocket Service', () => {\n    it('should handle connection state changes', () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Should show connected status\n      expect(screen.getByText('Connected')).toBeInTheDocument();\n    });\n\n    it('should handle market data updates', () => {\n      // This tests the integration with WebSocket service\n      const { useWebSocket } = require('@/services/websocketService');\n      const mockWebSocket = useWebSocket();\n      \n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Verify WebSocket methods are available\n      expect(mockWebSocket.on).toBeDefined();\n      expect(mockWebSocket.off).toBeDefined();\n      expect(mockWebSocket.isConnected).toBe(true);\n    });\n  });\n\n  describe('Real-time Features', () => {\n    it('should setup event listeners when live mode is enabled', async () => {\n      const { useWebSocket } = require('@/services/websocketService');\n      const mockWebSocket = useWebSocket();\n      \n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Start live mode\n      fireEvent.click(screen.getByText('Start Live'));\n      \n      await waitFor(() => {\n        expect(mockWebSocket.on).toHaveBeenCalledWith('marketData', expect.any(Function));\n        expect(mockWebSocket.on).toHaveBeenCalledWith('tradeExecuted', expect.any(Function));\n      });\n    });\n\n    it('should cleanup event listeners when component unmounts', () => {\n      const { useWebSocket } = require('@/services/websocketService');\n      const mockWebSocket = useWebSocket();\n      \n      const { unmount } = renderWithProviders(<LiveTradingDashboard />);\n      \n      // Start live mode to setup listeners\n      fireEvent.click(screen.getByText('Start Live'));\n      \n      unmount();\n      \n      // Verify cleanup was called\n      expect(mockWebSocket.off).toHaveBeenCalled();\n    });\n\n    it('should handle real-time price updates', () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // The chart should be ready to display real-time data\n      expect(screen.getByText('Real-time Price Movement')).toBeInTheDocument();\n    });\n  });\n\n  describe('Navigation and Routing', () => {\n    it('should be accessible via /dashboard/live route', () => {\n      // This would be tested in a full integration test\n      renderWithProviders(<LiveTradingDashboard />);\n      expect(screen.getByText('Real-time Trading Dashboard')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle WebSocket disconnection gracefully', () => {\n      // Mock disconnected state\n      vi.mocked(require('@/services/websocketService').useWebSocket).mockReturnValue({\n        connectionState: 'disconnected',\n        isMockMode: false,\n        isConnected: false,\n        on: vi.fn(),\n        off: vi.fn()\n      });\n\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      expect(screen.getByText('Disconnected')).toBeInTheDocument();\n    });\n\n    it('should handle mock mode appropriately', () => {\n      // Mock mock mode\n      vi.mocked(require('@/services/websocketService').useWebSocket).mockReturnValue({\n        connectionState: 'connected',\n        isMockMode: true,\n        isConnected: false,\n        on: vi.fn(),\n        off: vi.fn()\n      });\n\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Should show mock mode notice\n      expect(screen.getByText(/mock mode/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance', () => {\n    it('should limit the number of price history points', async () => {\n      renderWithProviders(<LiveTradingDashboard />);\n      \n      // Start live mode\n      fireEvent.click(screen.getByText('Start Live'));\n      \n      // This tests that the component properly limits data points for performance\n      // In a real test, we would simulate multiple data updates and verify the limit\n      expect(screen.getByText('Stop Live')).toBeInTheDocument();\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/quality-improvements.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/react-error-185-fix.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/state-management.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/tests/websocket-fix.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/trading/TradingModeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/trading/paper/PaperTradingEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/trading/tradingEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/types/backtest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/types/chrome.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[165,168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[165,168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[192,195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[192,195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[281,284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[281,284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[294,297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[294,297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[383,386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[383,386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[585,588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[585,588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[650,653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[650,653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[934,937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[934,937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[999,1002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[999,1002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1226,1229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1226,1229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1248,1251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1248,1251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1308,1311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1308,1311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1330,1333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1330,1333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1403,1406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1403,1406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1426,1429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1426,1429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Chrome extension API type definitions\ndeclare global {\n  interface Window {\n    chrome?: {\n      runtime?: {\n        id?: string;\n        sendMessage?: (message: any, callback?: (response: any) => void) => void;\n        onMessage?: {\n          addListener: (callback: (message: any, sender: any, sendResponse: any) => void) => void;\n          removeListener: (callback: (message: any, sender: any, sendResponse: any) => void) => void;\n        };\n      };\n      storage?: {\n        local: {\n          get: (keys: string | string[] | object | null, callback: (items: { [key: string]: any }) => void) => void;\n          set: (items: { [key: string]: any }, callback?: () => void) => void;\n          remove: (keys: string | string[], callback?: () => void) => void;\n          clear: (callback?: () => void) => void;\n        };\n        sync: {\n          get: (keys: string | string[] | object | null, callback: (items: { [key: string]: any }) => void) => void;\n          set: (items: { [key: string]: any }, callback?: () => void) => void;\n          remove: (keys: string | string[], callback?: () => void) => void;\n          clear: (callback?: () => void) => void;\n        };\n      };\n      tabs?: {\n        query: (queryInfo: any, callback: (tabs: any[]) => void) => void;\n        create: (createProperties: any, callback?: (tab: any) => void) => void;\n        update: (tabId: number, updateProperties: any, callback?: (tab?: any) => void) => void;\n      };\n    };\n  }\n}\n\nexport {};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/auth.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"fix":{"range":[3670,3719],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":18,"suggestions":[{"fix":{"range":[4892,4936],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import CryptoJS from 'crypto-js';\n\ninterface SignatureParams {\n  method: string;\n  path: string;\n  body?: Record<string, unknown> | string;\n  queryString?: string;\n  timestamp: number;\n  secret: string;\n}\n\ninterface AuthData {\n  accessToken: string;\n  refreshToken: string;\n  expiresIn: number;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    role: string;\n  };\n}\n\n/**\n * Generate HMAC-SHA256 signature for API authentication\n */\nexport function generateSignature({\n  method,\n  path,\n  body,\n  queryString,\n  timestamp,\n  secret\n}: SignatureParams): string {\n  // Create the string to sign\n  let signString = `${method}\\n${path}`;\n  \n  if (queryString) {\n    signString += `?${queryString}`;\n  }\n  \n  signString += `\\nsignTimestamp=${timestamp}`;\n  \n  if (body) {\n    signString += `\\n${JSON.stringify(body)}`;\n  }\n  \n  // Create HMAC SHA256 signature\n  const signature = CryptoJS.HmacSHA256(signString, secret).toString(CryptoJS.enc.Hex);\n  \n  return signature;\n}\n\n/**\n * Generate authentication headers for API requests\n */\nexport function generateAuthHeaders(\n  apiKey: string,\n  apiSecret: string,\n  method: string,\n  path: string,\n  body?: Record<string, unknown> | string,\n  queryString?: string\n): Record<string, string> {\n  const timestamp = Date.now();\n  \n  const signature = generateSignature({\n    method,\n    path,\n    body,\n    queryString,\n    timestamp,\n    secret: apiSecret\n  });\n  \n  return {\n    'API-Key': apiKey,\n    'API-Sign': signature,\n    'API-Timestamp': timestamp.toString(),\n    'Content-Type': 'application/json'\n  };\n}\n\n/**\n * Verify if a user is authenticated with JWT\n */\nexport function isAuthenticated(): boolean {\n  const token = getAccessToken();\n  if (!token) {\n    return false;\n  }\n  \n  // Check if token is expired\n  const expiry = localStorage.getItem('auth_expiry');\n  if (expiry) {\n    const expiryTime = parseInt(expiry, 10);\n    if (Date.now() > expiryTime) {\n      // Clear expired token\n      clearAuthData();\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n/**\n * Store authentication data from JWT login response\n */\nexport function storeAuthData(authData: AuthData): void {\n  const expiryTime = Date.now() + authData.expiresIn * 1000;\n  \n  localStorage.setItem('access_token', authData.accessToken);\n  localStorage.setItem('refresh_token', authData.refreshToken);\n  localStorage.setItem('auth_expiry', expiryTime.toString());\n  localStorage.setItem('user_data', JSON.stringify(authData.user));\n}\n\n/**\n * Store authentication data (legacy method for backward compatibility)\n */\nexport function storeAuthDataLegacy(token: string, expiresIn: number): void {\n  const expiryTime = Date.now() + expiresIn * 1000;\n  localStorage.setItem('auth_token', token);\n  localStorage.setItem('access_token', token);\n  localStorage.setItem('auth_expiry', expiryTime.toString());\n}\n\n/**\n * Clear authentication data\n */\nexport function clearAuthData(): void {\n  localStorage.removeItem('auth_token'); // Legacy\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('refresh_token');\n  localStorage.removeItem('auth_expiry');\n  localStorage.removeItem('user_data');\n}\n\n/**\n * Get access token\n */\nexport function getAccessToken(): string | null {\n  return localStorage.getItem('access_token') || localStorage.getItem('auth_token');\n}\n\n/**\n * Get refresh token\n */\nexport function getRefreshToken(): string | null {\n  return localStorage.getItem('refresh_token');\n}\n\n/**\n * Get stored user data\n */\nexport function getUserData(): unknown | null {\n  const userData = localStorage.getItem('user_data');\n  if (!userData) return null;\n  \n  try {\n    return JSON.parse(userData);\n  } catch (error) {\n    console.error('Error parsing user data:', error);\n    return null;\n  }\n}\n\n/**\n * Get authentication token (legacy method for backward compatibility)\n */\nexport function getAuthToken(): string | null {\n  if (!isAuthenticated()) {\n    return null;\n  }\n  \n  return getAccessToken();\n}\n\n/**\n * Get authorization header value\n */\nexport function getAuthHeader(): string | null {\n  const token = getAccessToken();\n  return token ? `Bearer ${token}` : null;\n}\n\n/**\n * Check if token needs refresh (expires in less than 5 minutes)\n */\nexport function shouldRefreshToken(): boolean {\n  const expiry = localStorage.getItem('auth_expiry');\n  if (!expiry) return false;\n  \n  const expiryTime = parseInt(expiry, 10);\n  const fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\n  \n  return Date.now() > (expiryTime - fiveMinutes);\n}\n\n/**\n * Decode JWT payload (without verification - for display purposes only)\n */\nexport function decodeJWTPayload(token: string): unknown | null {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) return null;\n    \n    const payload = parts[1];\n    const decoded = atob(payload.replace(/-/g, '+').replace(/_/g, '/'));\n    return JSON.parse(decoded);\n  } catch (error) {\n    console.error('Error decoding JWT:', error);\n    return null;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeExtension.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":22,"suggestions":[{"fix":{"range":[2766,2824],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":22,"suggestions":[{"fix":{"range":[3128,3180],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"fix":{"range":[3435,3482],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced Chrome extension utilities with improved security features\n\n/**\n * Extension message types for type safety\n */\nexport enum ExtensionMessageType {\n  GET_DATA = 'GET_DATA',\n  SET_DATA = 'SET_DATA',\n  EXECUTE_TRADE = 'EXECUTE_TRADE',\n  GET_ACCOUNT = 'GET_ACCOUNT',\n  AUTHENTICATE = 'AUTHENTICATE',\n  LOGOUT = 'LOGOUT',\n  ERROR = 'ERROR',\n  STATUS = 'STATUS'\n}\n\n/**\n * Extension message interface for type safety\n */\nexport interface ExtensionMessage {\n  type: ExtensionMessageType;\n  payload?: Record<string, unknown>;\n  timestamp: number;\n  requestId: string;\n  origin: string;\n}\n\n/**\n * Extension response interface for type safety\n */\nexport interface ExtensionResponse {\n  success: boolean;\n  data?: unknown;\n  error?: string;\n  timestamp: number;\n  requestId: string;\n}\n\n// Allowed origins for extension communication\nconst ALLOWED_ORIGINS = [\n  'chrome-extension://[extension-id]',\n  window.location.origin\n];\n\n// Extension security token stored in memory\nlet securityToken: string | null = null;\n\n/**\n * Generate a random request ID\n */\nconst generateRequestId = (): string => {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n};\n\n/**\n * Safely checks if Chrome extension API is available\n */\nexport const isChromeExtension = (): boolean => {\n  return typeof window !== 'undefined' && \n         typeof window.chrome !== 'undefined' && \n         typeof window.chrome.runtime !== 'undefined';\n};\n\n/**\n * Validate extension message origin\n * @param origin Message origin\n */\nconst validateOrigin = (origin: string): boolean => {\n  return ALLOWED_ORIGINS.includes(origin);\n};\n\n/**\n * Validate extension message structure\n * @param message Message to validate\n */\nconst validateMessage = (message: unknown): boolean => {\n  if (!message || typeof message !== 'object') return false;\n  const msg = message as Record<string, unknown>;\n  if (!Object.values(ExtensionMessageType).includes(msg.type as ExtensionMessageType)) return false;\n  if (!msg.timestamp || typeof msg.timestamp !== 'number') return false;\n  if (!msg.requestId || typeof msg.requestId !== 'string') return false;\n  if (!msg.origin || typeof msg.origin !== 'string') return false;\n  \n  return true;\n};\n\n/**\n * Initialize extension security\n * @param token Optional security token\n */\nexport const initExtensionSecurity = (token?: string): void => {\n  // Generate or use provided security token\n  securityToken = token || Math.random().toString(36).substring(2, 15);\n  \n  // Set up message listener with security checks\n  if (isChromeExtension()) {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      // Validate message origin\n      if (sender.origin && !validateOrigin(sender.origin)) {\n        console.error(`Invalid message origin: ${sender.origin}`);\n        sendResponse({\n          success: false,\n          error: 'Invalid message origin',\n          timestamp: Date.now(),\n          requestId: message.requestId || 'unknown'\n        });\n        return;\n      }\n      \n      // Validate message structure\n      if (!validateMessage(message)) {\n        console.error('Invalid message structure', message);\n        sendResponse({\n          success: false,\n          error: 'Invalid message structure',\n          timestamp: Date.now(),\n          requestId: message.requestId || 'unknown'\n        });\n        return;\n      }\n      \n      // Process message\n      console.log('Valid message received', message);\n      \n      // Return true to indicate async response\n      return true;\n    });\n  }\n};\n\n/**\n * Safely sends a message to Chrome extension with security features\n * @param type Message type\n * @param payload Message payload\n * @returns Promise that resolves with the response\n */\nexport const sendSecureMessage = (\n  type: ExtensionMessageType,\n  payload?: Record<string, unknown>\n): Promise<ExtensionResponse> => {\n  return new Promise((resolve, reject) => {\n    if (!isChromeExtension()) {\n      reject(new Error('Chrome extension API not available'));\n      return;\n    }\n    \n    // Create secure message\n    const requestId = generateRequestId();\n    const message: ExtensionMessage = {\n      type,\n      payload,\n      timestamp: Date.now(),\n      requestId,\n      origin: window.location.origin\n    };\n    \n    // Add security token if available\n    if (securityToken) {\n      message.payload = {\n        ...message.payload,\n        _securityToken: securityToken\n      };\n    }\n    \n    // Send message with timeout\n    const timeout = setTimeout(() => {\n      reject(new Error('Extension communication timeout'));\n    }, 10000);\n    \n    chrome.runtime.sendMessage(message, (response: ExtensionResponse) => {\n      clearTimeout(timeout);\n      \n      if (chrome.runtime.lastError) {\n        reject(new Error(chrome.runtime.lastError.message));\n        return;\n      }\n      \n      if (!response || !response.success) {\n        reject(new Error(response?.error || 'Unknown extension error'));\n        return;\n      }\n      \n      resolve(response);\n    });\n  });\n};\n\n/**\n * Get data from extension securely\n * @param key Data key\n * @returns Promise that resolves with the data\n */\nexport const getExtensionData = (key: string): Promise<unknown> => {\n  return sendSecureMessage(ExtensionMessageType.GET_DATA, { key })\n    .then(response => response.data);\n};\n\n/**\n * Set data in extension securely\n * @param key Data key\n * @param value Data value\n * @returns Promise that resolves when data is set\n */\nexport const setExtensionData = (key: string, value: unknown): Promise<void> => {\n  return sendSecureMessage(ExtensionMessageType.SET_DATA, { key, value })\n    .then(() => undefined);\n};\n\n/**\n * Execute trade through extension securely\n * @param tradeParams Trade parameters\n * @returns Promise that resolves with trade result\n */\nexport const executeExtensionTrade = (tradeParams: Record<string, unknown>): Promise<unknown> => {\n  return sendSecureMessage(ExtensionMessageType.EXECUTE_TRADE, tradeParams)\n    .then(response => response.data);\n};\n\n/**\n * Get account information from extension securely\n * @returns Promise that resolves with account information\n */\nexport const getExtensionAccount = (): Promise<unknown> => {\n  return sendSecureMessage(ExtensionMessageType.GET_ACCOUNT)\n    .then(response => response.data);\n};\n\n/**\n * Authenticate with extension securely\n * @param credentials Authentication credentials\n * @returns Promise that resolves with authentication result\n */\nexport const authenticateExtension = (credentials: Record<string, unknown>): Promise<unknown> => {\n  return sendSecureMessage(ExtensionMessageType.AUTHENTICATE, credentials)\n    .then(response => response.data);\n};\n\n/**\n * Logout from extension securely\n * @returns Promise that resolves when logout is complete\n */\nexport const logoutExtension = (): Promise<void> => {\n  return sendSecureMessage(ExtensionMessageType.LOGOUT)\n    .then(() => undefined);\n};\n\n/**\n * Get extension status securely\n * @returns Promise that resolves with extension status\n */\nexport const getExtensionStatus = (): Promise<unknown> => {\n  return sendSecureMessage(ExtensionMessageType.STATUS)\n    .then(response => response.data);\n};\n\nexport default {\n  isChromeExtension,\n  initExtensionSecurity,\n  sendSecureMessage,\n  getExtensionData,\n  setExtensionData,\n  executeExtensionTrade,\n  getExtensionAccount,\n  authenticateExtension,\n  logoutExtension,\n  getExtensionStatus,\n  ExtensionMessageType\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeExtension.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/utils/chromeExtension.tsx"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FuturesProvider } from '@/context/FuturesContext';\nimport { AuthProvider } from '@/context/AuthContext';\nimport { SettingsProvider } from '@/context/SettingsContext';\n\n// Root provider component that wraps the application with all necessary context providers\ninterface AppProvidersProps {\n  children: React.ReactNode;\n}\n\nconst AppProviders: React.FC<AppProvidersProps> = ({ children }) => {\n  return (\n    <AuthProvider>\n      <SettingsProvider>\n        <FuturesProvider>\n          {children}\n        </FuturesProvider>\n      </SettingsProvider>\n    </AuthProvider>\n  );\n};\n\nexport default AppProviders;\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeExtensionCheck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeMessaging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/chromeTabs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/enhancedBacktesting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2302,2305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2302,2305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'marketData' is defined but never used.","line":123,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trades' is assigned a value but never used.","line":125,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maxBalance' is assigned a value but never used.","line":127,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maxDrawdown' is assigned a value but never used.","line":128,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'equityCurve' is assigned a value but never used.","line":130,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'monthlyReturns' is assigned a value but never used.","line":135,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'position' is defined but never used.","line":176,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4168,4171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4168,4171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exitPrice' is defined but never used.","line":177,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exitTime' is defined but never used.","line":178,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exitReason' is defined but never used.","line":179,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trades' is defined but never used.","line":200,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'finalBalance' is defined but never used.","line":201,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maxDrawdown' is defined but never used.","line":202,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'equityCurve' is defined but never used.","line":203,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'monthlyReturns' is defined but never used.","line":204,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":19}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MarketData } from \"@/types\";\nimport { createRiskManager, RiskManager } from \"./riskManagement\";\n\n/**\n * Enhanced Backtesting Framework with Walk-Forward Analysis\n * Provides comprehensive strategy validation and optimization\n */\n\nexport interface BacktestConfig {\n  // Data settings\n  startDate: string;\n  endDate: string;\n  timeframe: string;\n  pair: string;\n\n  // Strategy settings\n  useRSI: boolean;\n  useMACD: boolean;\n  useBollingerBands: boolean;\n  useMovingAverages: boolean;\n  useStochastic: boolean;\n\n  // Indicator weights\n  indicatorWeights: {\n    rsi: number;\n    macd: number;\n    bb: number;\n    stochastic: number;\n    ma: number;\n  };\n\n  // Risk settings\n  initialBalance: number;\n  riskPerTrade: number;\n  maxLeverage: number;\n  useATRStops: boolean;\n  stopLossPercent: number;\n  takeProfitRatio: number;\n\n  // Backtesting settings\n  commission: number;\n  slippage: number;\n  confidenceThreshold: number;\n\n  // Walk-forward settings\n  useWalkForward: boolean;\n  trainingPeriod: number;\n  testingPeriod: number;\n  optimizationSteps: number;\n}\n\nexport interface Trade {\n  entryTime: number;\n  exitTime: number;\n  pair: string;\n  side: \"long\" | \"short\";\n  entryPrice: number;\n  exitPrice: number;\n  quantity: number;\n  pnl: number;\n  pnlPercent: number;\n  commission: number;\n  slippage: number;\n  netPnl: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  exitReason: \"stop_loss\" | \"take_profit\" | \"signal\" | \"end_of_data\";\n  confidence: number;\n}\n\nexport interface BacktestResults {\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number;\n  totalReturn: number;\n  totalReturnPercent: number;\n  averageWin: number;\n  averageLoss: number;\n  profitFactor: number;\n  maxDrawdown: number;\n  maxDrawdownPercent: number;\n  volatility: number;\n  sharpeRatio: number;\n  sortinoRatio: number;\n  calmarRatio: number;\n  averageTradeLength: number;\n  averageWinLength: number;\n  averageLossLength: number;\n  largestWin: number;\n  largestLoss: number;\n  consecutiveWins: number;\n  consecutiveLosses: number;\n  maxRisk: number;\n  averageRisk: number;\n  recoveryFactor: number;\n  trades: Trade[];\n  equityCurve: Array<{ time: number; balance: number; drawdown: number }>;\n  monthlyReturns: Array<{ month: string; return: number }>;\n  walkForwardResults?: any[];\n}\n\nexport class EnhancedBacktester {\n  private config: BacktestConfig;\n  private riskManager: RiskManager;\n\n  constructor(config: BacktestConfig) {\n    this.config = config;\n    this.riskManager = createRiskManager({\n      maxAccountRisk: config.riskPerTrade,\n      maxLeverage: config.maxLeverage,\n      useATRStops: config.useATRStops,\n      stopLossPercent: config.stopLossPercent,\n      takeProfitRatio: config.takeProfitRatio,\n    });\n  }\n\n  async runBacktest(marketData: MarketData[]): Promise<BacktestResults> {\n    return this.runSingleBacktest(marketData);\n  }\n\n  private async runSingleBacktest(\n    marketData: MarketData[]\n  ): Promise<BacktestResults> {\n    const trades: Trade[] = [];\n    const balance = this.config.initialBalance;\n    const maxBalance = balance;\n    const maxDrawdown = 0;\n\n    const equityCurve: Array<{\n      time: number;\n      balance: number;\n      drawdown: number;\n    }> = [];\n    const monthlyReturns: Array<{ month: string; return: number }> = [];\n\n    return {\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      winRate: 0,\n      totalReturn: 0,\n      totalReturnPercent: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      profitFactor: 0,\n      maxDrawdown: 0,\n      maxDrawdownPercent: 0,\n      volatility: 0,\n      sharpeRatio: 0,\n      sortinoRatio: 0,\n      calmarRatio: 0,\n      averageTradeLength: 0,\n      averageWinLength: 0,\n      averageLossLength: 0,\n      largestWin: 0,\n      largestLoss: 0,\n      consecutiveWins: 0,\n      consecutiveLosses: 0,\n      maxRisk: 0,\n      averageRisk: 0,\n      recoveryFactor: 0,\n      trades: [],\n      equityCurve: [],\n      monthlyReturns: [],\n    };\n  }\n\n  private runWalkForwardBacktest(\n    marketData: MarketData[]\n  ): Promise<BacktestResults> {\n    return this.runSingleBacktest(marketData);\n  }\n\n  private closePosition(\n    position: any,\n    exitPrice: number,\n    exitTime: number,\n    exitReason: Trade[\"exitReason\"]\n  ): Trade {\n    return {\n      entryTime: 0,\n      exitTime: 0,\n      pair: \"\",\n      side: \"long\",\n      entryPrice: 0,\n      exitPrice: 0,\n      quantity: 0,\n      pnl: 0,\n      pnlPercent: 0,\n      commission: 0,\n      slippage: 0,\n      netPnl: 0,\n      exitReason: \"signal\",\n      confidence: 0,\n    };\n  }\n\n  private calculateResults(\n    trades: Trade[],\n    finalBalance: number,\n    maxDrawdown: number,\n    equityCurve: Array<{ time: number; balance: number; drawdown: number }>,\n    monthlyReturns: Array<{ month: string; return: number }>\n  ): BacktestResults {\n    return this.getEmptyResults();\n  }\n\n  private getEmptyResults(): BacktestResults {\n    return {\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      winRate: 0,\n      totalReturn: 0,\n      totalReturnPercent: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      profitFactor: 0,\n      maxDrawdown: 0,\n      maxDrawdownPercent: 0,\n      volatility: 0,\n      sharpeRatio: 0,\n      sortinoRatio: 0,\n      calmarRatio: 0,\n      averageTradeLength: 0,\n      averageWinLength: 0,\n      averageLossLength: 0,\n      largestWin: 0,\n      largestLoss: 0,\n      consecutiveWins: 0,\n      consecutiveLosses: 0,\n      maxRisk: 0,\n      averageRisk: 0,\n      recoveryFactor: 0,\n      trades: [],\n      equityCurve: [],\n      monthlyReturns: [],\n    };\n  }\n}\n\nexport const DEFAULT_BACKTEST_CONFIG: BacktestConfig = {\n  startDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),\n  endDate: new Date().toISOString(),\n  timeframe: \"1h\",\n  pair: \"BTC-USDT\",\n  useRSI: true,\n  useMACD: true,\n  useBollingerBands: true,\n  useMovingAverages: true,\n  useStochastic: false,\n  indicatorWeights: {\n    rsi: 0.3,\n    macd: 0.3,\n    bb: 0.2,\n    stochastic: 0.1,\n    ma: 0.1,\n  },\n  initialBalance: 10000,\n  riskPerTrade: 2,\n  maxLeverage: 3,\n  useATRStops: true,\n  stopLossPercent: 2,\n  takeProfitRatio: 2,\n  commission: 0.1,\n  slippage: 0.05,\n  confidenceThreshold: 0.7,\n  useWalkForward: false,\n  trainingPeriod: 100,\n  testingPeriod: 30,\n  optimizationSteps: 50,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[623,626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[623,626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9239,9242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9239,9242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":397,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10349,10352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10349,10352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":397,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10367,10370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10367,10370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":400,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10448,10451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10448,10451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":22,"suggestions":[{"fix":{"range":[12224,12281],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":471,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":471,"endColumn":22,"suggestions":[{"fix":{"range":[12413,12453],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":474,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":474,"endColumn":22,"suggestions":[{"fix":{"range":[12508,12553],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":477,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":477,"endColumn":21,"suggestions":[{"fix":{"range":[12610,12656],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":480,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":480,"endColumn":21,"suggestions":[{"fix":{"range":[12710,12753],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'retryError' is defined but never used.","line":497,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":497,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":511,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":511,"endColumn":17,"suggestions":[{"fix":{"range":[13503,13565],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":655,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17836,17839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17836,17839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":670,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":670,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18175,18178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18175,18178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":671,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":671,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18216,18219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18216,18219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":685,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":685,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18628,18631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18628,18631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":687,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":687,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18733,18736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18733,18736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":783,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21093,21096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21093,21096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":783,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21111,21114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21111,21114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":793,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":793,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21338,21341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21338,21341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":795,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":795,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21462,21465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21462,21465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":804,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":804,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21709,21712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21709,21712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":813,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":813,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21912,21915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21912,21915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":816,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":816,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22005,22008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22005,22008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Enhanced Error Handling and Graceful Degradation System\n * Provides comprehensive error recovery, circuit breakers, and fallback mechanisms\n */\n\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\nexport enum ErrorCategory {\n  NETWORK = 'network',\n  API = 'api',\n  AUTHENTICATION = 'authentication',\n  VALIDATION = 'validation',\n  TRADING = 'trading',\n  SYSTEM = 'system',\n  USER = 'user'\n}\n\nexport interface ErrorContext {\n  component: string;\n  action: string;\n  userId?: string;\n  sessionId?: string;\n  metadata?: Record<string, any>;\n  timestamp: number;\n  userAgent: string;\n  url: string;\n}\n\nexport interface ErrorInfo {\n  id: string;\n  message: string;\n  severity: ErrorSeverity;\n  category: ErrorCategory;\n  context: ErrorContext;\n  stack?: string;\n  originalError?: Error;\n  retryCount: number;\n  maxRetries: number;\n  isRecoverable: boolean;\n  recoveryActions: string[];\n}\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  resetTimeout: number;\n  monitoringPeriod: number;\n  minimumRequests: number;\n}\n\nexport interface RetryConfig {\n  maxAttempts: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffMultiplier: number;\n  retryableErrors: string[];\n}\n\nexport interface FallbackConfig {\n  enableMockData: boolean;\n  enableCachedData: boolean;\n  enableReducedFunctionality: boolean;\n  gracefulDegradation: boolean;\n}\n\nexport class EnhancedError extends Error {\n  public readonly id: string;\n  public readonly severity: ErrorSeverity;\n  public readonly category: ErrorCategory;\n  public readonly context: ErrorContext;\n  public readonly isRecoverable: boolean;\n  public readonly recoveryActions: string[];\n  public retryCount: number = 0;\n  public maxRetries: number;\n\n  constructor(\n    message: string,\n    severity: ErrorSeverity,\n    category: ErrorCategory,\n    context: ErrorContext,\n    isRecoverable: boolean = true,\n    recoveryActions: string[] = [],\n    maxRetries: number = 3\n  ) {\n    super(message);\n    this.name = 'EnhancedError';\n    this.id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    this.severity = severity;\n    this.category = category;\n    this.context = context;\n    this.isRecoverable = isRecoverable;\n    this.recoveryActions = recoveryActions;\n    this.maxRetries = maxRetries;\n  }\n\n  toJSON(): ErrorInfo {\n    return {\n      id: this.id,\n      message: this.message,\n      severity: this.severity,\n      category: this.category,\n      context: this.context,\n      stack: this.stack,\n      retryCount: this.retryCount,\n      maxRetries: this.maxRetries,\n      isRecoverable: this.isRecoverable,\n      recoveryActions: this.recoveryActions\n    };\n  }\n}\n\nexport class CircuitBreaker {\n  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED';\n  private failureCount = 0;\n  private successCount = 0;\n  private lastFailureTime = 0;\n  private requestCount = 0;\n  private config: CircuitBreakerConfig;\n\n  constructor(config: CircuitBreakerConfig) {\n    this.config = config;\n  }\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime >= this.config.resetTimeout) {\n        this.state = 'HALF_OPEN';\n        this.successCount = 0;\n      } else {\n        throw new EnhancedError(\n          'Circuit breaker is OPEN',\n          ErrorSeverity.HIGH,\n          ErrorCategory.SYSTEM,\n          this.createContext('circuit_breaker'),\n          false,\n          ['Wait for circuit breaker to reset']\n        );\n      }\n    }\n\n    this.requestCount++;\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failureCount = 0;\n    if (this.state === 'HALF_OPEN') {\n      this.successCount++;\n      if (this.successCount >= 3) { // Require multiple successes to close\n        this.state = 'CLOSED';\n      }\n    }\n  }\n\n  private onFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.requestCount >= this.config.minimumRequests && \n        this.getFailureRate() >= this.config.failureThreshold) {\n      this.state = 'OPEN';\n    }\n  }\n\n  private getFailureRate(): number {\n    return this.failureCount / this.requestCount;\n  }\n\n  private createContext(action: string): ErrorContext {\n    return {\n      component: 'circuit_breaker',\n      action,\n      timestamp: Date.now(),\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n      url: typeof window !== 'undefined' ? window.location.href : 'unknown'\n    };\n  }\n\n  getState(): string {\n    return this.state;\n  }\n\n  getMetrics() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      successCount: this.successCount,\n      requestCount: this.requestCount,\n      failureRate: this.getFailureRate()\n    };\n  }\n}\n\nexport class ErrorHandler {\n  private errors: ErrorInfo[] = [];\n  private circuitBreakers: Map<string, CircuitBreaker> = new Map();\n  private retryConfigs: Map<string, RetryConfig> = new Map();\n  private fallbackConfig: FallbackConfig;\n  private errorListeners: Set<(error: ErrorInfo) => void> = new Set();\n  private maxErrorHistory = 1000;\n\n  constructor(fallbackConfig?: Partial<FallbackConfig>) {\n    this.fallbackConfig = {\n      enableMockData: true,\n      enableCachedData: true,\n      enableReducedFunctionality: true,\n      gracefulDegradation: true,\n      ...fallbackConfig\n    };\n\n    this.setupDefaultConfigs();\n    this.setupGlobalErrorHandling();\n  }\n\n  /**\n   * Handle an error with recovery attempts\n   */\n  async handleError<T>(\n    error: Error | EnhancedError,\n    context: Partial<ErrorContext>,\n    operation?: () => Promise<T>\n  ): Promise<T | null> {\n    const enhancedError = this.enhanceError(error, context);\n    this.logError(enhancedError);\n\n    // Attempt recovery if the error is recoverable and we have an operation\n    if (enhancedError.isRecoverable && operation && enhancedError.retryCount < enhancedError.maxRetries) {\n      return this.attemptRecovery(enhancedError, operation);\n    }\n\n    // Apply fallback strategies\n    return this.applyFallback(enhancedError);\n  }\n\n  /**\n   * Create a circuit breaker for a specific operation\n   */\n  createCircuitBreaker(name: string, config?: Partial<CircuitBreakerConfig>): CircuitBreaker {\n    const defaultConfig: CircuitBreakerConfig = {\n      failureThreshold: 0.5,\n      resetTimeout: 60000,\n      monitoringPeriod: 10000,\n      minimumRequests: 5\n    };\n\n    const circuitBreaker = new CircuitBreaker({ ...defaultConfig, ...config });\n    this.circuitBreakers.set(name, circuitBreaker);\n    return circuitBreaker;\n  }\n\n  /**\n   * Get circuit breaker by name\n   */\n  getCircuitBreaker(name: string): CircuitBreaker | undefined {\n    return this.circuitBreakers.get(name);\n  }\n\n  /**\n   * Configure retry settings for an operation type\n   */\n  configureRetry(operationType: string, config: Partial<RetryConfig>): void {\n    const defaultConfig: RetryConfig = {\n      maxAttempts: 3,\n      baseDelay: 1000,\n      maxDelay: 30000,\n      backoffMultiplier: 2,\n      retryableErrors: ['NetworkError', 'TimeoutError', 'PoloniexConnectionError']\n    };\n\n    this.retryConfigs.set(operationType, { ...defaultConfig, ...config });\n  }\n\n  /**\n   * Execute operation with retry logic\n   */\n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    operationType: string,\n    context: Partial<ErrorContext>\n  ): Promise<T> {\n    const retryConfig = this.retryConfigs.get(operationType) || this.retryConfigs.get('default')!;\n    let lastError: Error;\n\n    for (let attempt = 1; attempt <= retryConfig.maxAttempts; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error as Error;\n        \n        // Check if error is retryable\n        if (!this.isRetryableError(error as Error, retryConfig.retryableErrors)) {\n          throw error;\n        }\n\n        // Don't retry on last attempt\n        if (attempt === retryConfig.maxAttempts) {\n          break;\n        }\n\n        // Calculate delay with exponential backoff\n        const delay = Math.min(\n          retryConfig.baseDelay * Math.pow(retryConfig.backoffMultiplier, attempt - 1),\n          retryConfig.maxDelay\n        );\n\n        await this.sleep(delay);\n      }\n    }\n\n    // All retries failed\n    throw this.enhanceError(lastError!, {\n      ...context,\n      action: `${context.action}_retry_exhausted`,\n      metadata: { attempts: retryConfig.maxAttempts }\n    });\n  }\n\n  /**\n   * Add error listener\n   */\n  addErrorListener(listener: (error: ErrorInfo) => void): void {\n    this.errorListeners.add(listener);\n  }\n\n  /**\n   * Remove error listener\n   */\n  removeErrorListener(listener: (error: ErrorInfo) => void): void {\n    this.errorListeners.delete(listener);\n  }\n\n  /**\n   * Get error history\n   */\n  getErrorHistory(limit?: number): ErrorInfo[] {\n    const errors = this.errors.sort((a, b) => b.context.timestamp - a.context.timestamp);\n    return limit ? errors.slice(0, limit) : errors;\n  }\n\n  /**\n   * Get error statistics\n   */\n  getErrorStats(timeWindow?: number): any {\n    const cutoff = timeWindow ? Date.now() - timeWindow : 0;\n    const relevantErrors = this.errors.filter(e => e.context.timestamp >= cutoff);\n\n    const stats = {\n      total: relevantErrors.length,\n      bySeverity: {} as Record<string, number>,\n      byCategory: {} as Record<string, number>,\n      errorRate: 0,\n      mostCommon: '',\n      recoverableCount: 0\n    };\n\n    relevantErrors.forEach(error => {\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n      stats.byCategory[error.category] = (stats.byCategory[error.category] || 0) + 1;\n      if (error.isRecoverable) {\n        stats.recoverableCount++;\n      }\n    });\n\n    // Find most common error\n    const categoryEntries = Object.entries(stats.byCategory);\n    if (categoryEntries.length > 0) {\n      stats.mostCommon = categoryEntries.reduce((a, b) => a[1] > b[1] ? a : b)[0];\n    }\n\n    return stats;\n  }\n\n  /**\n   * Clear error history\n   */\n  clearErrorHistory(): void {\n    this.errors = [];\n  }\n\n  /**\n   * Create a safe wrapper for async operations\n   */\n  createSafeWrapper<T extends (...args: any[]) => Promise<any>>(\n    operation: T,\n    context: Partial<ErrorContext>,\n    fallbackValue?: any\n  ): T {\n    return (async (...args: Parameters<T>) => {\n      try {\n        return await operation(...args);\n      } catch (error) {\n        const handled = await this.handleError(error as Error, context);\n        return handled !== null ? handled : fallbackValue;\n      }\n    }) as T;\n  }\n\n  /**\n   * Enhanced error conversion\n   */\n  private enhanceError(error: Error | EnhancedError, context: Partial<ErrorContext>): EnhancedError {\n    if (error instanceof EnhancedError) {\n      return error;\n    }\n\n    const fullContext: ErrorContext = {\n      component: 'unknown',\n      action: 'unknown',\n      timestamp: Date.now(),\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n      url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n      ...context\n    };\n\n    // Determine error category and severity\n    const category = this.categorizeError(error);\n    const severity = this.determineSeverity(error, category);\n    const isRecoverable = this.isErrorRecoverable(error, category);\n    const recoveryActions = this.getRecoveryActions(error, category);\n\n    return new EnhancedError(\n      error.message,\n      severity,\n      category,\n      fullContext,\n      isRecoverable,\n      recoveryActions\n    );\n  }\n\n  /**\n   * Log error and notify listeners\n   */\n  private logError(error: EnhancedError): void {\n    const errorInfo = error.toJSON();\n    \n    // Add to history\n    this.errors.unshift(errorInfo);\n    \n    // Limit history size\n    if (this.errors.length > this.maxErrorHistory) {\n      this.errors = this.errors.slice(0, this.maxErrorHistory);\n    }\n\n    // Notify listeners\n    this.errorListeners.forEach(listener => {\n      try {\n        listener(errorInfo);\n      } catch (listenerError) {\n        console.error('Error in error listener:', listenerError);\n      }\n    });\n\n    // Console logging based on severity\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n        console.error('CRITICAL ERROR:', error);\n        break;\n      case ErrorSeverity.HIGH:\n        console.error('HIGH SEVERITY ERROR:', error);\n        break;\n      case ErrorSeverity.MEDIUM:\n        console.warn('MEDIUM SEVERITY ERROR:', error);\n        break;\n      case ErrorSeverity.LOW:\n        console.info('LOW SEVERITY ERROR:', error);\n        break;\n    }\n  }\n\n  /**\n   * Attempt error recovery\n   */\n  private async attemptRecovery<T>(error: EnhancedError, operation: () => Promise<T>): Promise<T | null> {\n    error.retryCount++;\n\n    // Wait before retry\n    const delay = Math.min(1000 * Math.pow(2, error.retryCount - 1), 30000);\n    await this.sleep(delay);\n\n    try {\n      return await operation();\n    } catch (retryError) {\n      if (error.retryCount < error.maxRetries) {\n        return this.attemptRecovery(error, operation);\n      } else {\n        // Max retries reached, apply fallback\n        return this.applyFallback(error);\n      }\n    }\n  }\n\n  /**\n   * Apply fallback strategies\n   */\n  private async applyFallback<T>(error: EnhancedError): Promise<T | null> {\n    console.warn(`Applying fallback for error: ${error.message}`);\n\n    // Try cached data first\n    if (this.fallbackConfig.enableCachedData) {\n      const cachedData = this.getCachedData(error.context.action);\n      if (cachedData) {\n        return cachedData;\n      }\n    }\n\n    // Try mock data\n    if (this.fallbackConfig.enableMockData) {\n      const mockData = this.getMockData(error.context.action);\n      if (mockData) {\n        return mockData;\n      }\n    }\n\n    // Graceful degradation\n    if (this.fallbackConfig.gracefulDegradation) {\n      return this.getReducedFunctionality(error.context.action);\n    }\n\n    return null;\n  }\n\n  /**\n   * Categorize error type\n   */\n  private categorizeError(error: Error): ErrorCategory {\n    const message = error.message.toLowerCase();\n    const name = error.name.toLowerCase();\n\n    if (name.includes('network') || message.includes('network') || message.includes('fetch')) {\n      return ErrorCategory.NETWORK;\n    }\n    if (name.includes('auth') || message.includes('unauthorized') || message.includes('forbidden')) {\n      return ErrorCategory.AUTHENTICATION;\n    }\n    if (message.includes('validation') || message.includes('invalid')) {\n      return ErrorCategory.VALIDATION;\n    }\n    if (message.includes('api') || message.includes('request')) {\n      return ErrorCategory.API;\n    }\n    if (message.includes('trading') || message.includes('order') || message.includes('position')) {\n      return ErrorCategory.TRADING;\n    }\n    if (message.includes('user') || message.includes('input')) {\n      return ErrorCategory.USER;\n    }\n\n    return ErrorCategory.SYSTEM;\n  }\n\n  /**\n   * Determine error severity\n   */\n  private determineSeverity(error: Error, category: ErrorCategory): ErrorSeverity {\n    // Critical errors\n    if (category === ErrorCategory.AUTHENTICATION || \n        error.message.includes('critical') ||\n        error.message.includes('fatal')) {\n      return ErrorSeverity.CRITICAL;\n    }\n\n    // High severity\n    if (category === ErrorCategory.TRADING ||\n        category === ErrorCategory.SYSTEM ||\n        error.message.includes('timeout')) {\n      return ErrorSeverity.HIGH;\n    }\n\n    // Medium severity\n    if (category === ErrorCategory.API ||\n        category === ErrorCategory.NETWORK) {\n      return ErrorSeverity.MEDIUM;\n    }\n\n    // Low severity\n    return ErrorSeverity.LOW;\n  }\n\n  /**\n   * Check if error is recoverable\n   */\n  private isErrorRecoverable(error: Error, category: ErrorCategory): boolean {\n    // Non-recoverable errors\n    if (category === ErrorCategory.AUTHENTICATION ||\n        category === ErrorCategory.VALIDATION ||\n        error.message.includes('permanent') ||\n        error.message.includes('invalid credentials')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Get recovery actions for error\n   */\n  private getRecoveryActions(error: Error, category: ErrorCategory): string[] {\n    const actions: string[] = [];\n\n    switch (category) {\n      case ErrorCategory.NETWORK:\n        actions.push('Check internet connection', 'Retry request', 'Use cached data');\n        break;\n      case ErrorCategory.API:\n        actions.push('Retry with exponential backoff', 'Check API status', 'Use fallback endpoint');\n        break;\n      case ErrorCategory.AUTHENTICATION:\n        actions.push('Refresh authentication token', 'Re-login', 'Check API credentials');\n        break;\n      case ErrorCategory.TRADING:\n        actions.push('Validate order parameters', 'Check account balance', 'Retry with adjusted parameters');\n        break;\n      case ErrorCategory.VALIDATION:\n        actions.push('Correct input validation', 'Check required fields');\n        break;\n      case ErrorCategory.SYSTEM:\n        actions.push('Restart service', 'Check system resources', 'Contact support');\n        break;\n      case ErrorCategory.USER:\n        actions.push('Show user-friendly error message', 'Provide guidance');\n        break;\n    }\n\n    return actions;\n  }\n\n  /**\n   * Check if error is retryable\n   */\n  private isRetryableError(error: Error, retryableErrors: string[]): boolean {\n    return retryableErrors.some(retryableError => \n      error.name.includes(retryableError) || \n      error.message.includes(retryableError)\n    );\n  }\n\n  /**\n   * Get cached data for fallback\n   */\n  private getCachedData(action: string): any {\n    if (typeof localStorage !== 'undefined') {\n      try {\n        const cached = localStorage.getItem(`fallback_${action}`);\n        return cached ? JSON.parse(cached) : null;\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get mock data for fallback\n   */\n  private getMockData(action: string): any {\n    const mockData: Record<string, any> = {\n      getMarketData: [\n        { timestamp: Date.now(), open: 50000, high: 51000, low: 49000, close: 50500, volume: 1000 }\n      ],\n      getAccountBalance: { totalAmount: \"10000\", availableAmount: \"8000\" },\n      getOpenPositions: { positions: [] }\n    };\n\n    return mockData[action] || null;\n  }\n\n  /**\n   * Get reduced functionality fallback\n   */\n  private getReducedFunctionality(action: string): any {\n    // Return minimal functionality or empty states\n    const reducedFunctionality: Record<string, any> = {\n      getMarketData: [],\n      getAccountBalance: { totalAmount: \"0\", availableAmount: \"0\" },\n      getOpenPositions: { positions: [] }\n    };\n\n    return reducedFunctionality[action] || null;\n  }\n\n  /**\n   * Setup default configurations\n   */\n  private setupDefaultConfigs(): void {\n    // Default retry config\n    this.configureRetry('default', {\n      maxAttempts: 3,\n      baseDelay: 1000,\n      maxDelay: 30000,\n      backoffMultiplier: 2,\n      retryableErrors: ['NetworkError', 'TimeoutError', 'ConnectionError']\n    });\n\n    // API-specific retry config\n    this.configureRetry('api', {\n      maxAttempts: 5,\n      baseDelay: 2000,\n      maxDelay: 60000,\n      backoffMultiplier: 1.5,\n      retryableErrors: ['NetworkError', 'TimeoutError', 'PoloniexConnectionError', 'RateLimitError']\n    });\n\n    // Trading-specific retry config\n    this.configureRetry('trading', {\n      maxAttempts: 2,\n      baseDelay: 500,\n      maxDelay: 5000,\n      backoffMultiplier: 2,\n      retryableErrors: ['NetworkError', 'TimeoutError']\n    });\n  }\n\n  /**\n   * Setup global error handling\n   */\n  private setupGlobalErrorHandling(): void {\n    // Handle unhandled promise rejections\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unhandledrejection', (event) => {\n        this.handleError(\n          new Error(event.reason),\n          {\n            component: 'global',\n            action: 'unhandled_promise_rejection',\n            metadata: { reason: event.reason }\n          }\n        );\n      });\n\n      // Handle global errors\n      window.addEventListener('error', (event) => {\n        this.handleError(\n          event.error || new Error(event.message),\n          {\n            component: 'global',\n            action: 'global_error',\n            metadata: {\n              filename: event.filename,\n              lineno: event.lineno,\n              colno: event.colno\n            }\n          }\n        );\n      });\n    }\n  }\n\n  /**\n   * Sleep utility\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Global error handler instance\n */\nexport const errorHandler = new ErrorHandler();\n\n/**\n * Utility decorators and functions\n */\nexport const errorUtils = {\n  /**\n   * Decorator for automatic error handling\n   */\n  withErrorHandling: <T extends (...args: any[]) => Promise<any>>(\n    target: T,\n    context: Partial<ErrorContext>\n  ): T => {\n    return errorHandler.createSafeWrapper(target, context);\n  },\n\n  /**\n   * Create error boundary component\n   */\n  createErrorBoundary: (fallbackComponent: any, context: Partial<ErrorContext>) => {\n    return class ErrorBoundary extends React.Component {\n      constructor(props: any) {\n        super(props);\n        this.state = { hasError: false, error: null };\n      }\n\n      static getDerivedStateFromError(error: Error) {\n        return { hasError: true, error };\n      }\n\n      componentDidCatch(error: Error, errorInfo: any) {\n        errorHandler.handleError(error, {\n          ...context,\n          action: 'component_error',\n          metadata: errorInfo\n        });\n      }\n\n      render() {\n        if ((this.state as any).hasError) {\n          return fallbackComponent;\n        }\n        return (this.props as any).children;\n      }\n    };\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/extensionErrorHandler.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":19,"suggestions":[{"fix":{"range":[3014,3226],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":19,"suggestions":[{"fix":{"range":[3233,3313],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":19,"suggestions":[{"fix":{"range":[3454,3643],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":19,"suggestions":[{"fix":{"range":[3790,3868],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":19,"suggestions":[{"fix":{"range":[5620,5782],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Handles browser extension communication errors\n * These errors occur when extensions try to communicate but channels close prematurely\n */\nexport class ExtensionErrorHandler {\n  private static instance: ExtensionErrorHandler;\n  private errorCount = 0;\n  private maxErrors = 10;\n  private suppressErrors = false;\n  \n  private constructor() {\n    this.setupErrorInterceptor();\n  }\n  \n  static getInstance(): ExtensionErrorHandler {\n    if (!ExtensionErrorHandler.instance) {\n      ExtensionErrorHandler.instance = new ExtensionErrorHandler();\n    }\n    return ExtensionErrorHandler.instance;\n  }\n  \n  private setupErrorInterceptor(): void {\n    // Override console.error to filter extension errors\n    const originalError = console.error;\n    \n    console.error = (...args: unknown[]) => {\n      const errorMessage = args[0]?.toString() || '';\n      \n      // Check if this is an extension communication error\n      if (this.isExtensionError(errorMessage)) {\n        this.handleExtensionError(errorMessage);\n        \n        // Suppress the error if we've seen too many\n        if (this.suppressErrors || this.errorCount > this.maxErrors) {\n          return;\n        }\n      }\n\n      // Check if this is a React production error\n      if (this.isReactProductionError(errorMessage)) {\n        this.handleExtensionError(errorMessage);\n        return; // Don't call original console.error for React production errors\n      }\n      \n      // Call original console.error for other errors\n      originalError.apply(console, args);\n    };\n    \n    // Also handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      if (this.isExtensionError(event.reason?.toString() || '')) {\n        event.preventDefault();\n        this.handleExtensionError(event.reason);\n      }\n    });\n  }\n  \n  private isExtensionError(message: string): boolean {\n    const extensionErrorPatterns = [\n      'listener indicated an asynchronous response',\n      'message channel closed',\n      'Extension context invalidated',\n      'Receiving end does not exist',\n      'Could not establish connection',\n      'chrome-extension'\n    ];\n    \n    return extensionErrorPatterns.some(pattern => \n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  }\n\n  private isReactProductionError(message: string): boolean {\n    // Detect minified React errors that should be handled differently\n    const reactErrorPatterns = [\n      'Minified React error #185',\n      'visit https://react.dev/errors/185',\n      'use the non-minified dev environment for full errors'\n    ];\n    \n    return reactErrorPatterns.some(pattern => \n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  }\n\n  private handleExtensionError(error: Error | string): void {\n    this.errorCount++;\n    \n    const errorMessage = typeof error === 'string' ? error : error.message || error.toString();\n    \n    // Handle React production errors differently\n    if (this.isReactProductionError(errorMessage)) {\n      console.warn(\n        'React Error #185 detected: This is likely caused by maximum update depth exceeded. ' +\n        'Check for infinite re-renders in component state updates or useEffect dependencies.'\n      );\n      console.warn('Initialization error detected - this may require a page refresh');\n      return;\n    }\n    \n    // Log once every 10 errors to avoid spam\n    if (this.errorCount === 1 || this.errorCount % 10 === 0) {\n      console.warn(\n        `Browser extension communication error (${this.errorCount} occurrences). ` +\n        'This is likely caused by a browser extension and can be safely ignored.'\n      );\n    }\n    \n    // Start suppressing after too many errors\n    if (this.errorCount > this.maxErrors * 2) {\n      this.suppressErrors = true;\n      console.warn('Suppressing further extension errors to reduce console noise.');\n    }\n  }\n  \n  reset(): void {\n    this.errorCount = 0;\n    this.suppressErrors = false;\n  }\n}\n\n/**\n * Browser compatibility and extension detection utilities\n */\nexport class BrowserCompatibility {\n  static isExtensionInstalled(extensionId?: string): boolean {\n    // Check for common extension indicators\n    if (extensionId && chrome?.runtime) {\n      try {\n        chrome.runtime.sendMessage(extensionId, { ping: true }, () => {\n          if (chrome.runtime.lastError) {\n            return false;\n          }\n          return true;\n        });\n      } catch {\n        return false;\n      }\n    }\n    \n    // Check for generic extension artifacts\n    return !!(\n      window.chrome?.runtime ||\n      (window as unknown as { browser?: { runtime?: unknown } }).browser?.runtime\n    );\n  }\n  \n  static detectConflictingExtensions(): string[] {\n    const conflicts: string[] = [];\n    \n    // Check for known conflicting extensions\n    const conflictingExtensions = [\n      { name: 'MetaMask', check: () => !!(window as unknown as { ethereum?: unknown }).ethereum },\n      { name: 'AdBlock', check: () => !!(window as unknown as { adblockDetected?: unknown }).adblockDetected },\n      { name: 'React DevTools', check: () => !!(window as unknown as { __REACT_DEVTOOLS_GLOBAL_HOOK__?: unknown }).__REACT_DEVTOOLS_GLOBAL_HOOK__ },\n    ];\n    \n    conflictingExtensions.forEach(ext => {\n      if (ext.check()) {\n        conflicts.push(ext.name);\n      }\n    });\n    \n    return conflicts;\n  }\n  \n  static setupExtensionCompatibility(): void {\n    // Initialize error handler\n    ExtensionErrorHandler.getInstance();\n    \n    // Detect and warn about conflicts\n    const conflicts = this.detectConflictingExtensions();\n    if (conflicts.length > 0) {\n      console.info(\n        `Detected browser extensions: ${conflicts.join(', ')}. ` +\n        'Some console errors may appear due to extension communication.'\n      );\n    }\n    \n    // Set up message channel protection\n    this.protectMessageChannels();\n  }\n  \n  private static protectMessageChannels(): void {\n    // Wrap postMessage to handle closed channels gracefully\n    const originalPostMessage = window.postMessage;\n    \n    window.postMessage = function(...args: Parameters<typeof originalPostMessage>) {\n      try {\n        return originalPostMessage.apply(window, args);\n      } catch (error) {\n        if (error?.toString().includes('message channel closed')) {\n          // Silently ignore\n          return;\n        }\n        throw error;\n      }\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/extensionHelper.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":545,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":545,"endColumn":18,"suggestions":[{"fix":{"range":[15526,15580],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nexport const createExtensionZip = async (): Promise<void> => {\n  try {\n    const zip = new JSZip();\n    \n    // Create manifest.json\n    zip.file(\"manifest.json\", JSON.stringify({\n      \"manifest_version\": 3,\n      \"name\": \"Poloniex Trading Extension\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Quick access to Poloniex trading platform and community chat\",\n      \"action\": {\n        \"default_popup\": \"popup.html\",\n        \"default_icon\": {\n          \"16\": \"icons/icon16.png\",\n          \"48\": \"icons/icon48.png\",\n          \"128\": \"icons/icon128.png\"\n        }\n      },\n      \"permissions\": [\n        \"storage\",\n        \"tabs\",\n        \"notifications\",\n        \"alarms\"\n      ],\n      \"host_permissions\": [\n        \"http://localhost:*/*\"\n      ],\n      \"background\": {\n        \"service_worker\": \"background.js\"\n      },\n      \"icons\": {\n        \"16\": \"icons/icon16.png\",\n        \"48\": \"icons/icon48.png\",\n        \"128\": \"icons/icon128.png\"\n      }\n    }, null, 2));\n    \n    // Create popup.html\n    zip.file(\"popup.html\", `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Poloniex Trading Extension</title>\n  <link rel=\"stylesheet\" href=\"popup.css\">\n</head>\n<body>\n  <div class=\"extension-container\">\n    <header>\n      <div class=\"logo\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-zap\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon></svg>\n        <h1>TradingBot</h1>\n      </div>\n      <div class=\"actions\">\n        <button id=\"settings-btn\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-settings\"><path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\"></path><circle cx=\"12\" cy=\"12\" r=\"3\"></circle></svg>\n        </button>\n      </div>\n    </header>\n\n    <div class=\"account-summary\">\n      <div class=\"balance\">\n        <span class=\"label\">Balance:</span>\n        <span class=\"value\">$12,345.67</span>\n      </div>\n      <div class=\"performance\">\n        <span class=\"profit\">+2.5% today</span>\n      </div>\n    </div>\n\n    <div class=\"quick-trade\">\n      <h2>Quick Trade</h2>\n      <div class=\"trading-pair\">\n        <select id=\"pair-select\">\n          <option value=\"BTC-USDT\">BTC-USDT</option>\n          <option value=\"ETH-USDT\">ETH-USDT</option>\n          <option value=\"SOL-USDT\">SOL-USDT</option>\n        </select>\n      </div>\n      <div class=\"trade-buttons\">\n        <button id=\"buy-btn\" class=\"buy\">Buy</button>\n        <button id=\"sell-btn\" class=\"sell\">Sell</button>\n      </div>\n    </div>\n\n    <div class=\"chat-section\">\n      <h2>Community Chat</h2>\n      <div class=\"chat-messages\" id=\"chat-messages\">\n        <div class=\"message\">\n          <span class=\"username\">trading_pro:</span>\n          <span class=\"text\">BTC looking bullish today!</span>\n        </div>\n        <div class=\"message\">\n          <span class=\"username\">crypto_newbie:</span>\n          <span class=\"text\">What's everyone's thoughts on ETH?</span>\n        </div>\n      </div>\n      <div class=\"chat-input\">\n        <input type=\"text\" id=\"message-input\" placeholder=\"Type your message...\">\n        <button id=\"send-btn\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-send\"><path d=\"m22 2-7 20-4-9-9-4Z\"></path><path d=\"M22 2 11 13\"></path></svg>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"footer\">\n      <button id=\"open-app-btn\" class=\"open-app\">Open Trading Platform</button>\n    </div>\n  </div>\n  <script src=\"popup.js\"></script>\n</body>\n</html>`);\n\n    // Create popup.css\n    zip.file(\"popup.css\", `* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\nbody {\n  width: 320px;\n  overflow: hidden;\n}\n\n.extension-container {\n  background-color: #f8f9fa;\n  color: #333;\n  display: flex;\n  flex-direction: column;\n  max-height: 500px;\n}\n\nheader {\n  background-color: #1e293b;\n  color: white;\n  padding: 12px 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n}\n\n.logo svg {\n  color: #3b82f6;\n  margin-right: 8px;\n}\n\n.logo h1 {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.actions button {\n  background: none;\n  border: none;\n  color: #a3a3a3; /* neutral-400 equivalent */\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n}\n\n.actions button:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n  color: white;\n}\n\n.account-summary {\n  background-color: #2d3748;\n  color: white;\n  padding: 12px 16px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.balance .label {\n  color: #a3a3a3; /* neutral-400 equivalent */\n  font-size: 12px;\n}\n\n.balance .value {\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.performance .profit {\n  color: #10b981;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.quick-trade, .chat-section {\n  padding: 12px 16px;\n  border-bottom: 1px solid #e5e5e5; /* neutral-200 equivalent */\n}\n\nh2 {\n  font-size: 14px;\n  font-weight: 600;\n  margin-bottom: 8px;\n  color: #525252; /* neutral-600 equivalent */\n}\n\n.trading-pair select {\n  width: 100%;\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #d4d4d4; /* neutral-300 equivalent */\n  margin-bottom: 8px;\n  background-color: white;\n}\n\n.trade-buttons {\n  display: flex;\n  gap: 8px;\n}\n\n.trade-buttons button {\n  flex: 1;\n  padding: 8px 0;\n  border: none;\n  border-radius: 4px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\nbutton.buy {\n  background-color: #10b981;\n  color: white;\n}\n\nbutton.buy:hover {\n  background-color: #059669;\n}\n\nbutton.sell {\n  background-color: #ef4444;\n  color: white;\n}\n\nbutton.sell:hover {\n  background-color: #dc2626;\n}\n\n.chat-messages {\n  max-height: 150px;\n  overflow-y: auto;\n  margin-bottom: 8px;\n  font-size: 12px;\n}\n\n.message {\n  padding: 4px 0;\n}\n\n.username {\n  font-weight: 600;\n  color: #525252; /* neutral-600 equivalent */\n}\n\n.chat-input {\n  display: flex;\n  gap: 8px;\n}\n\n.chat-input input {\n  flex: 1;\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #d4d4d4; /* neutral-300 equivalent */\n}\n\n.chat-input button {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 0 8px;\n  cursor: pointer;\n}\n\n.chat-input button:hover {\n  background-color: #2563eb;\n}\n\n.footer {\n  padding: 12px 16px;\n}\n\n.open-app {\n  width: 100%;\n  padding: 8px 0;\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.open-app:hover {\n  background-color: #2563eb;\n}`);\n\n    // Create popup.js\n    zip.file(\"popup.js\", `document.addEventListener('DOMContentLoaded', function() {\n  // DOM elements\n  const pairSelect = document.getElementById('pair-select');\n  const buyBtn = document.getElementById('buy-btn');\n  const sellBtn = document.getElementById('sell-btn');\n  const messageInput = document.getElementById('message-input');\n  const sendBtn = document.getElementById('send-btn');\n  const chatMessages = document.getElementById('chat-messages');\n  const openAppBtn = document.getElementById('open-app-btn');\n  const settingsBtn = document.getElementById('settings-btn');\n\n  // App URL - change this to your production URL when deployed\n  const appURL = 'http://localhost:5173';\n\n  // Mock username\n  const username = 'user_' + Math.floor(Math.random() * 1000);\n\n  // Open the main app\n  openAppBtn.addEventListener('click', function() {\n    chrome.tabs.create({ url: appURL });\n  });\n\n  // Settings button click handler\n  settingsBtn.addEventListener('click', function() {\n    chrome.tabs.create({ url: \\`\\${appURL}/settings\\` });\n  });\n\n  // Buy button click handler\n  buyBtn.addEventListener('click', function() {\n    const pair = pairSelect.value;\n    \n    // This would typically make an API call to your backend\n    console.log(\\`Buy order placed for \\${pair}\\`);\n    \n    // Show notification to user\n    showNotification(\\`Buy order placed for \\${pair}\\`);\n  });\n\n  // Sell button click handler\n  sellBtn.addEventListener('click', function() {\n    const pair = pairSelect.value;\n    \n    // This would typically make an API call to your backend\n    console.log(\\`Sell order placed for \\${pair}\\`);\n    \n    // Show notification to user\n    showNotification(\\`Sell order placed for \\${pair}\\`);\n  });\n\n  // Send chat message\n  sendBtn.addEventListener('click', sendMessage);\n  messageInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  });\n\n  function sendMessage() {\n    const message = messageInput.value.trim();\n    if (message) {\n      // For the demo, just add it to the UI\n      addMessageToChat(username, message);\n      messageInput.value = '';\n    }\n  }\n\n  function addMessageToChat(username, text) {\n    const messageElement = document.createElement('div');\n    messageElement.className = 'message';\n    messageElement.innerHTML = \\`\n      <span class=\"username\">\\${username}:</span>\n      <span class=\"text\">\\${text}</span>\n    \\`;\n    chatMessages.appendChild(messageElement);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  function showNotification(message) {\n    // Create a temporary notification element\n    const notification = document.createElement('div');\n    notification.className = 'notification';\n    notification.textContent = message;\n    notification.style.position = 'absolute';\n    notification.style.bottom = '10px';\n    notification.style.right = '10px';\n    notification.style.backgroundColor = '#4caf50';\n    notification.style.color = 'white';\n    notification.style.padding = '8px 12px';\n    notification.style.borderRadius = '4px';\n    notification.style.zIndex = '1000';\n    document.body.appendChild(notification);\n    \n    // Remove after 3 seconds\n    setTimeout(() => {\n      document.body.removeChild(notification);\n    }, 3000);\n  }\n\n  // Mock data for testing\n  setTimeout(() => {\n    addMessageToChat('system', 'Welcome to the trading chat!');\n  }, 1000);\n\n  setTimeout(() => {\n    addMessageToChat('market_bot', 'BTC just broke $52,000!');\n  }, 3000);\n});`);\n\n    // Create background.js\n    zip.file(\"background.js\", `// Background script for the trading extension\n\n// Listen for installation\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Poloniex Trading Extension installed');\n  \n  // Initialize storage with default settings\n  chrome.storage.sync.set({\n    notifications: true,\n    darkMode: false,\n    defaultPair: 'BTC-USDT'\n  });\n});\n\n// Handle messages from the popup or content scripts\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'PLACE_ORDER') {\n    // This would typically make an API call to your backend\n    console.log('Order request received:', request);\n    \n    // Simulate API call\n    setTimeout(() => {\n      sendResponse({ success: true, orderId: 'ord_' + Date.now() });\n    }, 1000);\n    \n    // Return true to indicate you want to send a response asynchronously\n    return true;\n  }\n  \n  if (request.type === 'GET_MARKET_DATA') {\n    // This would typically fetch data from your backend\n    fetchMarketData(request.pair)\n      .then(data => {\n        sendResponse({ success: true, data });\n      })\n      .catch(error => {\n        sendResponse({ success: false, error: error.message });\n      });\n    \n    return true;\n  }\n\n  if (request.type === 'CHECK_INSTALLATION') {\n    sendResponse({ installed: true });\n    return true;\n  }\n});\n\n// Mock function to fetch market data\nfunction fetchMarketData(pair) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        pair,\n        price: 51000 + Math.random() * 1000,\n        change: (Math.random() * 5 - 2.5).toFixed(2),\n        volume: Math.floor(1000 + Math.random() * 9000)\n      });\n    }, 500);\n  });\n}\n\n// Set up alarm to periodically check for important market events\nchrome.alarms.create('checkMarket', { periodInMinutes: 5 });\n\nchrome.alarms.onAlarm.addListener((alarm) => {\n  if (alarm.name === 'checkMarket') {\n    // Check for significant market movements or alerts\n    checkMarketConditions();\n  }\n});\n\n// Mock function to check market conditions\nfunction checkMarketConditions() {\n  // Simulate finding an important market event\n  if (Math.random() > 0.7) {\n    try {\n      // Show notification to user if found\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icons/icon48.png',\n        title: 'Market Alert',\n        message: 'Significant price movement detected in BTC-USDT!',\n        priority: 2\n      });\n    } catch (error) {\n      console.error('Failed to create notification:', error);\n    }\n  }\n}`);\n\n    // Create icons folder\n    const icons = zip.folder(\"icons\");\n    \n    // Create simple SVG icons (as data URLs)\n    const icon16 = `data:image/svg+xml;base64,${btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#3b82f6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon></svg>')}`;\n    const icon48 = `data:image/svg+xml;base64,${btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#3b82f6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon></svg>')}`;\n    const icon128 = `data:image/svg+xml;base64,${btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"128\" height=\"128\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#3b82f6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon></svg>')}`;\n    \n    // Fetch SVG data and convert to PNG\n    const fetchImage = async (dataURL: string) => {\n      const response = await fetch(dataURL);\n      return await response.blob();\n    };\n    \n    // Add icons to the zip file\n    const icon16Blob = await fetchImage(icon16);\n    const icon48Blob = await fetchImage(icon48);\n    const icon128Blob = await fetchImage(icon128);\n    \n    icons?.file(\"icon16.png\", icon16Blob);\n    icons?.file(\"icon48.png\", icon48Blob);\n    icons?.file(\"icon128.png\", icon128Blob);\n    \n    // Generate zip file\n    const content = await zip.generateAsync({ type: \"blob\" });\n    saveAs(content, \"poloniex-trading-extension.zip\");\n    \n    return Promise.resolve();\n  } catch (error) {\n    console.error(\"Error creating extension zip:\", error);\n    return Promise.reject(error);\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":79,"suggestions":[{"fix":{"range":[1390,1559],"text":""},"messageId":"removeMethodCall","desc":"Remove the console method call."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Logger utility for tracking application events and errors\n */\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  data?: unknown;\n}\n\n// Configure log levels that should be output\n// In production, you might want to set this to ['info', 'warn', 'error']\nconst activeLevels: LogLevel[] = ['debug', 'info', 'warn', 'error'];\n\nclass Logger {\n  private static instance: Logger;\n  private logs: LogEntry[] = [];\n  private maxLogs = 1000; // Maximum number of logs to keep in memory\n\n  private constructor() {}\n\n  public static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private createLogEntry(level: LogLevel, message: string, data?: unknown): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      data\n    };\n  }\n\n  private addLog(entry: LogEntry): void {\n    // Add the log to our in-memory store\n    this.logs.push(entry);\n    \n    // Trim logs if they exceed the maximum\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n    \n    // In a real application, you might want to send logs to a server or service\n    if (activeLevels.includes(entry.level)) {\n      const { timestamp, level, message, data } = entry;\n      console[level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log'](\n        `[${level.toUpperCase()}] ${timestamp} - ${message}`,\n        data ? data : ''\n      );\n    }\n  }\n\n  public debug(message: string, data?: unknown): void {\n    this.addLog(this.createLogEntry('debug', message, data));\n  }\n\n  public info(message: string, data?: unknown): void {\n    this.addLog(this.createLogEntry('info', message, data));\n  }\n\n  public warn(message: string, data?: unknown): void {\n    this.addLog(this.createLogEntry('warn', message, data));\n  }\n\n  public error(message: string, data?: unknown): void {\n    this.addLog(this.createLogEntry('error', message, data));\n  }\n\n  public getLogs(level?: LogLevel): LogEntry[] {\n    if (level) {\n      return this.logs.filter(log => log.level === level);\n    }\n    return this.logs;\n  }\n\n  public clearLogs(): void {\n    this.logs = [];\n  }\n}\n\nexport const logger = Logger.getInstance();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/mockDataGenerators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/monitoringSystem.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'success' is defined but never used.","line":258,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10128,10131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10128,10131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":443,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":443,"endColumn":18,"suggestions":[{"fix":{"range":[12948,13004],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":35,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":464,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":464,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":465,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":465,"endColumn":23,"suggestions":[{"fix":{"range":[13741,13783],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":473,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":473,"endColumn":18,"suggestions":[{"fix":{"range":[13986,14035],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":480,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":480,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14175,14178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14175,14178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":582,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":582,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17198,17201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17198,17201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":607,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":607,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17980,17983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17980,17983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pair' is defined but never used.","line":691,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":691,"endColumn":31}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from './logger';\nimport { MarketData } from '@/types';\nimport { PortfolioRisk } from './riskManagement';\n\n/**\n * Comprehensive Monitoring and Alerting System for Autonomous Trading\n * Provides real-time monitoring, alerts, and performance tracking\n */\n\nexport interface AlertRule {\n  id: string;\n  name: string;\n  type: AlertType;\n  condition: AlertCondition;\n  enabled: boolean;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  cooldownMinutes: number; // Minimum time between alerts\n  lastTriggered?: number;\n  notificationMethods: NotificationMethod[];\n  description: string;\n}\n\nexport type AlertType = \n  | 'price_movement' \n  | 'portfolio_risk' \n  | 'position_pnl' \n  | 'system_error' \n  | 'trading_signal' \n  | 'market_volatility'\n  | 'api_issues'\n  | 'performance_degradation';\n\nexport interface AlertCondition {\n  metric: string;\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte' | 'change_gt' | 'change_lt';\n  value: number;\n  timeframe?: number; // For change-based conditions (minutes)\n}\n\nexport type NotificationMethod = 'toast' | 'email' | 'sms' | 'webhook' | 'browser' | 'sound';\n\nexport interface Alert {\n  id: string;\n  ruleId: string;\n  timestamp: number;\n  title: string;\n  message: string;\n  priority: AlertRule['priority'];\n  type: AlertType;\n  data?: any;\n  acknowledged: boolean;\n  acknowledgedAt?: number;\n  acknowledgedBy?: string;\n}\n\nexport interface PerformanceMetrics {\n  timestamp: number;\n  // Trading metrics\n  totalPnL: number;\n  dailyPnL: number;\n  winRate: number;\n  avgWin: number;\n  avgLoss: number;\n  totalTrades: number;\n  \n  // Risk metrics\n  currentDrawdown: number;\n  maxDrawdown: number;\n  portfolioRisk: number;\n  leverageUtilization: number;\n  \n  // System metrics\n  apiLatency: number;\n  successRate: number;\n  errorRate: number;\n  wsConnectionStatus: 'connected' | 'disconnected' | 'reconnecting';\n  \n  // Market metrics\n  volatility: number;\n  volume: number;\n  spread: number;\n}\n\nexport interface SystemStatus {\n  overall: 'healthy' | 'warning' | 'critical' | 'offline';\n  components: {\n    trading: 'active' | 'paused' | 'error';\n    riskManagement: 'active' | 'warning' | 'error';\n    dataFeed: 'connected' | 'delayed' | 'disconnected';\n    api: 'operational' | 'degraded' | 'down';\n    websocket: 'connected' | 'reconnecting' | 'disconnected';\n  };\n  lastUpdate: number;\n  uptime: number;\n  alertsCount: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\nexport class MonitoringSystem {\n  private alerts: Alert[] = [];\n  private alertRules: Map<string, AlertRule> = new Map();\n  private performanceHistory: PerformanceMetrics[] = [];\n  private systemStatus: SystemStatus;\n  private maxHistoryLength = 1000;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private notificationHandlers: Map<NotificationMethod, (alert: Alert) => Promise<void>> = new Map();\n  \n  constructor() {\n    this.systemStatus = {\n      overall: 'healthy',\n      components: {\n        trading: 'active',\n        riskManagement: 'active',\n        dataFeed: 'connected',\n        api: 'operational',\n        websocket: 'connected'\n      },\n      lastUpdate: Date.now(),\n      uptime: 0,\n      alertsCount: { critical: 0, high: 0, medium: 0, low: 0 }\n    };\n    \n    this.initializeDefaultRules();\n    this.setupNotificationHandlers();\n  }\n\n  /**\n   * Start monitoring system\n   */\n  start(): void {\n    if (this.monitoringInterval) return;\n    \n    this.monitoringInterval = setInterval(() => {\n      this.updateSystemStatus();\n      this.checkAlertRules();\n      this.cleanupOldData();\n    }, 30000); // Check every 30 seconds\n    \n    logger.info('Monitoring system started');\n  }\n\n  /**\n   * Stop monitoring system\n   */\n  stop(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    \n    logger.info('Monitoring system stopped');\n  }\n\n  /**\n   * Add performance metrics\n   */\n  addPerformanceMetrics(metrics: PerformanceMetrics): void {\n    this.performanceHistory.push({\n      ...metrics,\n      timestamp: Date.now()\n    });\n    \n    // Keep only recent history\n    if (this.performanceHistory.length > this.maxHistoryLength) {\n      this.performanceHistory = this.performanceHistory.slice(-this.maxHistoryLength);\n    }\n    \n    this.checkMetricAlerts(metrics);\n  }\n\n  /**\n   * Update portfolio risk and trigger risk-based alerts\n   */\n  updatePortfolioRisk(portfolioRisk: PortfolioRisk): void {\n    // Check drawdown alerts\n    if (portfolioRisk.currentDrawdown > 15) {\n      this.triggerAlert('portfolio_risk', {\n        title: 'High Drawdown Warning',\n        message: `Portfolio drawdown is ${portfolioRisk.currentDrawdown.toFixed(2)}%`,\n        data: { drawdown: portfolioRisk.currentDrawdown }\n      });\n    }\n    \n    // Check risk concentration\n    if (portfolioRisk.totalRiskPercent > 10) {\n      this.triggerAlert('portfolio_risk', {\n        title: 'Risk Concentration Alert',\n        message: `Total portfolio risk is ${portfolioRisk.totalRiskPercent.toFixed(2)}%`,\n        data: { totalRisk: portfolioRisk.totalRiskPercent }\n      });\n    }\n    \n    // Check correlation risk\n    if (portfolioRisk.correlationRisk > 0.8) {\n      this.triggerAlert('portfolio_risk', {\n        title: 'High Correlation Risk',\n        message: `Portfolio correlation risk is ${portfolioRisk.correlationRisk.toFixed(2)}`,\n        data: { correlationRisk: portfolioRisk.correlationRisk }\n      });\n    }\n  }\n\n  /**\n   * Update market data and trigger price alerts\n   */\n  updateMarketData(pair: string, data: MarketData): void {\n    // Check for significant price movements\n    const priceHistory = this.getRecentPrices(pair);\n    if (priceHistory.length >= 2) {\n      const currentPrice = data.close;\n      const previousPrice = priceHistory[priceHistory.length - 2];\n      const changePercent = ((currentPrice - previousPrice) / previousPrice) * 100;\n      \n      if (Math.abs(changePercent) > 5) {\n        this.triggerAlert('price_movement', {\n          title: 'Significant Price Movement',\n          message: `${pair} moved ${changePercent.toFixed(2)}% to $${currentPrice.toFixed(2)}`,\n          data: { pair, price: currentPrice, change: changePercent }\n        });\n      }\n    }\n    \n    // Check volatility\n    if (priceHistory.length >= 20) {\n      const volatility = this.calculateVolatility(priceHistory);\n      if (volatility > 0.05) { // 5% volatility threshold\n        this.triggerAlert('market_volatility', {\n          title: 'High Market Volatility',\n          message: `${pair} volatility is ${(volatility * 100).toFixed(2)}%`,\n          data: { pair, volatility }\n        });\n      }\n    }\n  }\n\n  /**\n   * Log system error and trigger alert\n   */\n  logError(error: Error, context?: string): void {\n    logger.error(`System error: ${error.message}`, { context, stack: error.stack });\n    \n    this.triggerAlert('system_error', {\n      title: 'System Error',\n      message: `${context || 'Unknown context'}: ${error.message}`,\n      data: { error: error.message, context }\n    });\n    \n    this.updateComponentStatus('trading', 'error');\n  }\n\n  /**\n   * Update API performance metrics\n   */\n  updateAPIMetrics(latency: number, success: boolean): void {\n    const recentMetrics = this.performanceHistory.slice(-10);\n    const avgLatency = recentMetrics.reduce((sum, m) => sum + m.apiLatency, latency) / (recentMetrics.length + 1);\n    const successRate = recentMetrics.filter(m => m.successRate > 0.95).length / recentMetrics.length;\n    \n    if (avgLatency > 5000) { // 5 second threshold\n      this.triggerAlert('api_issues', {\n        title: 'High API Latency',\n        message: `Average API latency is ${avgLatency.toFixed(0)}ms`,\n        data: { latency: avgLatency }\n      });\n    }\n    \n    if (successRate < 0.9) {\n      this.triggerAlert('api_issues', {\n        title: 'Low API Success Rate',\n        message: `API success rate is ${(successRate * 100).toFixed(1)}%`,\n        data: { successRate }\n      });\n    }\n  }\n\n  /**\n   * Update WebSocket connection status\n   */\n  updateWebSocketStatus(status: 'connected' | 'reconnecting' | 'disconnected'): void {\n    this.updateComponentStatus('websocket', status);\n    \n    if (status === 'disconnected') {\n      this.triggerAlert('system_error', {\n        title: 'WebSocket Disconnected',\n        message: 'Real-time data feed has been disconnected',\n        data: { component: 'websocket' }\n      });\n    } else if (status === 'connected') {\n      // Clear previous websocket alerts\n      this.acknowledgeAlertsByType('system_error');\n    }\n  }\n\n  /**\n   * Add custom alert rule\n   */\n  addAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule);\n    logger.info(`Alert rule added: ${rule.name}`);\n  }\n\n  /**\n   * Remove alert rule\n   */\n  removeAlertRule(ruleId: string): void {\n    this.alertRules.delete(ruleId);\n    logger.info(`Alert rule removed: ${ruleId}`);\n  }\n\n  /**\n   * Get active alerts\n   */\n  getActiveAlerts(): Alert[] {\n    return this.alerts.filter(alert => !alert.acknowledged);\n  }\n\n  /**\n   * Get all alerts with pagination\n   */\n  getAllAlerts(limit: number = 50, offset: number = 0): Alert[] {\n    return this.alerts\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(offset, offset + limit);\n  }\n\n  /**\n   * Acknowledge alert\n   */\n  acknowledgeAlert(alertId: string, acknowledgedBy?: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      alert.acknowledgedAt = Date.now();\n      alert.acknowledgedBy = acknowledgedBy;\n      this.updateAlertsCount();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get system status\n   */\n  getSystemStatus(): SystemStatus {\n    return { ...this.systemStatus };\n  }\n\n  /**\n   * Get performance metrics history\n   */\n  getPerformanceHistory(hours: number = 24): PerformanceMetrics[] {\n    const cutoff = Date.now() - (hours * 60 * 60 * 1000);\n    return this.performanceHistory.filter(m => m.timestamp >= cutoff);\n  }\n\n  /**\n   * Generate performance report\n   */\n  generatePerformanceReport(hours: number = 24): any {\n    const metrics = this.getPerformanceHistory(hours);\n    if (metrics.length === 0) return null;\n    \n    const latest = metrics[metrics.length - 1];\n    const oldest = metrics[0];\n    \n    return {\n      period: `${hours} hours`,\n      totalPnLChange: latest.totalPnL - oldest.totalPnL,\n      avgWinRate: metrics.reduce((sum, m) => sum + m.winRate, 0) / metrics.length,\n      avgDrawdown: metrics.reduce((sum, m) => sum + m.currentDrawdown, 0) / metrics.length,\n      maxDrawdown: Math.max(...metrics.map(m => m.currentDrawdown)),\n      avgLatency: metrics.reduce((sum, m) => sum + m.apiLatency, 0) / metrics.length,\n      uptime: (metrics.filter(m => m.successRate > 0.95).length / metrics.length) * 100,\n      alertsTriggered: this.alerts.filter(a => a.timestamp >= Date.now() - (hours * 60 * 60 * 1000)).length\n    };\n  }\n\n  /**\n   * Initialize default alert rules\n   */\n  private initializeDefaultRules(): void {\n    const defaultRules: AlertRule[] = [\n      {\n        id: 'high_drawdown',\n        name: 'High Drawdown Alert',\n        type: 'portfolio_risk',\n        condition: { metric: 'currentDrawdown', operator: 'gt', value: 10 },\n        enabled: true,\n        priority: 'high',\n        cooldownMinutes: 60,\n        notificationMethods: ['toast', 'email'],\n        description: 'Alert when portfolio drawdown exceeds 10%'\n      },\n      {\n        id: 'daily_loss_limit',\n        name: 'Daily Loss Limit',\n        type: 'portfolio_risk',\n        condition: { metric: 'dailyPnL', operator: 'lt', value: -1000 },\n        enabled: true,\n        priority: 'critical',\n        cooldownMinutes: 30,\n        notificationMethods: ['toast', 'email', 'sms'],\n        description: 'Alert when daily losses exceed $1,000'\n      },\n      {\n        id: 'api_error_rate',\n        name: 'High API Error Rate',\n        type: 'api_issues',\n        condition: { metric: 'errorRate', operator: 'gt', value: 0.1 },\n        enabled: true,\n        priority: 'medium',\n        cooldownMinutes: 15,\n        notificationMethods: ['toast'],\n        description: 'Alert when API error rate exceeds 10%'\n      },\n      {\n        id: 'large_price_movement',\n        name: 'Large Price Movement',\n        type: 'price_movement',\n        condition: { metric: 'priceChange', operator: 'gt', value: 5 },\n        enabled: true,\n        priority: 'medium',\n        cooldownMinutes: 5,\n        notificationMethods: ['toast'],\n        description: 'Alert when price moves more than 5% in short time'\n      }\n    ];\n    \n    defaultRules.forEach(rule => this.alertRules.set(rule.id, rule));\n  }\n\n  /**\n   * Setup notification handlers\n   */\n  private setupNotificationHandlers(): void {\n    // Toast notifications\n    this.notificationHandlers.set('toast', async (alert: Alert) => {\n      // This would integrate with your toast system\n      console.log(`Toast: ${alert.title} - ${alert.message}`);\n    });\n    \n    // Browser notifications\n    this.notificationHandlers.set('browser', async (alert: Alert) => {\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification(alert.title, {\n          body: alert.message,\n          icon: '/favicon.ico',\n          tag: alert.id\n        });\n      }\n    });\n    \n    // Sound notifications\n    this.notificationHandlers.set('sound', async (alert: Alert) => {\n      if (alert.priority === 'critical' || alert.priority === 'high') {\n        // Play alert sound\n        try {\n          const audio = new Audio('/alert-sound.mp3');\n          audio.play().catch(e => console.warn('Could not play alert sound:', e));\n        } catch (error) {\n          console.warn('Alert sound not available');\n        }\n      }\n    });\n    \n    // Webhook notifications (placeholder)\n    this.notificationHandlers.set('webhook', async (alert: Alert) => {\n      // This would send to configured webhook URL\n      console.log(`Webhook: ${JSON.stringify(alert)}`);\n    });\n  }\n\n  /**\n   * Trigger an alert\n   */\n  private triggerAlert(type: AlertType, alertData: { title: string; message: string; data?: any }): void {\n    // Check for existing similar alerts to avoid spam\n    const recentSimilar = this.alerts.filter(\n      a => a.type === type && \n      a.title === alertData.title && \n      a.timestamp > Date.now() - (5 * 60 * 1000) // 5 minutes\n    );\n    \n    if (recentSimilar.length > 0) return;\n    \n    const alert: Alert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ruleId: type,\n      timestamp: Date.now(),\n      title: alertData.title,\n      message: alertData.message,\n      priority: this.getPriorityForType(type),\n      type,\n      data: alertData.data,\n      acknowledged: false\n    };\n    \n    this.alerts.push(alert);\n    this.updateAlertsCount();\n    \n    // Send notifications\n    this.sendNotifications(alert);\n    \n    logger.warn(`Alert triggered: ${alert.title}`, alert);\n  }\n\n  /**\n   * Check metric-based alerts\n   */\n  private checkMetricAlerts(metrics: PerformanceMetrics): void {\n    for (const rule of this.alertRules.values()) {\n      if (!rule.enabled) continue;\n      \n      // Check cooldown\n      if (rule.lastTriggered && \n          Date.now() - rule.lastTriggered < rule.cooldownMinutes * 60 * 1000) {\n        continue;\n      }\n      \n      const metricValue = this.getMetricValue(metrics, rule.condition.metric);\n      if (metricValue === undefined) continue;\n      \n      const conditionMet = this.evaluateCondition(metricValue, rule.condition);\n      \n      if (conditionMet) {\n        this.triggerAlert(rule.type, {\n          title: rule.name,\n          message: `${rule.condition.metric} is ${metricValue} (threshold: ${rule.condition.value})`,\n          data: { metric: rule.condition.metric, value: metricValue, threshold: rule.condition.value }\n        });\n        \n        rule.lastTriggered = Date.now();\n      }\n    }\n  }\n\n  /**\n   * Send notifications for an alert\n   */\n  private async sendNotifications(alert: Alert): Promise<void> {\n    const rule = this.alertRules.get(alert.ruleId);\n    const methods = rule?.notificationMethods || ['toast'];\n    \n    for (const method of methods) {\n      const handler = this.notificationHandlers.get(method);\n      if (handler) {\n        try {\n          await handler(alert);\n        } catch (error) {\n          logger.error(`Failed to send ${method} notification:`, error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Get priority for alert type\n   */\n  private getPriorityForType(type: AlertType): AlertRule['priority'] {\n    const priorityMap: Record<AlertType, AlertRule['priority']> = {\n      'price_movement': 'medium',\n      'portfolio_risk': 'high',\n      'position_pnl': 'medium',\n      'system_error': 'high',\n      'trading_signal': 'low',\n      'market_volatility': 'medium',\n      'api_issues': 'medium',\n      'performance_degradation': 'medium'\n    };\n    \n    return priorityMap[type] || 'medium';\n  }\n\n  /**\n   * Get metric value from performance metrics\n   */\n  private getMetricValue(metrics: PerformanceMetrics, metricName: string): number | undefined {\n    return (metrics as any)[metricName];\n  }\n\n  /**\n   * Evaluate alert condition\n   */\n  private evaluateCondition(value: number, condition: AlertCondition): boolean {\n    switch (condition.operator) {\n      case 'gt': return value > condition.value;\n      case 'lt': return value < condition.value;\n      case 'eq': return value === condition.value;\n      case 'gte': return value >= condition.value;\n      case 'lte': return value <= condition.value;\n      case 'change_gt':\n      case 'change_lt':\n        // Would need historical data for change calculations\n        return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Update component status\n   */\n  private updateComponentStatus(component: keyof SystemStatus['components'], status: string): void {\n    (this.systemStatus.components as any)[component] = status;\n    this.updateOverallStatus();\n  }\n\n  /**\n   * Update overall system status\n   */\n  private updateOverallStatus(): void {\n    const components = Object.values(this.systemStatus.components);\n    \n    if (components.some(status => status === 'error' || status === 'down' || status === 'disconnected')) {\n      this.systemStatus.overall = 'critical';\n    } else if (components.some(status => status === 'warning' || status === 'degraded' || status === 'delayed')) {\n      this.systemStatus.overall = 'warning';\n    } else {\n      this.systemStatus.overall = 'healthy';\n    }\n    \n    this.systemStatus.lastUpdate = Date.now();\n  }\n\n  /**\n   * Update alerts count\n   */\n  private updateAlertsCount(): void {\n    const activeAlerts = this.getActiveAlerts();\n    this.systemStatus.alertsCount = {\n      critical: activeAlerts.filter(a => a.priority === 'critical').length,\n      high: activeAlerts.filter(a => a.priority === 'high').length,\n      medium: activeAlerts.filter(a => a.priority === 'medium').length,\n      low: activeAlerts.filter(a => a.priority === 'low').length\n    };\n  }\n\n  /**\n   * Acknowledge alerts by type\n   */\n  private acknowledgeAlertsByType(type: AlertType): void {\n    this.alerts\n      .filter(a => a.type === type && !a.acknowledged)\n      .forEach(a => {\n        a.acknowledged = true;\n        a.acknowledgedAt = Date.now();\n      });\n    \n    this.updateAlertsCount();\n  }\n\n  /**\n   * Update system status periodically\n   */\n  private updateSystemStatus(): void {\n    this.systemStatus.uptime = Date.now() - (this.systemStatus.lastUpdate || Date.now());\n    this.systemStatus.lastUpdate = Date.now();\n  }\n\n  /**\n   * Check all alert rules\n   */\n  private checkAlertRules(): void {\n    if (this.performanceHistory.length > 0) {\n      const latestMetrics = this.performanceHistory[this.performanceHistory.length - 1];\n      this.checkMetricAlerts(latestMetrics);\n    }\n  }\n\n  /**\n   * Clean up old data\n   */\n  private cleanupOldData(): void {\n    const cutoff = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 days\n    \n    // Clean old alerts\n    this.alerts = this.alerts.filter(alert => alert.timestamp >= cutoff);\n    \n    // Clean old performance data\n    this.performanceHistory = this.performanceHistory.filter(\n      metrics => metrics.timestamp >= cutoff\n    );\n  }\n\n  /**\n   * Get recent prices for a pair (placeholder - would need actual price storage)\n   */\n  private getRecentPrices(pair: string): number[] {\n    // This would retrieve recent price history from storage\n    // For now, return empty array\n    return [];\n  }\n\n  /**\n   * Calculate volatility from price history\n   */\n  private calculateVolatility(prices: number[]): number {\n    if (prices.length < 2) return 0;\n    \n    const returns = [];\n    for (let i = 1; i < prices.length; i++) {\n      returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n    }\n    \n    const mean = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / returns.length;\n    \n    return Math.sqrt(variance);\n  }\n}\n\n/**\n * Global monitoring instance\n */\nexport const monitoringSystem = new MonitoringSystem();","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/performanceOptimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[902,905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[902,905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[934,937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[934,937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1277,1280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1277,1280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3746,3749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3746,3749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5052,5055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5052,5055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5104,5107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5104,5107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5901,5904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5901,5904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5911,5914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5911,5914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6309,6312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6309,6312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6319,6322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6319,6322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6704,6707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6704,6707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6714,6717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6714,6717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":457,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11122,11125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11122,11125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":471,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11571,11574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11571,11574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'now' is assigned a value but never used.","line":499,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":499,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":590,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14913,14916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14913,14916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":608,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":608,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15405,15408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15405,15408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":672,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":672,"endColumn":22,"suggestions":[{"fix":{"range":[16851,16892],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":677,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":677,"endColumn":20,"suggestions":[{"fix":{"range":[16970,17022],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":687,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":687,"endColumn":20,"suggestions":[{"fix":{"range":[17218,17269],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Optimization Utilities for High-Frequency Trading\n * Implements caching, batching, and optimization strategies\n */\n\nexport interface PerformanceConfig {\n  // Caching settings\n  enableCaching: boolean;\n  cacheMaxSize: number;\n  cacheExpiryMs: number;\n  \n  // Batching settings\n  enableBatching: boolean;\n  batchSize: number;\n  batchDelayMs: number;\n  \n  // Rate limiting settings\n  maxRequestsPerSecond: number;\n  maxConcurrentRequests: number;\n  \n  // Memory management\n  maxMemoryUsageMB: number;\n  gcThresholdMB: number;\n  \n  // WebSocket optimization\n  wsHeartbeatInterval: number;\n  wsReconnectDelay: number;\n  wsMaxReconnectAttempts: number;\n}\n\nexport interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface BatchRequest {\n  id: string;\n  type: string;\n  params: any;\n  resolve: (result: any) => void;\n  reject: (error: any) => void;\n  timestamp: number;\n}\n\nexport interface PerformanceMetrics {\n  cacheHitRate: number;\n  avgResponseTime: number;\n  requestsPerSecond: number;\n  memoryUsage: number;\n  batchEfficiency: number;\n  errorRate: number;\n}\n\nexport class PerformanceOptimizer {\n  private config: PerformanceConfig;\n  private cache: Map<string, CacheEntry<any>> = new Map();\n  private requestQueue: BatchRequest[] = [];\n  private batchProcessor: NodeJS.Timeout | null = null;\n  private rateLimiter: Map<string, number[]> = new Map();\n  private activeRequests = 0;\n  private metrics: PerformanceMetrics = {\n    cacheHitRate: 0,\n    avgResponseTime: 0,\n    requestsPerSecond: 0,\n    memoryUsage: 0,\n    batchEfficiency: 0,\n    errorRate: 0\n  };\n  private metricsHistory: PerformanceMetrics[] = [];\n  private startTime = Date.now();\n\n  constructor(config?: Partial<PerformanceConfig>) {\n    this.config = {\n      enableCaching: true,\n      cacheMaxSize: 1000,\n      cacheExpiryMs: 300000, // 5 minutes\n      \n      enableBatching: true,\n      batchSize: 10,\n      batchDelayMs: 100,\n      \n      maxRequestsPerSecond: 10,\n      maxConcurrentRequests: 5,\n      \n      maxMemoryUsageMB: 512,\n      gcThresholdMB: 256,\n      \n      wsHeartbeatInterval: 30000,\n      wsReconnectDelay: 5000,\n      wsMaxReconnectAttempts: 5,\n      \n      ...config\n    };\n    \n    this.startCacheCleanup();\n    this.startMetricsCollection();\n  }\n\n  /**\n   * Cached API request wrapper\n   */\n  async cachedRequest<T>(\n    key: string,\n    requestFn: () => Promise<T>,\n    forceRefresh: boolean = false\n  ): Promise<T> {\n    const startTime = performance.now();\n    \n    try {\n      // Check cache first\n      if (!forceRefresh && this.config.enableCaching) {\n        const cached = this.getCached<T>(key);\n        if (cached) {\n          this.updateMetrics('cacheHit', performance.now() - startTime);\n          return cached;\n        }\n      }\n      \n      // Apply rate limiting\n      if (!this.checkRateLimit('api')) {\n        throw new Error('Rate limit exceeded');\n      }\n      \n      // Check concurrent request limit\n      if (this.activeRequests >= this.config.maxConcurrentRequests) {\n        await this.waitForSlot();\n      }\n      \n      this.activeRequests++;\n      \n      try {\n        const result = await requestFn();\n        \n        // Cache the result\n        if (this.config.enableCaching) {\n          this.setCached(key, result);\n        }\n        \n        this.updateMetrics('cacheMiss', performance.now() - startTime, true);\n        return result;\n      } finally {\n        this.activeRequests--;\n      }\n    } catch (error) {\n      this.updateMetrics('error', performance.now() - startTime, false);\n      throw error;\n    }\n  }\n\n  /**\n   * Batched request processing\n   */\n  async batchRequest<T>(\n    type: string,\n    params: any\n  ): Promise<T> {\n    if (!this.config.enableBatching) {\n      throw new Error('Batching is disabled');\n    }\n    \n    return new Promise<T>((resolve, reject) => {\n      const request: BatchRequest = {\n        id: `${type}_${Date.now()}_${Math.random()}`,\n        type,\n        params,\n        resolve,\n        reject,\n        timestamp: Date.now()\n      };\n      \n      this.requestQueue.push(request);\n      \n      // Start batch processor if not running\n      if (!this.batchProcessor) {\n        this.batchProcessor = setTimeout(() => {\n          this.processBatch();\n        }, this.config.batchDelayMs);\n      }\n      \n      // Process immediately if batch is full\n      if (this.requestQueue.length >= this.config.batchSize) {\n        if (this.batchProcessor) {\n          clearTimeout(this.batchProcessor);\n          this.batchProcessor = null;\n        }\n        this.processBatch();\n      }\n    });\n  }\n\n  /**\n   * Optimized WebSocket connection manager\n   */\n  createOptimizedWebSocket(url: string, protocols?: string[]): OptimizedWebSocket {\n    return new OptimizedWebSocket(url, protocols, this.config);\n  }\n\n  /**\n   * Memory usage monitoring and cleanup\n   */\n  monitorMemory(): void {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in (window.performance as any)) {\n      const memory = (window.performance as any).memory;\n      const usedMB = memory.usedJSHeapSize / 1024 / 1024;\n      \n      this.metrics.memoryUsage = usedMB;\n      \n      if (usedMB > this.config.gcThresholdMB) {\n        this.performGarbageCollection();\n      }\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get performance history\n   */\n  getMetricsHistory(): PerformanceMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<PerformanceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Debounced function executor\n   */\n  debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout | null = null;\n    \n    return (...args: Parameters<T>) => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      \n      timeout = setTimeout(() => {\n        func(...args);\n      }, wait);\n    };\n  }\n\n  /**\n   * Throttled function executor\n   */\n  throttle<T extends (...args: any[]) => any>(\n    func: T,\n    limit: number\n  ): (...args: Parameters<T>) => void {\n    let inThrottle = false;\n    \n    return (...args: Parameters<T>) => {\n      if (!inThrottle) {\n        func(...args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Memoization for expensive calculations\n   */\n  memoize<T extends (...args: any[]) => any>(\n    func: T,\n    maxCacheSize: number = 100\n  ): T {\n    const cache = new Map<string, { result: ReturnType<T>; timestamp: number }>();\n    \n    return ((...args: Parameters<T>): ReturnType<T> => {\n      const key = JSON.stringify(args);\n      const cached = cache.get(key);\n      \n      if (cached && Date.now() - cached.timestamp < this.config.cacheExpiryMs) {\n        return cached.result;\n      }\n      \n      const result = func(...args);\n      \n      // Manage cache size\n      if (cache.size >= maxCacheSize) {\n        const oldestKey = cache.keys().next().value;\n        cache.delete(oldestKey);\n      }\n      \n      cache.set(key, { result, timestamp: Date.now() });\n      return result;\n    }) as T;\n  }\n\n  /**\n   * Batch array processing with yielding\n   */\n  async *batchProcess<T, R>(\n    items: T[],\n    processor: (item: T) => Promise<R>,\n    batchSize: number = this.config.batchSize\n  ): AsyncGenerator<R[], void, unknown> {\n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      const results = await Promise.all(batch.map(processor));\n      yield results;\n      \n      // Yield control to prevent blocking\n      await new Promise(resolve => setTimeout(resolve, 0));\n    }\n  }\n\n  /**\n   * Get cached value\n   */\n  private getCached<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n    \n    if (Date.now() > entry.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    entry.accessCount++;\n    entry.lastAccessed = Date.now();\n    return entry.data;\n  }\n\n  /**\n   * Set cached value\n   */\n  private setCached<T>(key: string, data: T): void {\n    // Remove oldest entries if cache is full\n    if (this.cache.size >= this.config.cacheMaxSize) {\n      this.evictOldestEntry();\n    }\n    \n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + this.config.cacheExpiryMs,\n      accessCount: 0,\n      lastAccessed: Date.now()\n    };\n    \n    this.cache.set(key, entry);\n  }\n\n  /**\n   * Check rate limit\n   */\n  private checkRateLimit(type: string): boolean {\n    const now = Date.now();\n    const windowStart = now - 1000; // 1 second window\n    \n    if (!this.rateLimiter.has(type)) {\n      this.rateLimiter.set(type, []);\n    }\n    \n    const timestamps = this.rateLimiter.get(type)!;\n    \n    // Remove old timestamps\n    while (timestamps.length > 0 && timestamps[0] < windowStart) {\n      timestamps.shift();\n    }\n    \n    if (timestamps.length >= this.config.maxRequestsPerSecond) {\n      return false;\n    }\n    \n    timestamps.push(now);\n    return true;\n  }\n\n  /**\n   * Wait for available request slot\n   */\n  private async waitForSlot(): Promise<void> {\n    return new Promise(resolve => {\n      const checkSlot = () => {\n        if (this.activeRequests < this.config.maxConcurrentRequests) {\n          resolve();\n        } else {\n          setTimeout(checkSlot, 50);\n        }\n      };\n      checkSlot();\n    });\n  }\n\n  /**\n   * Process batched requests\n   */\n  private async processBatch(): Promise<void> {\n    if (this.requestQueue.length === 0) return;\n    \n    const batch = this.requestQueue.splice(0, this.config.batchSize);\n    this.batchProcessor = null;\n    \n    // Group requests by type\n    const grouped = batch.reduce((acc, req) => {\n      if (!acc[req.type]) {\n        acc[req.type] = [];\n      }\n      acc[req.type].push(req);\n      return acc;\n    }, {} as Record<string, BatchRequest[]>);\n    \n    // Process each group\n    for (const [type, requests] of Object.entries(grouped)) {\n      try {\n        const results = await this.executeBatch(type, requests);\n        requests.forEach((req, index) => {\n          req.resolve(results[index]);\n        });\n      } catch (error) {\n        requests.forEach(req => {\n          req.reject(error);\n        });\n      }\n    }\n    \n    // Update batch efficiency metric\n    const efficiency = batch.length / this.config.batchSize;\n    this.metrics.batchEfficiency = (this.metrics.batchEfficiency + efficiency) / 2;\n    \n    // Process remaining requests if any\n    if (this.requestQueue.length > 0) {\n      this.batchProcessor = setTimeout(() => {\n        this.processBatch();\n      }, this.config.batchDelayMs);\n    }\n  }\n\n  /**\n   * Execute batch of requests\n   */\n  private async executeBatch(type: string, requests: BatchRequest[]): Promise<any[]> {\n    // This would be implemented based on specific API requirements\n    // For now, execute requests individually\n    const results = [];\n    for (const request of requests) {\n      // Placeholder - implement actual batch API calls\n      results.push(await this.executeRequest(request));\n    }\n    return results;\n  }\n\n  /**\n   * Execute individual request (placeholder)\n   */\n  private async executeRequest(request: BatchRequest): Promise<any> {\n    // Placeholder implementation\n    return { type: request.type, params: request.params, timestamp: Date.now() };\n  }\n\n  /**\n   * Evict oldest cache entry\n   */\n  private evictOldestEntry(): void {\n    let oldestKey = '';\n    let oldestTime = Infinity;\n    \n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < oldestTime) {\n        oldestTime = entry.lastAccessed;\n        oldestKey = key;\n      }\n    }\n    \n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n    }\n  }\n\n  /**\n   * Update performance metrics\n   */\n  private updateMetrics(type: 'cacheHit' | 'cacheMiss' | 'error', duration: number, success: boolean = true): void {\n    const now = Date.now();\n    const requestsInLastSecond = this.getRequestsInLastSecond();\n    \n    // Update cache hit rate\n    if (type === 'cacheHit' || type === 'cacheMiss') {\n      const totalRequests = this.metricsHistory.length + 1;\n      const hitRate = type === 'cacheHit' ? 1 : 0;\n      this.metrics.cacheHitRate = (this.metrics.cacheHitRate * (totalRequests - 1) + hitRate) / totalRequests;\n    }\n    \n    // Update response time\n    this.metrics.avgResponseTime = (this.metrics.avgResponseTime + duration) / 2;\n    \n    // Update RPS\n    this.metrics.requestsPerSecond = requestsInLastSecond;\n    \n    // Update error rate\n    const errorRate = success ? 0 : 1;\n    this.metrics.errorRate = (this.metrics.errorRate + errorRate) / 2;\n  }\n\n  /**\n   * Get requests in last second\n   */\n  private getRequestsInLastSecond(): number {\n    const cutoff = Date.now() - 1000;\n    return this.metricsHistory.filter(m => m.requestsPerSecond > cutoff).length;\n  }\n\n  /**\n   * Start cache cleanup routine\n   */\n  private startCacheCleanup(): void {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [key, entry] of this.cache.entries()) {\n        if (now > entry.expiresAt) {\n          this.cache.delete(key);\n        }\n      }\n    }, 60000); // Clean every minute\n  }\n\n  /**\n   * Start metrics collection\n   */\n  private startMetricsCollection(): void {\n    setInterval(() => {\n      this.monitorMemory();\n      this.metricsHistory.push({ ...this.metrics });\n      \n      // Keep only last 100 metrics\n      if (this.metricsHistory.length > 100) {\n        this.metricsHistory.shift();\n      }\n    }, 10000); // Collect every 10 seconds\n  }\n\n  /**\n   * Perform garbage collection hints\n   */\n  private performGarbageCollection(): void {\n    // Clear old cache entries\n    const cutoff = Date.now() - this.config.cacheExpiryMs / 2;\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < cutoff) {\n        this.cache.delete(key);\n      }\n    }\n    \n    // Clear old metrics\n    this.metricsHistory = this.metricsHistory.slice(-50);\n    \n    // Clear old rate limit data\n    const windowStart = Date.now() - 60000; // 1 minute\n    for (const [type, timestamps] of this.rateLimiter.entries()) {\n      this.rateLimiter.set(type, timestamps.filter(ts => ts > windowStart));\n    }\n  }\n}\n\n/**\n * Optimized WebSocket implementation\n */\nexport class OptimizedWebSocket {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private protocols?: string[];\n  private config: PerformanceConfig;\n  private reconnectAttempts = 0;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private messageQueue: any[] = [];\n  private connectionState: 'connecting' | 'connected' | 'disconnected' | 'reconnecting' = 'disconnected';\n  \n  constructor(url: string, protocols?: string[], config?: PerformanceConfig) {\n    this.url = url;\n    this.protocols = protocols;\n    this.config = config || {\n      wsHeartbeatInterval: 30000,\n      wsReconnectDelay: 5000,\n      wsMaxReconnectAttempts: 5\n    } as PerformanceConfig;\n    \n    this.connect();\n  }\n\n  /**\n   * Send message with queuing\n   */\n  send(data: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(typeof data === 'string' ? data : JSON.stringify(data));\n    } else {\n      this.messageQueue.push(data);\n    }\n  }\n\n  /**\n   * Close connection\n   */\n  close(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n    }\n    \n    this.connectionState = 'disconnected';\n  }\n\n  /**\n   * Get connection state\n   */\n  getState(): string {\n    return this.connectionState;\n  }\n\n  /**\n   * Connect to WebSocket\n   */\n  private connect(): void {\n    this.connectionState = this.reconnectAttempts > 0 ? 'reconnecting' : 'connecting';\n    \n    try {\n      this.ws = new WebSocket(this.url, this.protocols);\n      \n      this.ws.onopen = () => {\n        this.connectionState = 'connected';\n        this.reconnectAttempts = 0;\n        \n        // Send queued messages\n        while (this.messageQueue.length > 0) {\n          const message = this.messageQueue.shift();\n          this.send(message);\n        }\n        \n        // Start heartbeat\n        this.startHeartbeat();\n      };\n      \n      this.ws.onclose = () => {\n        this.connectionState = 'disconnected';\n        \n        if (this.heartbeatInterval) {\n          clearInterval(this.heartbeatInterval);\n        }\n        \n        this.attemptReconnect();\n      };\n      \n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.attemptReconnect();\n      };\n      \n    } catch (error) {\n      console.error('Failed to create WebSocket:', error);\n      this.attemptReconnect();\n    }\n  }\n\n  /**\n   * Attempt reconnection\n   */\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts >= this.config.wsMaxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      return;\n    }\n    \n    this.reconnectAttempts++;\n    \n    setTimeout(() => {\n      this.connect();\n    }, this.config.wsReconnectDelay * Math.pow(2, this.reconnectAttempts - 1)); // Exponential backoff\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));\n      }\n    }, this.config.wsHeartbeatInterval);\n  }\n}\n\n/**\n * Global performance optimizer instance\n */\nexport const performanceOptimizer = new PerformanceOptimizer();\n\n/**\n * Utility functions for common optimizations\n */\nexport const optimizationUtils = {\n  /**\n   * Lazy load component\n   */\n  lazyLoad: <T>(factory: () => Promise<{ default: T }>): Promise<T> => {\n    return factory().then(module => module.default);\n  },\n\n  /**\n   * Virtual scrolling helper\n   */\n  createVirtualScroller: (\n    itemHeight: number,\n    containerHeight: number,\n    totalItems: number\n  ) => {\n    return {\n      getVisibleRange: (scrollTop: number) => {\n        const start = Math.floor(scrollTop / itemHeight);\n        const end = Math.min(\n          start + Math.ceil(containerHeight / itemHeight) + 1,\n          totalItems\n        );\n        return { start: Math.max(0, start), end };\n      },\n      \n      getTotalHeight: () => totalItems * itemHeight,\n      \n      getItemStyle: (index: number) => ({\n        position: 'absolute' as const,\n        top: index * itemHeight,\n        height: itemHeight,\n        width: '100%'\n      })\n    };\n  },\n\n  /**\n   * Image lazy loading\n   */\n  setupLazyImages: (selector: string = 'img[data-src]') => {\n    if ('IntersectionObserver' in window) {\n      const imageObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            img.src = img.dataset.src!;\n            img.removeAttribute('data-src');\n            imageObserver.unobserve(img);\n          }\n        });\n      });\n\n      document.querySelectorAll(selector).forEach(img => {\n        imageObserver.observe(img);\n      });\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/riskManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/storage.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"fix":{"range":[847,911],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"fix":{"range":[1139,1201],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"fix":{"range":[1379,1444],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"fix":{"range":[1681,1732],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Storage utility for managing persistent data\n */\n\n// Define keys for local storage\nexport const STORAGE_KEYS = {\n  API_KEY: 'poloniex_api_key',\n  API_SECRET: 'poloniex_api_secret',\n  IS_LIVE_TRADING: 'poloniex_is_live_trading',\n  NOTIFICATIONS: 'poloniex_notifications',\n  DARK_MODE: 'poloniex_dark_mode',\n  DEFAULT_PAIR: 'poloniex_default_pair',\n  EMAIL_NOTIFICATIONS: 'poloniex_email_notifications',\n  TRADE_NOTIFICATIONS: 'poloniex_trade_notifications',\n  PRICE_ALERTS: 'poloniex_price_alerts',\n  CHAT_NOTIFICATIONS: 'poloniex_chat_notifications',\n  SHOW_EXTENSION: 'poloniex_show_extension'\n};\n\n/**\n * Get a value from local storage\n */\nexport const getStorageItem = <T>(key: string, defaultValue: T): T => {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch (error) {\n    console.error(`Error getting item from storage: ${key}`, error);\n    return defaultValue;\n  }\n};\n\n/**\n * Set a value in local storage\n */\nexport const setStorageItem = <T>(key: string, value: T): void => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error(`Error setting item in storage: ${key}`, error);\n  }\n};\n\n/**\n * Remove a value from local storage\n */\nexport const removeStorageItem = (key: string): void => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing item from storage: ${key}`, error);\n  }\n};\n\n/**\n * Clear all app related items from local storage\n */\nexport const clearAppStorage = (): void => {\n  try {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n  } catch (error) {\n    console.error('Error clearing app storage', error);\n  }\n};\n\n/**\n * Check if local storage is available\n */\nexport const isStorageAvailable = (): boolean => {\n  try {\n    const test = '__storage_test__';\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch {\n    return false;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/strategyExecutors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/strategyTester.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":471,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":471,"endColumn":14,"suggestions":[{"fix":{"range":[13815,13896],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Strategy, MarketData, StrategyParameters } from '@/types';\nimport { executeStrategy, StrategyResult } from './strategyExecutors';\n\nexport interface BacktestResult {\n  strategy: Strategy;\n  startDate: Date;\n  endDate: Date;\n  initialBalance: number;\n  finalBalance: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number;\n  profitFactor: number;\n  maxDrawdown: number;\n  maxDrawdownPercent: number;\n  sharpeRatio: number;\n  trades: BacktestTrade[];\n  equityCurve: EquityPoint[];\n  parameters: StrategyParameters;\n  marketData: MarketData[];\n  metrics: Record<string, number>;\n}\n\nexport interface BacktestTrade {\n  entryDate: Date;\n  entryPrice: number;\n  exitDate: Date | null;\n  exitPrice: number | null;\n  type: 'BUY' | 'SELL';\n  quantity: number;\n  profit: number;\n  profitPercent: number;\n  reason: string;\n  confidence: number;\n}\n\nexport interface EquityPoint {\n  date: Date;\n  equity: number;\n  drawdown: number;\n  drawdownPercent: number;\n}\n\nexport interface StrategyOptimizationResult {\n  bestParameters: StrategyParameters;\n  bestResult: BacktestResult;\n  allResults: BacktestResult[];\n  optimizationMetric: string;\n  optimizationTime: number;\n  parameterRanges: Record<string, [number, number, number]>; // [min, max, step]\n  parameterHeatmap: ParameterHeatmapPoint[];\n}\n\nexport interface ParameterHeatmapPoint {\n  parameters: Record<string, number>;\n  value: number;\n}\n\nexport interface StrategyTestOptions {\n  initialBalance: number;\n  feePercent: number;\n  slippagePercent: number;\n  positionSizePercent: number;\n  useStopLoss: boolean;\n  stopLossPercent?: number;\n  useTakeProfit: boolean;\n  takeProfitPercent?: number;\n  useTrailingStop: boolean;\n  trailingStopPercent?: number;\n  confidenceThreshold: number;\n  allowSimultaneousPositions: boolean;\n  maxOpenPositions: number;\n  reinvestProfits: boolean;\n}\n\nconst DEFAULT_TEST_OPTIONS: StrategyTestOptions = {\n  initialBalance: 10000,\n  feePercent: 0.1,\n  slippagePercent: 0.05,\n  positionSizePercent: 10,\n  useStopLoss: false,\n  stopLossPercent: 5,\n  useTakeProfit: false,\n  takeProfitPercent: 10,\n  useTrailingStop: false,\n  trailingStopPercent: 2,\n  confidenceThreshold: 0.5,\n  allowSimultaneousPositions: false,\n  maxOpenPositions: 1,\n  reinvestProfits: true\n};\n\n/**\n * Backtest a trading strategy against historical market data\n */\nexport function backtestStrategy(\n  strategy: Strategy,\n  marketData: MarketData[],\n  options: Partial<StrategyTestOptions> = {}\n): BacktestResult {\n  // Merge default options with provided options\n  const testOptions: StrategyTestOptions = { ...DEFAULT_TEST_OPTIONS, ...options };\n  \n  // Sort market data by timestamp\n  const sortedData = [...marketData].sort((a, b) => a.timestamp - b.timestamp);\n  \n  // Initialize backtest state\n  const balance = testOptions.initialBalance;\n  let equity = balance;\n  let maxEquity = balance;\n  let maxDrawdown = 0;\n  let maxDrawdownPercent = 0;\n  const trades: BacktestTrade[] = [];\n  const equityCurve: EquityPoint[] = [];\n  const openPositions: BacktestTrade[] = [];\n  \n  // Track profit/loss for metrics\n  const totalProfit = 0;\n  const totalLoss = 0;\n  const winningTrades = 0;\n  const losingTrades = 0;\n  \n  // Daily returns for Sharpe ratio\n  const dailyReturns: number[] = [];\n  let lastDayEquity = balance;\n  let lastDay = new Date(sortedData[0].timestamp).toDateString();\n  \n  // Process each candle\n  for (let i = 50; i < sortedData.length; i++) { // Start at 50 to have enough data for indicators\n    const currentCandle = sortedData[i];\n    const currentDate = new Date(currentCandle.timestamp);\n    const currentPrice = currentCandle.close;\n    \n    // Get data slice up to current candle for strategy execution\n    const dataSlice = sortedData.slice(0, i + 1);\n    \n    // Check for stop loss, take profit, or trailing stop on open positions\n    checkExitConditions(openPositions, currentCandle, testOptions);\n    \n    // Execute strategy on current data\n    const result = executeStrategy(strategy, dataSlice);\n    \n    // Process strategy signals\n    if (result.signal && result.confidence >= testOptions.confidenceThreshold) {\n      processSignal(\n        result, \n        currentCandle, \n        openPositions, \n        trades, \n        balance, \n        testOptions\n      );\n    }\n    \n    // Update equity based on open positions\n    equity = calculateEquity(balance, openPositions, currentPrice);\n    \n    // Track maximum equity and drawdown\n    if (equity > maxEquity) {\n      maxEquity = equity;\n    }\n    \n    const drawdown = maxEquity - equity;\n    const drawdownPercent = (drawdown / maxEquity) * 100;\n    \n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n      maxDrawdownPercent = drawdownPercent;\n    }\n    \n    // Add to equity curve\n    equityCurve.push({\n      date: currentDate,\n      equity,\n      drawdown,\n      drawdownPercent\n    });\n    \n    // Track daily returns for Sharpe ratio\n    const currentDay = currentDate.toDateString();\n    if (currentDay !== lastDay) {\n      const dailyReturn = (equity - lastDayEquity) / lastDayEquity;\n      dailyReturns.push(dailyReturn);\n      lastDayEquity = equity;\n      lastDay = currentDay;\n    }\n  }\n  \n  // Close any remaining open positions at the last price\n  const lastCandle = sortedData[sortedData.length - 1];\n  closeAllPositions(openPositions, trades, lastCandle);\n  \n  // Recalculate final equity\n  const finalEquity = calculateEquity(balance, [], lastCandle.close);\n  \n  // Calculate metrics\n  const winRate = trades.length > 0 ? (winningTrades / trades.length) * 100 : 0;\n  const profitFactor = totalLoss !== 0 ? totalProfit / Math.abs(totalLoss) : totalProfit > 0 ? Infinity : 0;\n  \n  // Calculate Sharpe ratio (assuming risk-free rate of 0% for simplicity)\n  const averageDailyReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n  const dailyReturnStdDev = Math.sqrt(\n    dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - averageDailyReturn, 2), 0) / dailyReturns.length\n  );\n  const sharpeRatio = dailyReturnStdDev !== 0 ? (averageDailyReturn / dailyReturnStdDev) * Math.sqrt(252) : 0; // Annualized\n  \n  return {\n    strategy,\n    startDate: new Date(sortedData[0].timestamp),\n    endDate: new Date(sortedData[sortedData.length - 1].timestamp),\n    initialBalance: testOptions.initialBalance,\n    finalBalance: finalEquity,\n    totalTrades: trades.length,\n    winningTrades,\n    losingTrades,\n    winRate,\n    profitFactor,\n    maxDrawdown,\n    maxDrawdownPercent,\n    sharpeRatio,\n    trades,\n    equityCurve,\n    parameters: strategy.parameters,\n    marketData: sortedData,\n    metrics: {\n      totalProfit,\n      totalLoss,\n      netProfit: totalProfit + totalLoss,\n      averageProfit: winningTrades > 0 ? totalProfit / winningTrades : 0,\n      averageLoss: losingTrades > 0 ? totalLoss / losingTrades : 0,\n      averageTrade: trades.length > 0 ? (totalProfit + totalLoss) / trades.length : 0,\n      returnPercent: ((finalEquity - testOptions.initialBalance) / testOptions.initialBalance) * 100,\n      annualizedReturn: calculateAnnualizedReturn(\n        testOptions.initialBalance, \n        finalEquity, \n        sortedData[0].timestamp, \n        sortedData[sortedData.length - 1].timestamp\n      )\n    }\n  };\n}\n\n/**\n * Check exit conditions for open positions\n */\nfunction checkExitConditions(\n  openPositions: BacktestTrade[],\n  currentCandle: MarketData,\n  options: StrategyTestOptions\n): void {\n  const currentPrice = currentCandle.close;\n  const currentDate = new Date(currentCandle.timestamp);\n  \n  for (let i = openPositions.length - 1; i >= 0; i--) {\n    const position = openPositions[i];\n    const entryPrice = position.entryPrice;\n    \n    // Calculate current profit/loss\n    const isProfitable = position.type === 'BUY' \n      ? currentPrice > entryPrice \n      : currentPrice < entryPrice;\n    \n    const priceDiff = position.type === 'BUY'\n      ? currentPrice - entryPrice\n      : entryPrice - currentPrice;\n    \n    const profitPercent = (priceDiff / entryPrice) * 100;\n    \n    // Check stop loss\n    if (options.useStopLoss && !isProfitable && Math.abs(profitPercent) >= (options.stopLossPercent || 0)) {\n      position.exitDate = currentDate;\n      position.exitPrice = currentPrice;\n      position.profit = priceDiff * position.quantity;\n      position.profitPercent = profitPercent;\n      position.reason += ' (Stop Loss)';\n      \n      // Remove from open positions\n      openPositions.splice(i, 1);\n      continue;\n    }\n    \n    // Check take profit\n    if (options.useTakeProfit && isProfitable && profitPercent >= (options.takeProfitPercent || 0)) {\n      position.exitDate = currentDate;\n      position.exitPrice = currentPrice;\n      position.profit = priceDiff * position.quantity;\n      position.profitPercent = profitPercent;\n      position.reason += ' (Take Profit)';\n      \n      // Remove from open positions\n      openPositions.splice(i, 1);\n      continue;\n    }\n    \n    // Check trailing stop\n    if (options.useTrailingStop && position.highestProfit && \n        position.highestProfit - profitPercent >= (options.trailingStopPercent || 0)) {\n      position.exitDate = currentDate;\n      position.exitPrice = currentPrice;\n      position.profit = priceDiff * position.quantity;\n      position.profitPercent = profitPercent;\n      position.reason += ' (Trailing Stop)';\n      \n      // Remove from open positions\n      openPositions.splice(i, 1);\n      continue;\n    }\n    \n    // Update highest profit for trailing stop\n    if (options.useTrailingStop && isProfitable) {\n      position.highestProfit = Math.max(position.highestProfit || 0, profitPercent);\n    }\n  }\n}\n\n/**\n * Process a strategy signal\n */\nfunction processSignal(\n  result: StrategyResult,\n  currentCandle: MarketData,\n  openPositions: BacktestTrade[],\n  trades: BacktestTrade[],\n  balance: number,\n  options: StrategyTestOptions\n): void {\n  if (!result.signal) return;\n  \n  const currentPrice = currentCandle.close;\n  const currentDate = new Date(currentCandle.timestamp);\n  \n  // Check if we can open a new position\n  if (openPositions.length >= options.maxOpenPositions && !options.allowSimultaneousPositions) {\n    return;\n  }\n  \n  // Calculate position size\n  const positionSize = (balance * options.positionSizePercent) / 100;\n  const quantity = positionSize / currentPrice;\n  \n  // Apply slippage to entry price\n  const slippageFactor = 1 + (options.slippagePercent / 100) * (result.signal === 'BUY' ? 1 : -1);\n  const entryPrice = currentPrice * slippageFactor;\n  \n  // Create new trade\n  const newTrade: BacktestTrade = {\n    entryDate: currentDate,\n    entryPrice,\n    exitDate: null,\n    exitPrice: null,\n    type: result.signal,\n    quantity,\n    profit: 0,\n    profitPercent: 0,\n    reason: result.reason,\n    confidence: result.confidence,\n    highestProfit: 0 // For trailing stop\n  };\n  \n  // Add to open positions\n  openPositions.push(newTrade);\n  \n  // Add to all trades\n  trades.push(newTrade);\n}\n\n/**\n * Close all open positions\n */\nfunction closeAllPositions(\n  openPositions: BacktestTrade[],\n  trades: BacktestTrade[],\n  lastCandle: MarketData\n): void {\n  const currentPrice = lastCandle.close;\n  const currentDate = new Date(lastCandle.timestamp);\n  \n  for (let i = openPositions.length - 1; i >= 0; i--) {\n    const position = openPositions[i];\n    const entryPrice = position.entryPrice;\n    \n    // Calculate profit/loss\n    const priceDiff = position.type === 'BUY'\n      ? currentPrice - entryPrice\n      : entryPrice - currentPrice;\n    \n    const profitPercent = (priceDiff / entryPrice) * 100;\n    \n    // Update trade\n    position.exitDate = currentDate;\n    position.exitPrice = currentPrice;\n    position.profit = priceDiff * position.quantity;\n    position.profitPercent = profitPercent;\n    position.reason += ' (End of Test)';\n    \n    // Update corresponding trade in trades array\n    const tradeIndex = trades.findIndex(t => \n      t.entryDate === position.entryDate && \n      t.entryPrice === position.entryPrice &&\n      t.type === position.type\n    );\n    \n    if (tradeIndex !== -1) {\n      trades[tradeIndex] = { ...position };\n    }\n    \n    // Remove from open positions\n    openPositions.splice(i, 1);\n  }\n}\n\n/**\n * Calculate current equity based on balance and open positions\n */\nfunction calculateEquity(\n  balance: number,\n  openPositions: BacktestTrade[],\n  currentPrice: number\n): number {\n  let equity = balance;\n  \n  for (const position of openPositions) {\n    const entryPrice = position.entryPrice;\n    \n    // Calculate profit/loss\n    const priceDiff = position.type === 'BUY'\n      ? currentPrice - entryPrice\n      : entryPrice - currentPrice;\n    \n    const positionProfit = priceDiff * position.quantity;\n    \n    equity += positionProfit;\n  }\n  \n  return equity;\n}\n\n/**\n * Calculate annualized return\n */\nfunction calculateAnnualizedReturn(\n  initialBalance: number,\n  finalBalance: number,\n  startTimestamp: number,\n  endTimestamp: number\n): number {\n  const totalReturn = (finalBalance - initialBalance) / initialBalance;\n  const years = (endTimestamp - startTimestamp) / (1000 * 60 * 60 * 24 * 365);\n  \n  if (years <= 0) return 0;\n  \n  return Math.pow(1 + totalReturn, 1 / years) - 1;\n}\n\n/**\n * Optimize strategy parameters using grid search\n */\nexport function optimizeStrategy(\n  strategyType: string,\n  marketData: MarketData[],\n  parameterRanges: Record<string, [number, number, number]>, // [min, max, step]\n  optimizationMetric: keyof BacktestResult['metrics'] = 'netProfit',\n  baseParameters: StrategyParameters = {},\n  testOptions: Partial<StrategyTestOptions> = {}\n): StrategyOptimizationResult {\n  const startTime = Date.now();\n  const results: BacktestResult[] = [];\n  const parameterCombinations: StrategyParameters[] = generateParameterCombinations(parameterRanges, baseParameters);\n  \n  console.log(`Testing ${parameterCombinations.length} parameter combinations...`);\n  \n  // Test each parameter combination\n  for (const parameters of parameterCombinations) {\n    const strategy: Strategy = {\n      id: 'optimization-test',\n      name: `${strategyType} Optimization`,\n      type: strategyType,\n      parameters,\n      description: 'Strategy parameter optimization test'\n    };\n    \n    const result = backtestStrategy(strategy, marketData, testOptions);\n    results.push(result);\n  }\n  \n  // Find best result based on optimization metric\n  const sortedResults = [...results].sort((a, b) => {\n    const metricA = a.metrics[optimizationMetric] || 0;\n    const metricB = b.metrics[optimizationMetric] || 0;\n    return metricB - metricA; // Descending order\n  });\n  \n  const bestResult = sortedResults[0];\n  const bestParameters = bestResult.parameters;\n  \n  // Generate parameter heatmap\n  const parameterHeatmap = generateParameterHeatmap(results, parameterRanges, optimizationMetric);\n  \n  return {\n    bestParameters,\n    bestResult,\n    allResults: results,\n    optimizationMetric: optimizationMetric,\n    optimizationTime: Date.now() - startTime,\n    parameterRanges,\n    parameterHeatmap\n  };\n}\n\n/**\n * Generate all possible parameter combinations\n */\nfunction generateParameterCombinations(\n  parameterRanges: Record<string, [number, number, number]>,\n  baseParameters: StrategyParameters = {}\n): StrategyParameters[] {\n  const parameterNames = Object.keys(parameterRanges);\n  const combinations: StrategyParameters[] = [];\n  \n  function generateCombination(index: number, currentParams: StrategyParameters): void {\n    if (index >= parameterNames.length) {\n      combinations.push({ ...baseParameters, ...currentParams });\n      return;\n    }\n    \n    const paramName = parameterNames[index];\n    const [min, max, step] = parameterRanges[paramName];\n    \n    for (let value = min; value <= max; value += step) {\n      generateCombination(index + 1, { ...currentParams, [paramName]: value });\n    }\n  }\n  \n  generateCombination(0, {});\n  return combinations;\n}\n\n/**\n * Generate parameter heatmap for visualization\n */\nfunction generateParameterHeatmap(\n  results: BacktestResult[],\n  parameterRanges: Record<string, [number, number, number]>,\n  metric: string\n): ParameterHeatmapPoint[] {\n  const heatmap: ParameterHeatmapPoint[] = [];\n  \n  // If we have only one or two parameters, generate a detailed heatmap\n  const parameterNames = Object.keys(parameterRanges);\n  \n  if (parameterNames.length <= 2) {\n    for (const result of results) {\n      const parameters: Record<string, number> = {};\n      \n      for (const paramName of parameterNames) {\n        parameters[paramName] = result.parameters[paramName] as number;\n      }\n      \n      heatmap.push({\n        parameters,\n        value: result.metrics[metric] || 0\n      });\n    }\n  } else {\n    // For more than two parameters, create a simplified heatmap\n    // by varying only the two most significant parameters\n    \n    // Find the two most significant parameters by correlation with the metric\n    const parameterCorrelations: Record<string, number> = {};\n    \n    for (const paramName of parameterNames) {\n      const values = results.map(r => r.parameters[paramName] as number);\n      const metricValues = results.map(r => r.metrics[metric] || 0);\n      \n      parameterCorrelations[paramName] = Math.abs(calculateCorrelation(values, metricValues));\n    }\n    \n    // Sort parameters by correlation\n    const sortedParameters = Object.entries(parameterCorrelations)\n      .sort((a, b) => b[1] - a[1])\n      .map(([name]) => name)\n      .slice(0, 2);\n    \n    // Group results by the most significant parameters\n    const groupedResults: Record<string, BacktestResult[]> = {};\n    \n    for (const result of results) {\n      const key = sortedParameters.map(param => `${param}:${result.parameters[param]}`).join(',');\n      \n      if (!groupedResults[key]) {\n        groupedResults[key] = [];\n      }\n      \n      groupedResults[key].push(result);\n    }\n    \n    // Create heatmap points using the average metric value for each group\n    for (const [key, groupResults] of Object.entries(groupedResults)) {\n      const parameters: Record<string, number> = {};\n      const keyParts = key.split(',');\n      \n      for (const part of keyParts) {\n        const [paramName, valueStr] = part.split(':');\n        parameters[paramName] = parseFloat(valueStr);\n      }\n      \n      const avgValue = groupResults.reduce((sum, r) => sum + (r.metrics[metric] || 0), 0) / groupResults.length;\n      \n      heatmap.push({\n        parameters,\n        value: avgValue\n      });\n    }\n  }\n  \n  return heatmap;\n}\n\n/**\n * Calculate correlation coefficient between two arrays\n */\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  const n = x.length;\n  \n  // Calculate means\n  const xMean = x.reduce((sum, val) => sum + val, 0) / n;\n  const yMean = y.reduce((sum, val) => sum + val, 0) / n;\n  \n  // Calculate covariance and variances\n  let covariance = 0;\n  let xVariance = 0;\n  let yVariance = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const xDiff = x[i] - xMean;\n    const yDiff = y[i] - yMean;\n    \n    covariance += xDiff * yDiff;\n    xVariance += xDiff * xDiff;\n    yVariance += yDiff * yDiff;\n  }\n  \n  // Calculate correlation coefficient\n  return covariance / (Math.sqrt(xVariance) * Math.sqrt(yVariance));\n}\n\n/**\n * Monte Carlo simulation to estimate strategy robustness\n */\nexport function monteCarloSimulation(\n  backtestResult: BacktestResult,\n  numSimulations: number = 1000\n): {\n  confidenceIntervals: Record<string, [number, number]>; // 95% confidence intervals\n  worstCase: Record<string, number>;\n  bestCase: Record<string, number>;\n  medianCase: Record<string, number>;\n  distributions: Record<string, number[]>;\n} {\n  const { trades } = backtestResult;\n  const distributions: Record<string, number[]> = {\n    finalBalance: [],\n    maxDrawdownPercent: [],\n    winRate: [],\n    profitFactor: [],\n    sharpeRatio: []\n  };\n  \n  // Run simulations\n  for (let i = 0; i < numSimulations; i++) {\n    // Shuffle trades to simulate different order\n    const shuffledTrades = shuffleArray([...trades]);\n    \n    // Simulate equity curve with shuffled trades\n    const { \n      finalBalance, \n      maxDrawdownPercent, \n      winRate, \n      profitFactor, \n      sharpeRatio \n    } = simulateEquityCurve(shuffledTrades, backtestResult.initialBalance);\n    \n    // Store results\n    distributions.finalBalance.push(finalBalance);\n    distributions.maxDrawdownPercent.push(maxDrawdownPercent);\n    distributions.winRate.push(winRate);\n    distributions.profitFactor.push(profitFactor);\n    distributions.sharpeRatio.push(sharpeRatio);\n  }\n  \n  // Calculate statistics\n  const confidenceIntervals: Record<string, [number, number]> = {};\n  const worstCase: Record<string, number> = {};\n  const bestCase: Record<string, number> = {};\n  const medianCase: Record<string, number> = {};\n  \n  for (const [key, values] of Object.entries(distributions)) {\n    // Sort values\n    values.sort((a, b) => a - b);\n    \n    // Calculate 95% confidence interval (2.5th and 97.5th percentiles)\n    const lowerIndex = Math.floor(values.length * 0.025);\n    const upperIndex = Math.floor(values.length * 0.975);\n    \n    confidenceIntervals[key] = [values[lowerIndex], values[upperIndex]];\n    worstCase[key] = values[0];\n    bestCase[key] = values[values.length - 1];\n    medianCase[key] = values[Math.floor(values.length / 2)];\n  }\n  \n  return {\n    confidenceIntervals,\n    worstCase,\n    bestCase,\n    medianCase,\n    distributions\n  };\n}\n\n/**\n * Shuffle array (Fisher-Yates algorithm)\n */\nfunction shuffleArray<T>(array: T[]): T[] {\n  const result = [...array];\n  \n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [result[i], result[j]] = [result[j], result[i]];\n  }\n  \n  return result;\n}\n\n/**\n * Simulate equity curve with given trades\n */\nfunction simulateEquityCurve(\n  trades: BacktestTrade[],\n  initialBalance: number\n): {\n  finalBalance: number;\n  maxDrawdownPercent: number;\n  winRate: number;\n  profitFactor: number;\n  sharpeRatio: number;\n} {\n  let balance = initialBalance;\n  let maxBalance = initialBalance;\n  let maxDrawdownPercent = 0;\n  let winningTrades = 0;\n  let totalProfit = 0;\n  let totalLoss = 0;\n  \n  // Daily returns for Sharpe ratio\n  const dailyReturns: number[] = [];\n  let lastDayEquity = initialBalance;\n  let lastDay = trades.length > 0 ? trades[0].entryDate.toDateString() : '';\n  \n  // Process each trade\n  for (const trade of trades) {\n    // Update balance\n    balance += trade.profit;\n    \n    // Track maximum balance and drawdown\n    if (balance > maxBalance) {\n      maxBalance = balance;\n    }\n    \n    const drawdown = maxBalance - balance;\n    const drawdownPercent = (drawdown / maxBalance) * 100;\n    \n    if (drawdownPercent > maxDrawdownPercent) {\n      maxDrawdownPercent = drawdownPercent;\n    }\n    \n    // Track winning/losing trades\n    if (trade.profit > 0) {\n      winningTrades++;\n      totalProfit += trade.profit;\n    } else {\n      totalLoss += trade.profit; // Note: loss is negative\n    }\n    \n    // Track daily returns for Sharpe ratio\n    if (trade.exitDate) {\n      const currentDay = trade.exitDate.toDateString();\n      if (currentDay !== lastDay) {\n        const dailyReturn = (balance - lastDayEquity) / lastDayEquity;\n        dailyReturns.push(dailyReturn);\n        lastDayEquity = balance;\n        lastDay = currentDay;\n      }\n    }\n  }\n  \n  // Calculate metrics\n  const winRate = trades.length > 0 ? (winningTrades / trades.length) * 100 : 0;\n  const profitFactor = totalLoss !== 0 ? totalProfit / Math.abs(totalLoss) : totalProfit > 0 ? Infinity : 0;\n  \n  // Calculate Sharpe ratio\n  let sharpeRatio = 0;\n  if (dailyReturns.length > 0) {\n    const averageDailyReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n    const dailyReturnStdDev = Math.sqrt(\n      dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - averageDailyReturn, 2), 0) / dailyReturns.length\n    );\n    sharpeRatio = dailyReturnStdDev !== 0 ? (averageDailyReturn / dailyReturnStdDev) * Math.sqrt(252) : 0; // Annualized\n  }\n  \n  return {\n    finalBalance: balance,\n    maxDrawdownPercent,\n    winRate,\n    profitFactor,\n    sharpeRatio\n  };\n}\n\n/**\n * Walk-forward analysis to test strategy robustness\n */\nexport function walkForwardAnalysis(\n  strategy: Strategy,\n  marketData: MarketData[],\n  options: {\n    inSamplePercent: number;\n    numFolds: number;\n    optimizationMetric?: keyof BacktestResult['metrics'];\n    parameterRanges?: Record<string, [number, number, number]>;\n    testOptions?: Partial<StrategyTestOptions>;\n  }\n): {\n  foldResults: Array<{\n    inSample: BacktestResult;\n    outOfSample: BacktestResult;\n    optimizedParameters: StrategyParameters;\n  }>;\n  aggregateResult: {\n    inSampleMetrics: Record<string, number>;\n    outOfSampleMetrics: Record<string, number>;\n    robustnessScore: number; // Ratio of out-of-sample to in-sample performance\n  };\n} {\n  const {\n    inSamplePercent = 70,\n    numFolds = 5,\n    optimizationMetric = 'netProfit',\n    parameterRanges = {},\n    testOptions = {}\n  } = options;\n  \n  // Sort market data by timestamp\n  const sortedData = [...marketData].sort((a, b) => a.timestamp - b.timestamp);\n  \n  // Calculate fold size\n  const foldSize = Math.floor(sortedData.length / numFolds);\n  \n  const foldResults = [];\n  let totalInSampleProfit = 0;\n  let totalOutOfSampleProfit = 0;\n  \n  // Process each fold\n  for (let i = 0; i < numFolds; i++) {\n    // Calculate fold data indices\n    const startIdx = i * foldSize;\n    const endIdx = i === numFolds - 1 ? sortedData.length : (i + 1) * foldSize;\n    \n    // Split data into in-sample and out-of-sample\n    const foldData = sortedData.slice(startIdx, endIdx);\n    const inSampleSize = Math.floor(foldData.length * (inSamplePercent / 100));\n    \n    const inSampleData = foldData.slice(0, inSampleSize);\n    const outOfSampleData = foldData.slice(inSampleSize);\n    \n    // Skip fold if not enough data\n    if (inSampleData.length < 100 || outOfSampleData.length < 50) {\n      continue;\n    }\n    \n    // Optimize strategy on in-sample data\n    let optimizedParameters: StrategyParameters;\n    \n    if (Object.keys(parameterRanges).length > 0) {\n      // If parameter ranges provided, perform optimization\n      const optimizationResult = optimizeStrategy(\n        strategy.type,\n        inSampleData,\n        parameterRanges,\n        optimizationMetric,\n        strategy.parameters,\n        testOptions\n      );\n      \n      optimizedParameters = optimizationResult.bestParameters;\n    } else {\n      // Otherwise use original parameters\n      optimizedParameters = strategy.parameters;\n    }\n    \n    // Create optimized strategy\n    const optimizedStrategy: Strategy = {\n      ...strategy,\n      parameters: optimizedParameters\n    };\n    \n    // Test on in-sample data\n    const inSampleResult = backtestStrategy(optimizedStrategy, inSampleData, testOptions);\n    \n    // Test on out-of-sample data\n    const outOfSampleResult = backtestStrategy(optimizedStrategy, outOfSampleData, testOptions);\n    \n    // Store results\n    foldResults.push({\n      inSample: inSampleResult,\n      outOfSample: outOfSampleResult,\n      optimizedParameters\n    });\n    \n    // Accumulate profits for robustness calculation\n    totalInSampleProfit += inSampleResult.metrics.netProfit;\n    totalOutOfSampleProfit += outOfSampleResult.metrics.netProfit;\n  }\n  \n  // Calculate aggregate metrics\n  const inSampleMetrics: Record<string, number> = {};\n  const outOfSampleMetrics: Record<string, number> = {};\n  \n  // Initialize metrics\n  const metricKeys = [\n    'netProfit', 'winRate', 'profitFactor', 'maxDrawdownPercent', \n    'sharpeRatio', 'returnPercent', 'annualizedReturn'\n  ];\n  \n  for (const key of metricKeys) {\n    inSampleMetrics[key] = 0;\n    outOfSampleMetrics[key] = 0;\n  }\n  \n  // Calculate average metrics\n  for (const fold of foldResults) {\n    for (const key of metricKeys) {\n      inSampleMetrics[key] += fold.inSample.metrics[key] || 0;\n      outOfSampleMetrics[key] += fold.outOfSample.metrics[key] || 0;\n    }\n  }\n  \n  // Calculate averages\n  for (const key of metricKeys) {\n    inSampleMetrics[key] /= foldResults.length;\n    outOfSampleMetrics[key] /= foldResults.length;\n  }\n  \n  // Calculate robustness score (ratio of out-of-sample to in-sample performance)\n  // A score close to 1 indicates good robustness\n  const robustnessScore = totalInSampleProfit !== 0 \n    ? totalOutOfSampleProfit / totalInSampleProfit \n    : totalOutOfSampleProfit > 0 ? 1 : 0;\n  \n  return {\n    foldResults,\n    aggregateResult: {\n      inSampleMetrics,\n      outOfSampleMetrics,\n      robustnessScore\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/utils/technicalIndicators.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":422,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12436,12439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12436,12439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useStochastic' is assigned a value but never used.","line":427,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":427,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":433,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12750,12753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12750,12753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MarketData } from '@/types';\n\n/**\n * Enhanced Technical Indicators for Trading Strategies\n * Optimized for performance and accuracy\n */\n\nexport interface TechnicalIndicatorResult {\n  values: number[];\n  currentValue: number;\n  previousValue: number;\n  signal?: 'BUY' | 'SELL' | 'HOLD';\n  strength?: number; // 0-1 signal strength\n}\n\nexport interface BollingerBandsResult {\n  upper: number[];\n  middle: number[];\n  lower: number[];\n  currentPosition: 'ABOVE_UPPER' | 'BELOW_LOWER' | 'BETWEEN_BANDS';\n  bandwidth: number; // Current bandwidth as percentage\n}\n\nexport interface MACDResult {\n  macd: number[];\n  signal: number[];\n  histogram: number[];\n  currentSignal: 'BULLISH' | 'BEARISH' | 'NEUTRAL';\n  divergence?: 'BULLISH_DIV' | 'BEARISH_DIV' | 'NONE';\n}\n\nexport interface StochasticResult {\n  k: number[];\n  d: number[];\n  currentK: number;\n  currentD: number;\n  signal: 'BUY' | 'SELL' | 'HOLD';\n}\n\n/**\n * Calculate Simple Moving Average (SMA) with optimization\n */\nexport function calculateSMA(data: MarketData[], period: number): TechnicalIndicatorResult {\n  const prices = data.map(candle => candle.close);\n  const values: number[] = [];\n  \n  if (prices.length < period) {\n    throw new Error(`Insufficient data: need ${period} candles, got ${prices.length}`);\n  }\n  \n  // Use sliding window for efficiency\n  let sum = prices.slice(0, period).reduce((a, b) => a + b, 0);\n  values.push(sum / period);\n  \n  for (let i = period; i < prices.length; i++) {\n    sum = sum - prices[i - period] + prices[i];\n    values.push(sum / period);\n  }\n  \n  const currentValue = values[values.length - 1];\n  const previousValue = values[values.length - 2] || currentValue;\n  \n  return {\n    values,\n    currentValue,\n    previousValue,\n    signal: currentValue > previousValue ? 'BUY' : currentValue < previousValue ? 'SELL' : 'HOLD',\n    strength: Math.abs(currentValue - previousValue) / currentValue\n  };\n}\n\n/**\n * Calculate Exponential Moving Average (EMA) with optimization\n */\nexport function calculateEMA(data: MarketData[], period: number): TechnicalIndicatorResult {\n  const prices = data.map(candle => candle.close);\n  const values: number[] = [];\n  const smoothing = 2 / (period + 1);\n  \n  if (prices.length < period) {\n    throw new Error(`Insufficient data: need ${period} candles, got ${prices.length}`);\n  }\n  \n  // Start with SMA for first value\n  const initialSMA = prices.slice(0, period).reduce((a, b) => a + b, 0) / period;\n  values.push(initialSMA);\n  \n  // Calculate EMA\n  for (let i = period; i < prices.length; i++) {\n    const ema = (prices[i] * smoothing) + (values[values.length - 1] * (1 - smoothing));\n    values.push(ema);\n  }\n  \n  const currentValue = values[values.length - 1];\n  const previousValue = values[values.length - 2] || currentValue;\n  \n  return {\n    values,\n    currentValue,\n    previousValue,\n    signal: currentValue > previousValue ? 'BUY' : currentValue < previousValue ? 'SELL' : 'HOLD',\n    strength: Math.abs(currentValue - previousValue) / currentValue\n  };\n}\n\n/**\n * Calculate Relative Strength Index (RSI) with enhanced features\n */\nexport function calculateRSI(data: MarketData[], period: number = 14): TechnicalIndicatorResult {\n  const prices = data.map(candle => candle.close);\n  const values: number[] = [];\n  \n  if (prices.length < period + 1) {\n    throw new Error(`Insufficient data: need ${period + 1} candles, got ${prices.length}`);\n  }\n  \n  // Calculate price changes\n  const changes = [];\n  for (let i = 1; i < prices.length; i++) {\n    changes.push(prices[i] - prices[i - 1]);\n  }\n  \n  // Calculate initial averages using Wilder's smoothing\n  let avgGain = 0;\n  let avgLoss = 0;\n  \n  for (let i = 0; i < period; i++) {\n    if (changes[i] > 0) {\n      avgGain += changes[i];\n    } else {\n      avgLoss += Math.abs(changes[i]);\n    }\n  }\n  \n  avgGain /= period;\n  avgLoss /= period;\n  \n  // Calculate first RSI\n  let rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n  values.push(100 - (100 / (1 + rs)));\n  \n  // Calculate remaining RSI values using Wilder's smoothing\n  for (let i = period; i < changes.length; i++) {\n    const gain = changes[i] > 0 ? changes[i] : 0;\n    const loss = changes[i] < 0 ? Math.abs(changes[i]) : 0;\n    \n    avgGain = ((avgGain * (period - 1)) + gain) / period;\n    avgLoss = ((avgLoss * (period - 1)) + loss) / period;\n    \n    rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n    values.push(100 - (100 / (1 + rs)));\n  }\n  \n  const currentValue = values[values.length - 1];\n  const previousValue = values[values.length - 2] || currentValue;\n  \n  // Enhanced RSI signals\n  let signal: 'BUY' | 'SELL' | 'HOLD' = 'HOLD';\n  let strength = 0;\n  \n  if (currentValue < 30 && previousValue < currentValue) {\n    signal = 'BUY';\n    strength = (30 - currentValue) / 30;\n  } else if (currentValue > 70 && previousValue > currentValue) {\n    signal = 'SELL';\n    strength = (currentValue - 70) / 30;\n  }\n  \n  return {\n    values,\n    currentValue,\n    previousValue,\n    signal,\n    strength\n  };\n}\n\n/**\n * Calculate MACD with enhanced divergence detection\n */\nexport function calculateMACD(\n  data: MarketData[], \n  fastPeriod: number = 12, \n  slowPeriod: number = 26, \n  signalPeriod: number = 9\n): MACDResult {\n  const fastEMA = calculateEMA(data, fastPeriod);\n  const slowEMA = calculateEMA(data, slowPeriod);\n  \n  // Calculate MACD line (difference between fast and slow EMA)\n  const macd: number[] = [];\n  const startIndex = slowPeriod - fastPeriod;\n  \n  for (let i = startIndex; i < fastEMA.values.length; i++) {\n    macd.push(fastEMA.values[i] - slowEMA.values[i - startIndex]);\n  }\n  \n  // Calculate signal line (EMA of MACD)\n  const signal: number[] = [];\n  const smoothing = 2 / (signalPeriod + 1);\n  \n  // Start with SMA for signal line\n  const initialSignalSMA = macd.slice(0, signalPeriod).reduce((a, b) => a + b, 0) / signalPeriod;\n  signal.push(initialSignalSMA);\n  \n  for (let i = signalPeriod; i < macd.length; i++) {\n    const signalEMA = (macd[i] * smoothing) + (signal[signal.length - 1] * (1 - smoothing));\n    signal.push(signalEMA);\n  }\n  \n  // Calculate histogram\n  const histogram: number[] = [];\n  for (let i = 0; i < signal.length; i++) {\n    histogram.push(macd[i + (macd.length - signal.length)] - signal[i]);\n  }\n  \n  // Determine current signal\n  const currentHistogram = histogram[histogram.length - 1];\n  const previousHistogram = histogram[histogram.length - 2] || 0;\n  \n  let currentSignal: 'BULLISH' | 'BEARISH' | 'NEUTRAL' = 'NEUTRAL';\n  if (previousHistogram <= 0 && currentHistogram > 0) {\n    currentSignal = 'BULLISH';\n  } else if (previousHistogram >= 0 && currentHistogram < 0) {\n    currentSignal = 'BEARISH';\n  }\n  \n  return {\n    macd,\n    signal,\n    histogram,\n    currentSignal,\n    divergence: 'NONE' // Basic implementation, can be enhanced\n  };\n}\n\n/**\n * Calculate Bollinger Bands with enhanced analysis\n */\nexport function calculateBollingerBands(\n  data: MarketData[], \n  period: number = 20, \n  stdDev: number = 2\n): BollingerBandsResult {\n  const prices = data.map(candle => candle.close);\n  const sma = calculateSMA(data, period);\n  const middle = sma.values;\n  const upper: number[] = [];\n  const lower: number[] = [];\n  \n  for (let i = period - 1; i < prices.length; i++) {\n    const slice = prices.slice(i - period + 1, i + 1);\n    const mean = middle[i - (period - 1)];\n    \n    // Calculate standard deviation\n    const variance = slice.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / period;\n    const standardDeviation = Math.sqrt(variance);\n    \n    upper.push(mean + (standardDeviation * stdDev));\n    lower.push(mean - (standardDeviation * stdDev));\n  }\n  \n  const currentPrice = prices[prices.length - 1];\n  const currentUpper = upper[upper.length - 1];\n  const currentLower = lower[lower.length - 1];\n  const currentMiddle = middle[middle.length - 1];\n  \n  // Determine position\n  let currentPosition: 'ABOVE_UPPER' | 'BELOW_LOWER' | 'BETWEEN_BANDS' = 'BETWEEN_BANDS';\n  if (currentPrice > currentUpper) {\n    currentPosition = 'ABOVE_UPPER';\n  } else if (currentPrice < currentLower) {\n    currentPosition = 'BELOW_LOWER';\n  }\n  \n  // Calculate bandwidth (volatility measure)\n  const bandwidth = ((currentUpper - currentLower) / currentMiddle) * 100;\n  \n  return {\n    upper,\n    middle,\n    lower,\n    currentPosition,\n    bandwidth\n  };\n}\n\n/**\n * Calculate Stochastic Oscillator\n */\nexport function calculateStochastic(\n  data: MarketData[], \n  kPeriod: number = 14, \n  dPeriod: number = 3\n): StochasticResult {\n  const k: number[] = [];\n  const d: number[] = [];\n  \n  for (let i = kPeriod - 1; i < data.length; i++) {\n    const slice = data.slice(i - kPeriod + 1, i + 1);\n    const lowestLow = Math.min(...slice.map(candle => candle.low));\n    const highestHigh = Math.max(...slice.map(candle => candle.high));\n    const currentClose = data[i].close;\n    \n    const kValue = ((currentClose - lowestLow) / (highestHigh - lowestLow)) * 100;\n    k.push(kValue);\n  }\n  \n  // Calculate %D (SMA of %K)\n  for (let i = dPeriod - 1; i < k.length; i++) {\n    const slice = k.slice(i - dPeriod + 1, i + 1);\n    const dValue = slice.reduce((sum, val) => sum + val, 0) / dPeriod;\n    d.push(dValue);\n  }\n  \n  const currentK = k[k.length - 1];\n  const currentD = d[d.length - 1];\n  \n  // Generate signals\n  let signal: 'BUY' | 'SELL' | 'HOLD' = 'HOLD';\n  if (currentK < 20 && currentD < 20 && currentK > currentD) {\n    signal = 'BUY';\n  } else if (currentK > 80 && currentD > 80 && currentK < currentD) {\n    signal = 'SELL';\n  }\n  \n  return {\n    k,\n    d,\n    currentK,\n    currentD,\n    signal\n  };\n}\n\n/**\n * Moving Average Convergence/Divergence for trend confirmation\n */\nexport function calculateMovingAverageCrossover(\n  data: MarketData[], \n  fastPeriod: number = 9, \n  slowPeriod: number = 21\n): { signal: 'BUY' | 'SELL' | 'HOLD'; strength: number; confirmation: boolean } {\n  const fastMA = calculateEMA(data, fastPeriod);\n  const slowMA = calculateEMA(data, slowPeriod);\n  \n  const currentFast = fastMA.currentValue;\n  const previousFast = fastMA.previousValue;\n  const currentSlow = slowMA.currentValue;\n  const previousSlow = slowMA.previousValue;\n  \n  // Check for crossover\n  const bullishCrossover = previousFast <= previousSlow && currentFast > currentSlow;\n  const bearishCrossover = previousFast >= previousSlow && currentFast < currentSlow;\n  \n  // Calculate signal strength\n  const percentageDifference = Math.abs(currentFast - currentSlow) / currentSlow;\n  const strength = Math.min(percentageDifference * 10, 1);\n  \n  // Trend confirmation (fast MA should be trending in signal direction)\n  const fastTrend = currentFast > previousFast ? 'UP' : 'DOWN';\n  const confirmation = bullishCrossover ? fastTrend === 'UP' : bearishCrossover ? fastTrend === 'DOWN' : false;\n  \n  let signal: 'BUY' | 'SELL' | 'HOLD' = 'HOLD';\n  if (bullishCrossover) signal = 'BUY';\n  else if (bearishCrossover) signal = 'SELL';\n  \n  return { signal, strength, confirmation };\n}\n\n/**\n * Calculate Average True Range (ATR) for volatility measurement\n */\nexport function calculateATR(data: MarketData[], period: number = 14): TechnicalIndicatorResult {\n  const trueRanges: number[] = [];\n  \n  for (let i = 1; i < data.length; i++) {\n    const current = data[i];\n    const previous = data[i - 1];\n    \n    const tr1 = current.high - current.low;\n    const tr2 = Math.abs(current.high - previous.close);\n    const tr3 = Math.abs(current.low - previous.close);\n    \n    trueRanges.push(Math.max(tr1, tr2, tr3));\n  }\n  \n  // Calculate ATR using EMA\n  const values: number[] = [];\n  let atr = trueRanges.slice(0, period).reduce((sum, tr) => sum + tr, 0) / period;\n  values.push(atr);\n  \n  const multiplier = 2 / (period + 1);\n  for (let i = period; i < trueRanges.length; i++) {\n    atr = (trueRanges[i] * multiplier) + (atr * (1 - multiplier));\n    values.push(atr);\n  }\n  \n  const currentValue = values[values.length - 1];\n  const previousValue = values[values.length - 2] || currentValue;\n  \n  return {\n    values,\n    currentValue,\n    previousValue\n  };\n}\n\n/**\n * Combine multiple indicators for enhanced signal generation\n */\nexport function combineIndicatorSignals(\n  data: MarketData[],\n  options: {\n    useRSI?: boolean;\n    useMACD?: boolean;\n    useBB?: boolean;\n    useStochastic?: boolean;\n    useMA?: boolean;\n    weights?: { rsi: number; macd: number; bb: number; stochastic: number; ma: number };\n  } = {}\n): { signal: 'BUY' | 'SELL' | 'HOLD'; confidence: number; indicators: any } {\n  const {\n    useRSI = true,\n    useMACD = true,\n    useBB = true,\n    useStochastic = false,\n    useMA = true,\n    weights = { rsi: 0.3, macd: 0.3, bb: 0.2, stochastic: 0.1, ma: 0.1 }\n  } = options;\n  \n  const signals: Array<{ signal: string; weight: number; strength: number }> = [];\n  const indicators: any = {};\n  \n  if (useRSI) {\n    const rsi = calculateRSI(data);\n    indicators.rsi = rsi;\n    if (rsi.signal !== 'HOLD') {\n      signals.push({\n        signal: rsi.signal,\n        weight: weights.rsi,\n        strength: rsi.strength || 0.5\n      });\n    }\n  }\n  \n  if (useMACD) {\n    const macd = calculateMACD(data);\n    indicators.macd = macd;\n    if (macd.currentSignal !== 'NEUTRAL') {\n      signals.push({\n        signal: macd.currentSignal === 'BULLISH' ? 'BUY' : 'SELL',\n        weight: weights.macd,\n        strength: 0.7\n      });\n    }\n  }\n  \n  if (useBB) {\n    const bb = calculateBollingerBands(data);\n    indicators.bollingerBands = bb;\n    if (bb.currentPosition !== 'BETWEEN_BANDS') {\n      signals.push({\n        signal: bb.currentPosition === 'BELOW_LOWER' ? 'BUY' : 'SELL',\n        weight: weights.bb,\n        strength: 0.6\n      });\n    }\n  }\n  \n  if (useMA) {\n    const ma = calculateMovingAverageCrossover(data);\n    indicators.movingAverage = ma;\n    if (ma.signal !== 'HOLD') {\n      signals.push({\n        signal: ma.signal,\n        weight: weights.ma,\n        strength: ma.strength\n      });\n    }\n  }\n  \n  // Calculate weighted signal\n  const buySignals = signals.filter(s => s.signal === 'BUY');\n  const sellSignals = signals.filter(s => s.signal === 'SELL');\n  \n  const buyScore = buySignals.reduce((sum, s) => sum + (s.weight * s.strength), 0);\n  const sellScore = sellSignals.reduce((sum, s) => sum + (s.weight * s.strength), 0);\n  \n  let finalSignal: 'BUY' | 'SELL' | 'HOLD' = 'HOLD';\n  let confidence = 0;\n  \n  if (buyScore > sellScore && buyScore > 0.3) {\n    finalSignal = 'BUY';\n    confidence = Math.min(buyScore, 1);\n  } else if (sellScore > buyScore && sellScore > 0.3) {\n    finalSignal = 'SELL';\n    confidence = Math.min(sellScore, 1);\n  }\n  \n  return {\n    signal: finalSignal,\n    confidence,\n    indicators\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/home/braden/Desktop/Dev/polytrade/frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]