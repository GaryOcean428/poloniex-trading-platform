From c816ae19e5b1ca0853817c3c94cfff5c675a2c38 Mon Sep 17 00:00:00 2001
From: GaryOcean428 <braden.lang77@gmail.com>
Date: Tue, 22 Apr 2025 03:44:49 -0400
Subject: [PATCH] Fix TypeScript build errors: Chrome API types, unused
 variables, type mismatches, and context issues

---
 package-lock.json                             |  36 +++
 package.json                                  |   1 +
 src/App.tsx                                   |   4 +-
 src/components/ErrorBoundary.tsx              |   5 +-
 .../Extension/ExtensionControls.tsx           |  13 +-
 .../Extension/ExtensionSettings.tsx           |  11 +-
 src/components/Extension/ExtensionStatus.tsx  |  11 +-
 src/components/Integration.tsx                |   6 +-
 src/components/Navbar.tsx                     |   6 +-
 src/components/account/ApiKeyManagement.tsx   |   9 +-
 src/components/dashboard/QuickTrade.tsx       |   7 +-
 .../settings/SettingsExportImport.tsx         |   4 +-
 src/components/settings/TradingSettings.tsx   |   3 +-
 src/components/trading/AutomationPanel.tsx    |  10 +-
 .../trading/FuturesTradingPanel.tsx           |   6 +-
 src/components/trading/LiveTradingPanel.tsx   |   9 +-
 src/components/trading/StrategyBuilder.tsx    | 209 +++++++++++++-----
 src/components/ui/Tabs.tsx                    |   3 +-
 src/context/AuthContext.tsx                   |  12 +-
 src/context/SettingsContext.tsx               |  68 +++---
 src/context/TradingContext.tsx                |  24 +-
 src/data/mockData.ts                          |  31 ++-
 src/hooks/useApiRequest.ts                    |   2 +-
 src/hooks/useFuturesTrading.ts                |   4 +-
 src/hooks/usePoloniexData.ts                  |   4 +-
 src/pages/Account.tsx                         |  96 ++------
 src/pages/Settings.tsx                        |   5 +-
 src/pages/Strategies.tsx                      |   9 +-
 src/services/automatedTrading.ts              |   6 +-
 src/services/websocketService.ts              |  28 +--
 src/utils/chromeExtension.ts                  |  28 +--
 31 files changed, 378 insertions(+), 292 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index e527f2c..3249f7c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -29,6 +29,7 @@
         "zustand": "^4.4.6"
       },
       "devDependencies": {
+        "@types/chrome": "^0.0.313",
         "@types/crypto-js": "^4.2.1",
         "@types/node": "^20.10.0",
         "@types/react": "^18.2.37",
@@ -1493,6 +1494,17 @@
         "@babel/types": "^7.20.7"
       }
     },
+    "node_modules/@types/chrome": {
+      "version": "0.0.313",
+      "resolved": "https://registry.npmjs.org/@types/chrome/-/chrome-0.0.313.tgz",
+      "integrity": "sha512-9R5T7gTaYZhkxlu+Ho4wk9FL+y/werWQY2yjGWSqCuiTsqS7nL/BE5UMTP6rU7J+oIG2FRKqrEycHhJATeltVA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/filesystem": "*",
+        "@types/har-format": "*"
+      }
+    },
     "node_modules/@types/crypto-js": {
       "version": "4.2.2",
       "resolved": "https://registry.npmjs.org/@types/crypto-js/-/crypto-js-4.2.2.tgz",
@@ -1511,6 +1523,30 @@
       "integrity": "sha512-dNKVfHd/jk0SkR/exKGj2ggkB45MAkzvWCaqLUUgkyjITkGNzH8H+yUwr+BLJUBjZOe9w8X3wgmXhZDRg1ED6A==",
       "license": "MIT"
     },
+    "node_modules/@types/filesystem": {
+      "version": "0.0.36",
+      "resolved": "https://registry.npmjs.org/@types/filesystem/-/filesystem-0.0.36.tgz",
+      "integrity": "sha512-vPDXOZuannb9FZdxgHnqSwAG/jvdGM8Wq+6N4D/d80z+D4HWH+bItqsZaVRQykAn6WEVeEkLm2oQigyHtgb0RA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/filewriter": "*"
+      }
+    },
+    "node_modules/@types/filewriter": {
+      "version": "0.0.33",
+      "resolved": "https://registry.npmjs.org/@types/filewriter/-/filewriter-0.0.33.tgz",
+      "integrity": "sha512-xFU8ZXTw4gd358lb2jw25nxY9QAgqn2+bKKjKOYfNCzN4DKCFetK7sPtrlpg66Ywe3vWY9FNxprZawAh9wfJ3g==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/har-format": {
+      "version": "1.2.16",
+      "resolved": "https://registry.npmjs.org/@types/har-format/-/har-format-1.2.16.tgz",
+      "integrity": "sha512-fluxdy7ryD3MV6h8pTfTYpy/xQzCFC7m89nOH9y94cNqJ1mDIDPut7MnRHI3F6qRmh/cT2fUjG1MLdCNb4hE9A==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/json-schema": {
       "version": "7.0.15",
       "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
diff --git a/package.json b/package.json
index 0984b66..66e7659 100644
--- a/package.json
+++ b/package.json
@@ -32,6 +32,7 @@
     "zustand": "^4.4.6"
   },
   "devDependencies": {
+    "@types/chrome": "^0.0.313",
     "@types/crypto-js": "^4.2.1",
     "@types/node": "^20.10.0",
     "@types/react": "^18.2.37",
diff --git a/src/App.tsx b/src/App.tsx
index b775557..5354104 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,4 +1,4 @@
-import React from 'react';
+// React is used implicitly for JSX transformation
 import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
 import Dashboard from './pages/Dashboard';
 import Strategies from './pages/Strategies';
@@ -44,4 +44,4 @@ function App() {
   );
 }
 
-export default App
\ No newline at end of file
+export default App
diff --git a/src/components/ErrorBoundary.tsx b/src/components/ErrorBoundary.tsx
index 08ce314..f88232f 100644
--- a/src/components/ErrorBoundary.tsx
+++ b/src/components/ErrorBoundary.tsx
@@ -1,4 +1,5 @@
-import React, { Component, ErrorInfo, ReactNode } from 'react';
+// React is used implicitly for JSX transformation
+import { Component, ErrorInfo, ReactNode } from 'react';
 import { AlertTriangle } from 'lucide-react';
 
 interface Props {
@@ -53,4 +54,4 @@ export class ErrorBoundary extends Component<Props, State> {
 
     return this.props.children;
   }
-}
\ No newline at end of file
+}
diff --git a/src/components/Extension/ExtensionControls.tsx b/src/components/Extension/ExtensionControls.tsx
index ee637d0..9051f35 100644
--- a/src/components/Extension/ExtensionControls.tsx
+++ b/src/components/Extension/ExtensionControls.tsx
@@ -1,5 +1,6 @@
-import React, { useState } from 'react';
-import { X, ChevronDown, ChevronUp, RefreshCw, Settings, Info } from 'lucide-react';
+// React is used implicitly for JSX transformation
+import { useState } from 'react';
+import { X, RefreshCw, Info } from 'lucide-react';
 import ExtensionStatus from './ExtensionStatus';
 import ExtensionSettings from './ExtensionSettings';
 import { useSettings } from '../../context/SettingsContext';
@@ -9,7 +10,8 @@ interface ExtensionControlsProps {
 }
 
 const ExtensionControls: React.FC<ExtensionControlsProps> = ({ onClose }) => {
-  const { apiKey, apiSecret } = useSettings();
+  // Removed unused apiKey variable
+  const { } = useSettings();
   const [activePanel, setActivePanel] = useState<'status' | 'settings' | 'info'>('status');
   const [isRefreshing, setIsRefreshing] = useState(false);
   
@@ -25,7 +27,8 @@ const ExtensionControls: React.FC<ExtensionControlsProps> = ({ onClose }) => {
         chrome.runtime.sendMessage(
           extensionId,
           { type: 'REFRESH_DATA' },
-          (response) => {
+          () => {
+            // Removed unused response parameter
             setIsRefreshing(false);
           }
         );
@@ -150,4 +153,4 @@ const ExtensionControls: React.FC<ExtensionControlsProps> = ({ onClose }) => {
   );
 };
 
-export default ExtensionControls;
\ No newline at end of file
+export default ExtensionControls;
diff --git a/src/components/Extension/ExtensionSettings.tsx b/src/components/Extension/ExtensionSettings.tsx
index 43dd4e8..83033e5 100644
--- a/src/components/Extension/ExtensionSettings.tsx
+++ b/src/components/Extension/ExtensionSettings.tsx
@@ -1,4 +1,5 @@
-import React, { useState, useEffect } from 'react';
+// React is used implicitly for JSX transformation
+import { useState, useEffect } from 'react';
 import { Shield, Lock, TerminalSquare, Zap } from 'lucide-react';
 import { useSettings } from '../../context/SettingsContext';
 
@@ -30,7 +31,7 @@ const ExtensionSettings: React.FC<ExtensionSettingsProps> = ({ onClose }) => {
         chrome.runtime.sendMessage(
           extensionId,
           { type: 'CHECK_INSTALLATION' },
-          (response) => {
+          (response: any) => {
             if (response && response.installed) {
               setExtensionStatus('Connected');
             } else {
@@ -90,7 +91,7 @@ const ExtensionSettings: React.FC<ExtensionSettingsProps> = ({ onClose }) => {
             riskLimit: formData.riskLimit
           }
         },
-        (response) => {
+        (response: any) => {
           console.log('Extension settings updated:', response);
         }
       );
@@ -105,7 +106,7 @@ const ExtensionSettings: React.FC<ExtensionSettingsProps> = ({ onClose }) => {
             apiSecret: formData.apiSecret
           }
         },
-        (response) => {
+        (response: any) => {
           console.log('Extension API credentials updated:', response);
         }
       );
@@ -324,4 +325,4 @@ const ExtensionSettings: React.FC<ExtensionSettingsProps> = ({ onClose }) => {
   );
 };
 
-export default ExtensionSettings;
\ No newline at end of file
+export default ExtensionSettings;
diff --git a/src/components/Extension/ExtensionStatus.tsx b/src/components/Extension/ExtensionStatus.tsx
index 4acfd72..cff483f 100644
--- a/src/components/Extension/ExtensionStatus.tsx
+++ b/src/components/Extension/ExtensionStatus.tsx
@@ -1,4 +1,5 @@
-import React, { useState, useEffect } from 'react';
+// React is used implicitly for JSX transformation
+import { useState, useEffect } from 'react';
 import { Zap, Check, AlertTriangle, RefreshCw, MonitorSmartphone } from 'lucide-react';
 
 interface ExtensionStatusProps {
@@ -31,7 +32,7 @@ const ExtensionStatus: React.FC<ExtensionStatusProps> = ({ onRefreshRequest }) =
         chrome.runtime.sendMessage(
           extensionId,
           { type: 'CHECK_INSTALLATION' },
-          (response) => {
+          (response: any) => {
             if (response && response.installed) {
               setExtensionStatus('connected');
               
@@ -39,7 +40,7 @@ const ExtensionStatus: React.FC<ExtensionStatusProps> = ({ onRefreshRequest }) =
               chrome.runtime.sendMessage(
                 extensionId,
                 { type: 'CHECK_TRADINGVIEW_STATUS' },
-                (response) => {
+                (response: any) => {
                   setTradingViewStatus(response && response.connected ? 'connected' : 'disconnected');
                 }
               );
@@ -47,7 +48,7 @@ const ExtensionStatus: React.FC<ExtensionStatusProps> = ({ onRefreshRequest }) =
               chrome.runtime.sendMessage(
                 extensionId,
                 { type: 'CHECK_POLONIEX_STATUS' },
-                (response) => {
+                (response: any) => {
                   setPoloniexStatus(response && response.connected ? 'connected' : 'disconnected');
                   setIsRefreshing(false);
                 }
@@ -187,4 +188,4 @@ const StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {
   }
 };
 
-export default ExtensionStatus;
\ No newline at end of file
+export default ExtensionStatus;
diff --git a/src/components/Integration.tsx b/src/components/Integration.tsx
index 25650e4..507846c 100644
--- a/src/components/Integration.tsx
+++ b/src/components/Integration.tsx
@@ -24,7 +24,7 @@ const Integration: React.FC = () => {
         chrome.runtime.sendMessage(
           extensionId,
           { type: 'CHECK_INSTALLATION' },
-          (response) => {
+          (response: any) => {
             if (response && response.installed) {
               setIsExtensionInstalled(true);
               console.log('Extension is installed and connected!');
@@ -63,7 +63,7 @@ const Integration: React.FC = () => {
             apiSecret
           }
         },
-        (response) => {
+        (response: any) => {
           if (response && response.success) {
             console.log('API credentials updated in extension');
           }
@@ -103,4 +103,4 @@ const Integration: React.FC = () => {
   return null;
 };
 
-export default Integration;
\ No newline at end of file
+export default Integration;
diff --git a/src/components/Navbar.tsx b/src/components/Navbar.tsx
index f083bc5..4e0226c 100644
--- a/src/components/Navbar.tsx
+++ b/src/components/Navbar.tsx
@@ -1,10 +1,10 @@
-import React, { useState } from 'react';
+import { useState } from 'react';
 import { Bell, User, Menu } from 'lucide-react';
 import { Link } from 'react-router-dom';
 import { useSettings } from '../context/SettingsContext';
 
 const Navbar: React.FC = () => {
-  const [notifications, setNotifications] = useState<number>(3);
+  const [notifications] = useState<number>(3);
   const { hasStoredCredentials } = useSettings();
   
   return (
@@ -41,4 +41,4 @@ const Navbar: React.FC = () => {
   );
 };
 
-export default Navbar;
\ No newline at end of file
+export default Navbar;
diff --git a/src/components/account/ApiKeyManagement.tsx b/src/components/account/ApiKeyManagement.tsx
index 62f6a6d..c19e752 100644
--- a/src/components/account/ApiKeyManagement.tsx
+++ b/src/components/account/ApiKeyManagement.tsx
@@ -1,5 +1,5 @@
-import React, { useState } from 'react';
-import { Key, Copy, Eye, EyeOff, Plus, Trash2, AlertTriangle, Clock, Shield, RefreshCw } from 'lucide-react';
+import { useState } from 'react';
+import { Copy, Plus, Trash2, AlertTriangle, Shield, RefreshCw } from 'lucide-react';
 import { useSettings } from '../../context/SettingsContext';
 
 interface ApiKey {
@@ -17,9 +17,8 @@ interface ApiKey {
 }
 
 const ApiKeyManagement: React.FC = () => {
-  const { apiKey, apiSecret, updateSettings } = useSettings();
+  const { apiKey } = useSettings();
   const [showCreateForm, setShowCreateForm] = useState(false);
-  const [showSecret, setShowSecret] = useState(false);
   const [newKeyForm, setNewKeyForm] = useState({
     name: '',
     permissions: {
@@ -333,4 +332,4 @@ const ApiKeyManagement: React.FC = () => {
   );
 };
 
-export default ApiKeyManagement;
\ No newline at end of file
+export default ApiKeyManagement;
diff --git a/src/components/dashboard/QuickTrade.tsx b/src/components/dashboard/QuickTrade.tsx
index 60a38b1..bd3c31a 100644
--- a/src/components/dashboard/QuickTrade.tsx
+++ b/src/components/dashboard/QuickTrade.tsx
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import { useState } from 'react';
 import { useTradingContext } from '../../context/TradingContext';
 
 const QuickTrade: React.FC = () => {
@@ -10,9 +10,6 @@ const QuickTrade: React.FC = () => {
   const [price, setPrice] = useState('');
   const [orderStatus, setOrderStatus] = useState<string | null>(null);
   
-  // In a real application, this would be fetched from an API
-  const marketPrice = 51234.56;
-  
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault();
     setOrderStatus(null);
@@ -169,4 +166,4 @@ const QuickTrade: React.FC = () => {
   );
 };
 
-export default QuickTrade;
\ No newline at end of file
+export default QuickTrade;
diff --git a/src/components/settings/SettingsExportImport.tsx b/src/components/settings/SettingsExportImport.tsx
index 305938c..665f539 100644
--- a/src/components/settings/SettingsExportImport.tsx
+++ b/src/components/settings/SettingsExportImport.tsx
@@ -1,6 +1,6 @@
-import React, { useState } from 'react';
+import { useState } from 'react';
 import { useSettings } from '@/context/SettingsContext';
-import { Card, CardHeader, CardBody, CardFooter, Button, Input, Textarea, Alert } from '@/components/ui';
+import { Card, CardHeader, CardBody, Button, Textarea, Alert } from '@/components/ui';
 
 const SettingsExportImport: React.FC = () => {
   const { exportSettings, importSettings } = useSettings();
diff --git a/src/components/settings/TradingSettings.tsx b/src/components/settings/TradingSettings.tsx
index ebf9054..eca1701 100644
--- a/src/components/settings/TradingSettings.tsx
+++ b/src/components/settings/TradingSettings.tsx
@@ -1,6 +1,5 @@
-import React, { useState } from 'react';
 import { useSettings } from '@/context/SettingsContext';
-import { Card, CardHeader, CardBody, CardFooter, Button, Input, Switch, Select, Label } from '@/components/ui';
+import { Card, CardHeader, CardBody, CardFooter, Input, Switch, Select, Label } from '@/components/ui';
 
 const TradingSettings: React.FC = () => {
   const { 
diff --git a/src/components/trading/AutomationPanel.tsx b/src/components/trading/AutomationPanel.tsx
index 594a8b2..c2ed3fb 100644
--- a/src/components/trading/AutomationPanel.tsx
+++ b/src/components/trading/AutomationPanel.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import { useState, useEffect } from 'react';
 import { useSettings } from '@/context/SettingsContext';
 import { tradingEngine } from '@/trading/tradingEngine';
 import { executeStrategy } from '@/utils/strategyExecutors';
@@ -10,7 +10,7 @@ const AutomationPanel: React.FC = () => {
   const { 
     autoTradingEnabled, 
     defaultPair,
-    timeframe,
+    // Removed unused timeframe variable
     leverage,
     riskPerTrade,
     stopLossPercent,
@@ -105,14 +105,12 @@ const AutomationPanel: React.FC = () => {
         
         // Check if we're in paper or live mode
         if (tradingEngine.modeManager.isLiveMode()) {
-          // For live trading, use the API
+          // For live trading, use the API - fixed parameter count
           await poloniexApi.placeOrder(
             pair,
             side,
             'market',
-            0.001, // Minimum order size
-            undefined,
-            leverage
+            0.001 // Minimum order size
           );
         } else {
           // For paper trading, use the paper engine
diff --git a/src/components/trading/FuturesTradingPanel.tsx b/src/components/trading/FuturesTradingPanel.tsx
index dc66152..e80c1f1 100644
--- a/src/components/trading/FuturesTradingPanel.tsx
+++ b/src/components/trading/FuturesTradingPanel.tsx
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import { useState } from 'react';
 import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
 import { Button } from '@/components/ui/Button';
 import { Input } from '@/components/ui/Input';
@@ -29,7 +29,7 @@ const FuturesTradingPanel: React.FC<FuturesTradingPanelProps> = ({ symbol }) =>
   const [positionSide, setPositionSide] = useState<PositionSide>(PositionSide.LONG);
   const [price, setPrice] = useState<string>('');
   const [quantity, setQuantity] = useState<string>('');
-  const [leverage, setLeverage] = useState<string>('10');
+  const [leverage, setLeverageState] = useState<string>('10');
   const [marginMode, setMarginMode] = useState<MarginMode>(MarginMode.CROSS);
   const [isReduceOnly, setIsReduceOnly] = useState<boolean>(false);
   const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
@@ -57,7 +57,7 @@ const FuturesTradingPanel: React.FC<FuturesTradingPanelProps> = ({ symbol }) =>
 
   // Handle leverage change
   const handleLeverageChange = async (newLeverage: string) => {
-    setLeverage(newLeverage);
+    setLeverageState(newLeverage);
     
     try {
       await setLeverage(symbol, newLeverage, marginMode);
diff --git a/src/components/trading/LiveTradingPanel.tsx b/src/components/trading/LiveTradingPanel.tsx
index 1743182..15fd356 100644
--- a/src/components/trading/LiveTradingPanel.tsx
+++ b/src/components/trading/LiveTradingPanel.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import { useState, useEffect } from 'react';
 import { useSettings } from '@/context/SettingsContext';
 import { tradingEngine } from '@/trading/tradingEngine';
 import { Card, CardHeader, CardBody, CardFooter, Button, Switch, Label, Alert } from '@/components/ui';
@@ -8,10 +8,7 @@ const LiveTradingPanel: React.FC = () => {
     isLiveTrading, 
     apiKey, 
     apiSecret, 
-    leverage, 
-    riskPerTrade,
-    stopLossPercent,
-    takeProfitPercent,
+    // Removed unused variables
     autoTradingEnabled,
     updateSettings
   } = useSettings();
@@ -45,7 +42,7 @@ const LiveTradingPanel: React.FC = () => {
     return () => {
       tradingEngine.stopTrading();
     };
-  }, []);
+  }, [isLiveTrading]);
   
   // Toggle trading mode
   const toggleTradingMode = async () => {
diff --git a/src/components/trading/StrategyBuilder.tsx b/src/components/trading/StrategyBuilder.tsx
index fd63206..c89b4b0 100644
--- a/src/components/trading/StrategyBuilder.tsx
+++ b/src/components/trading/StrategyBuilder.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import { useState, useEffect } from 'react';
 import { useSettings } from '@/context/SettingsContext';
 import { Strategy, MarketData } from '@/types';
 import { executeStrategy } from '@/utils/strategyExecutors';
@@ -41,12 +41,19 @@ interface BollingerBandsParameters extends BaseParameters {
   stdDev: number;
 }
 
+interface CustomParameters extends BaseParameters {
+  // Add any custom parameters here
+  lookbackPeriod: number;
+  breakoutThreshold: number;
+}
+
 // Union type for all parameter types
 export type StrategyParameters = 
   | MovingAverageCrossoverParameters 
   | RSIParameters 
   | MACDParameters 
-  | BollingerBandsParameters;
+  | BollingerBandsParameters
+  | CustomParameters;
 
 // Test result interface
 interface TestResult {
@@ -125,7 +132,7 @@ const StrategyBuilder: React.FC = () => {
     setError(null);
     
     try {
-      const pair = newStrategy.parameters?.pair || defaultPair;
+      const pair = (newStrategy.parameters as BaseParameters)?.pair || defaultPair;
       const data = await poloniexApi.getMarketData(pair);
       setMarketData(data);
     } catch (err) {
@@ -245,8 +252,10 @@ const StrategyBuilder: React.FC = () => {
       default:
         parameters = { 
           pair: defaultPair, 
-          timeframe 
-        } as BaseParameters;
+          timeframe,
+          lookbackPeriod: 20,
+          breakoutThreshold: 2
+        } as CustomParameters;
     }
     
     setNewStrategy({
@@ -464,6 +473,49 @@ const StrategyBuilder: React.FC = () => {
           </>
         );
       }
+      
+      case 'Custom': {
+        const params = parameters as CustomParameters;
+        return (
+          <>
+            <div className="mb-4">
+              <Label htmlFor="lookbackPeriod">Lookback Period</Label>
+              <Input
+                id="lookbackPeriod"
+                type="number"
+                value={params.lookbackPeriod || 20}
+                onChange={(e) => setNewStrategy({
+                  ...newStrategy,
+                  parameters: { 
+                    ...parameters, 
+                    lookbackPeriod: parseInt(e.target.value) 
+                  } as CustomParameters
+                })}
+                min="5"
+                max="100"
+              />
+            </div>
+            <div className="mb-4">
+              <Label htmlFor="breakoutThreshold">Breakout Threshold</Label>
+              <Input
+                id="breakoutThreshold"
+                type="number"
+                value={params.breakoutThreshold || 2}
+                onChange={(e) => setNewStrategy({
+                  ...newStrategy,
+                  parameters: { 
+                    ...parameters, 
+                    breakoutThreshold: parseFloat(e.target.value) 
+                  } as CustomParameters
+                })}
+                min="0.5"
+                max="5"
+                step="0.1"
+              />
+            </div>
+          </>
+        );
+      }
         
       default:
         return null;
@@ -524,10 +576,13 @@ const StrategyBuilder: React.FC = () => {
               <Label htmlFor="pair">Trading Pair</Label>
               <Input
                 id="pair"
-                value={newStrategy.parameters?.pair || defaultPair}
+                value={(newStrategy.parameters as BaseParameters)?.pair || defaultPair}
                 onChange={(e) => setNewStrategy({
                   ...newStrategy,
-                  parameters: { ...newStrategy.parameters, pair: e.target.value } as StrategyParameters
+                  parameters: { 
+                    ...newStrategy.parameters, 
+                    pair: e.target.value 
+                  } as StrategyParameters
                 })}
                 placeholder="BTC-USDT"
               />
@@ -537,32 +592,44 @@ const StrategyBuilder: React.FC = () => {
               <Label htmlFor="timeframe">Timeframe</Label>
               <Select
                 id="timeframe"
-                value={newStrategy.parameters?.timeframe || timeframe}
+                value={(newStrategy.parameters as BaseParameters)?.timeframe || timeframe}
                 onChange={(e) => setNewStrategy({
                   ...newStrategy,
-                  parameters: { ...newStrategy.parameters, timeframe: e.target.value } as StrategyParameters
+                  parameters: { 
+                    ...newStrategy.parameters, 
+                    timeframe: e.target.value 
+                  } as StrategyParameters
                 })}
               >
-                <SelectOption value="1m">1 minute</SelectOption>
-                <SelectOption value="5m">5 minutes</SelectOption>
-                <SelectOption value="15m">15 minutes</SelectOption>
-                <SelectOption value="1h">1 hour</SelectOption>
-                <SelectOption value="4h">4 hours</SelectOption>
-                <SelectOption value="1d">1 day</SelectOption>
+                <SelectOption value="1m">1 Minute</SelectOption>
+                <SelectOption value="5m">5 Minutes</SelectOption>
+                <SelectOption value="15m">15 Minutes</SelectOption>
+                <SelectOption value="1h">1 Hour</SelectOption>
+                <SelectOption value="4h">4 Hours</SelectOption>
+                <SelectOption value="1d">1 Day</SelectOption>
               </Select>
             </div>
             
             {renderParameterInputs()}
+            
+            <div className="flex space-x-2 pt-4">
+              <Button
+                type="button"
+                onClick={resetNewStrategy}
+                variant="outline"
+              >
+                Reset
+              </Button>
+              <Button
+                type="button"
+                onClick={saveStrategy}
+                disabled={!newStrategy.id || !newStrategy.name}
+              >
+                {selectedStrategy ? 'Update Strategy' : 'Save Strategy'}
+              </Button>
+            </div>
           </div>
         </div>
-        <div className="p-4 border-t flex justify-between">
-          <Button variant="outline" onClick={resetNewStrategy}>
-            {selectedStrategy ? 'Cancel' : 'Reset'}
-          </Button>
-          <Button onClick={saveStrategy} disabled={isLoading}>
-            {selectedStrategy ? 'Update Strategy' : 'Save Strategy'}
-          </Button>
-        </div>
       </Card>
       
       <Card className="w-full">
@@ -570,47 +637,79 @@ const StrategyBuilder: React.FC = () => {
           <h3 className="text-lg font-medium">Test & Manage Strategies</h3>
         </div>
         <div className="p-4">
-          <div className="space-y-4">
-            <div className="flex space-x-2">
-              <Button onClick={loadMarketData} disabled={isLoading} className="flex-1">
-                Load Market Data
+          <div className="mb-6">
+            <h4 className="font-medium mb-2">Test Current Strategy</h4>
+            <div className="flex space-x-2 mb-4">
+              <Button
+                type="button"
+                onClick={loadMarketData}
+                disabled={isLoading}
+                variant="outline"
+              >
+                {isLoading ? 'Loading...' : 'Load Market Data'}
               </Button>
-              <Button onClick={testStrategy} disabled={isLoading || !marketData.length} className="flex-1">
+              <Button
+                type="button"
+                onClick={testStrategy}
+                disabled={!marketData.length || isLoading}
+              >
                 Test Strategy
               </Button>
             </div>
             
             {testResult && (
-              <div className="p-4 border rounded-md">
-                <h4 className="font-medium mb-2">Test Result:</h4>
-                <p><strong>Signal:</strong> {testResult.signal || 'No signal'}</p>
-                <p><strong>Reason:</strong> {testResult.reason}</p>
-                <p><strong>Confidence:</strong> {(testResult.confidence * 100).toFixed(2)}%</p>
+              <div className={`p-4 rounded-lg ${
+                testResult.signal === 'BUY' 
+                  ? 'bg-green-100 text-green-800' 
+                  : testResult.signal === 'SELL' 
+                    ? 'bg-red-100 text-red-800' 
+                    : 'bg-gray-100 text-gray-800'
+              }`}>
+                <div className="font-medium">
+                  Signal: {testResult.signal || 'NEUTRAL'}
+                </div>
+                <div className="text-sm mt-1">
+                  {testResult.reason}
+                </div>
+                <div className="text-sm mt-2">
+                  Confidence: {testResult.confidence}%
+                </div>
               </div>
             )}
-            
-            <div className="mt-6">
-              <h4 className="font-medium mb-2">Saved Strategies</h4>
-              {strategies.length === 0 ? (
-                <p className="text-gray-500">No strategies saved yet</p>
-              ) : (
-                <div className="space-y-2">
-                  {strategies.map(strategy => (
-                    <div key={strategy.id} className="p-3 border rounded-md flex justify-between items-center">
-                      <div>
-                        <p className="font-medium">{strategy.name}</p>
-                        <p className="text-sm text-gray-500">{strategy.type} - {strategy.parameters.pair}</p>
-                      </div>
-                      <div className="flex space-x-2">
-                        <Button size="sm" variant="outline" onClick={() => selectStrategy(strategy)}>
-                          Edit
-                        </Button>
-                        <Button size="sm" variant="outline" onClick={() => deleteStrategy(strategy.id)}>
-                          Delete
-                        </Button>
-                      </div>
+          </div>
+          
+          <div>
+            <h4 className="font-medium mb-2">Saved Strategies</h4>
+            <div className="space-y-2">
+              {strategies.map(strategy => (
+                <div 
+                  key={strategy.id}
+                  className={`p-3 border rounded-md cursor-pointer ${
+                    selectedStrategy?.id === strategy.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
+                  }`}
+                  onClick={() => selectStrategy(strategy)}
+                >
+                  <div className="flex justify-between items-center">
+                    <div>
+                      <div className="font-medium">{strategy.name}</div>
+                      <div className="text-xs text-gray-500">{strategy.type}</div>
                     </div>
-                  ))}
+                    <button
+                      className="text-red-500 hover:text-red-700"
+                      onClick={(e) => {
+                        e.stopPropagation();
+                        deleteStrategy(strategy.id);
+                      }}
+                    >
+                      Delete
+                    </button>
+                  </div>
+                </div>
+              ))}
+              
+              {strategies.length === 0 && (
+                <div className="text-center py-4 text-gray-500">
+                  No saved strategies yet
                 </div>
               )}
             </div>
diff --git a/src/components/ui/Tabs.tsx b/src/components/ui/Tabs.tsx
index 84162a4..df8280a 100644
--- a/src/components/ui/Tabs.tsx
+++ b/src/components/ui/Tabs.tsx
@@ -78,7 +78,8 @@ interface TabsTriggerProps {
   onSelect?: () => void;
 }
 
-const TabsTrigger = ({ className, value, children, active, onSelect }: TabsTriggerProps) => {
+// Removed unused value parameter from the function parameters, keeping it in the interface
+const TabsTrigger = ({ className, children, active, onSelect }: TabsTriggerProps) => {
   return (
     <button
       className={cn(
diff --git a/src/context/AuthContext.tsx b/src/context/AuthContext.tsx
index 3e3e7e7..cf32df4 100644
--- a/src/context/AuthContext.tsx
+++ b/src/context/AuthContext.tsx
@@ -6,6 +6,7 @@ interface AuthContextType {
   login: (token: string, expiresIn: number) => void;
   logout: () => void;
   user: UserProfile | null;
+  isAuthenticated: boolean; // Added for FuturesContext
 }
 
 interface UserProfile {
@@ -19,7 +20,8 @@ const AuthContext = createContext<AuthContextType>({
   isLoggedIn: false,
   login: () => {},
   logout: () => {},
-  user: null
+  user: null,
+  isAuthenticated: false // Added for FuturesContext
 });
 
 export const useAuth = () => useContext(AuthContext);
@@ -78,7 +80,13 @@ export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
   };
 
   return (
-    <AuthContext.Provider value={{ isLoggedIn, login, logout, user }}>
+    <AuthContext.Provider value={{ 
+      isLoggedIn, 
+      login, 
+      logout, 
+      user,
+      isAuthenticated: isLoggedIn // Added for FuturesContext
+    }}>
       {children}
     </AuthContext.Provider>
   );
diff --git a/src/context/SettingsContext.tsx b/src/context/SettingsContext.tsx
index 7b59083..905e44d 100644
--- a/src/context/SettingsContext.tsx
+++ b/src/context/SettingsContext.tsx
@@ -25,6 +25,7 @@ interface SettingsContextType {
   hasStoredCredentials: boolean;
   exportSettings: () => string;
   importSettings: (settingsJson: string) => boolean;
+  mockMode?: boolean; // Added for FuturesContext
 }
 
 interface SettingsState {
@@ -69,8 +70,9 @@ const defaultSettings: SettingsState = {
   autoTradingEnabled: false
 };
 
-// Add new storage keys
-Object.assign(STORAGE_KEYS, {
+// Define storage keys
+const EXTENDED_STORAGE_KEYS = {
+  ...STORAGE_KEYS,
   CHART_TYPE: 'poloniex_chart_type',
   TIMEFRAME: 'poloniex_timeframe',
   LEVERAGE: 'poloniex_leverage',
@@ -79,7 +81,7 @@ Object.assign(STORAGE_KEYS, {
   TAKE_PROFIT_PERCENT: 'poloniex_take_profit_percent',
   TRAILING_STOP_PERCENT: 'poloniex_trailing_stop_percent',
   AUTO_TRADING_ENABLED: 'poloniex_auto_trading_enabled'
-});
+};
 
 const SettingsContext = createContext<SettingsContextType | undefined>(undefined);
 
@@ -102,24 +104,24 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
     }
 
     return {
-      apiKey: getStorageItem(STORAGE_KEYS.API_KEY, import.meta.env.VITE_POLONIEX_API_KEY || ''),
-      apiSecret: getStorageItem(STORAGE_KEYS.API_SECRET, import.meta.env.VITE_POLONIEX_API_SECRET || ''),
-      isLiveTrading: getStorageItem(STORAGE_KEYS.IS_LIVE_TRADING, false),
-      darkMode: getStorageItem(STORAGE_KEYS.DARK_MODE, false),
-      defaultPair: getStorageItem(STORAGE_KEYS.DEFAULT_PAIR, 'BTC-USDT'),
-      emailNotifications: getStorageItem(STORAGE_KEYS.EMAIL_NOTIFICATIONS, true),
-      tradeNotifications: getStorageItem(STORAGE_KEYS.TRADE_NOTIFICATIONS, true),
-      priceAlerts: getStorageItem(STORAGE_KEYS.PRICE_ALERTS, false),
-      chatNotifications: getStorageItem(STORAGE_KEYS.CHAT_NOTIFICATIONS, true),
-      showExtension: getStorageItem(STORAGE_KEYS.SHOW_EXTENSION, true),
-      chartType: getStorageItem(STORAGE_KEYS.CHART_TYPE, 'candle'),
-      timeframe: getStorageItem(STORAGE_KEYS.TIMEFRAME, '5m'),
-      leverage: getStorageItem(STORAGE_KEYS.LEVERAGE, 1),
-      riskPerTrade: getStorageItem(STORAGE_KEYS.RISK_PER_TRADE, 2),
-      stopLossPercent: getStorageItem(STORAGE_KEYS.STOP_LOSS_PERCENT, 2),
-      takeProfitPercent: getStorageItem(STORAGE_KEYS.TAKE_PROFIT_PERCENT, 4),
-      trailingStopPercent: getStorageItem(STORAGE_KEYS.TRAILING_STOP_PERCENT, 1),
-      autoTradingEnabled: getStorageItem(STORAGE_KEYS.AUTO_TRADING_ENABLED, false)
+      apiKey: getStorageItem(EXTENDED_STORAGE_KEYS.API_KEY, import.meta.env.VITE_POLONIEX_API_KEY || ''),
+      apiSecret: getStorageItem(EXTENDED_STORAGE_KEYS.API_SECRET, import.meta.env.VITE_POLONIEX_API_SECRET || ''),
+      isLiveTrading: getStorageItem(EXTENDED_STORAGE_KEYS.IS_LIVE_TRADING, false),
+      darkMode: getStorageItem(EXTENDED_STORAGE_KEYS.DARK_MODE, false),
+      defaultPair: getStorageItem(EXTENDED_STORAGE_KEYS.DEFAULT_PAIR, 'BTC-USDT'),
+      emailNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.EMAIL_NOTIFICATIONS, true),
+      tradeNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.TRADE_NOTIFICATIONS, true),
+      priceAlerts: getStorageItem(EXTENDED_STORAGE_KEYS.PRICE_ALERTS, false),
+      chatNotifications: getStorageItem(EXTENDED_STORAGE_KEYS.CHAT_NOTIFICATIONS, true),
+      showExtension: getStorageItem(EXTENDED_STORAGE_KEYS.SHOW_EXTENSION, true),
+      chartType: getStorageItem(EXTENDED_STORAGE_KEYS.CHART_TYPE, 'candle'),
+      timeframe: getStorageItem(EXTENDED_STORAGE_KEYS.TIMEFRAME, '5m'),
+      leverage: getStorageItem(EXTENDED_STORAGE_KEYS.LEVERAGE, 1),
+      riskPerTrade: getStorageItem(EXTENDED_STORAGE_KEYS.RISK_PER_TRADE, 2),
+      stopLossPercent: getStorageItem(EXTENDED_STORAGE_KEYS.STOP_LOSS_PERCENT, 2),
+      takeProfitPercent: getStorageItem(EXTENDED_STORAGE_KEYS.TAKE_PROFIT_PERCENT, 4),
+      trailingStopPercent: getStorageItem(EXTENDED_STORAGE_KEYS.TRAILING_STOP_PERCENT, 1),
+      autoTradingEnabled: getStorageItem(EXTENDED_STORAGE_KEYS.AUTO_TRADING_ENABLED, false)
     };
   };
 
@@ -158,7 +160,7 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
       if (canUseStorage) {
         // Persist each updated setting to localStorage
         Object.entries(newSettings).forEach(([key, value]) => {
-          const storageKey = STORAGE_KEYS[key.toUpperCase()] || `poloniex_${key}`;
+          const storageKey = EXTENDED_STORAGE_KEYS[key.toUpperCase() as keyof typeof EXTENDED_STORAGE_KEYS] || `poloniex_${key}`;
           setStorageItem(storageKey, value);
         });
       }
@@ -172,7 +174,7 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
     setSettings(defaultSettings);
     
     if (canUseStorage) {
-      Object.values(STORAGE_KEYS).forEach(key => {
+      Object.values(EXTENDED_STORAGE_KEYS).forEach(key => {
         localStorage.removeItem(key);
       });
     }
@@ -183,8 +185,13 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
     try {
       // Create a copy of settings without sensitive data
       const exportableSettings = { ...settings };
-      delete exportableSettings.apiKey;
-      delete exportableSettings.apiSecret;
+      const sensitiveKeys: (keyof SettingsState)[] = ['apiKey', 'apiSecret'];
+      
+      sensitiveKeys.forEach(key => {
+        if (key in exportableSettings) {
+          delete exportableSettings[key];
+        }
+      });
       
       return JSON.stringify(exportableSettings);
     } catch (error) {
@@ -204,8 +211,12 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
       }
       
       // Don't import sensitive data
-      delete importedSettings.apiKey;
-      delete importedSettings.apiSecret;
+      const sensitiveKeys: (keyof SettingsState)[] = ['apiKey', 'apiSecret'];
+      sensitiveKeys.forEach(key => {
+        if (key in importedSettings) {
+          delete importedSettings[key];
+        }
+      });
       
       // Update settings
       updateSettings(importedSettings);
@@ -224,7 +235,8 @@ export const SettingsProvider: React.FC<SettingsProviderProps> = ({ children })
         resetSettings,
         hasStoredCredentials,
         exportSettings,
-        importSettings
+        importSettings,
+        mockMode: !settings.isLiveTrading // Added for FuturesContext
       }}
     >
       {children}
diff --git a/src/context/TradingContext.tsx b/src/context/TradingContext.tsx
index b689c48..97bcd9c 100644
--- a/src/context/TradingContext.tsx
+++ b/src/context/TradingContext.tsx
@@ -1,9 +1,8 @@
-import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';
-import { Strategy, StrategyType, MarketData, Trade } from '../types';
+import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
+import { Strategy, StrategyType, MarketData, Trade, MovingAverageCrossoverParameters } from '../types';
 import { mockMarketData, mockTrades } from '../data/mockData';
 import { usePoloniexData } from '../hooks/usePoloniexData';
 import { poloniexApi } from '../services/poloniexAPI';
-import { webSocketService } from '../services/websocketService';
 
 interface TradingContextType {
   marketData: MarketData[];
@@ -20,6 +19,7 @@ interface TradingContextType {
   errors: string[];
   addError: (error: string) => void;
   clearErrors: () => void;
+  refreshApiConnection: () => void; // Changed to non-Promise return type to match implementation
 }
 
 const TradingContext = createContext<TradingContextType | undefined>(undefined);
@@ -67,11 +67,13 @@ export const TradingProvider: React.FC<TradingProviderProps> = ({
       name: 'Moving Average Crossover',
       type: StrategyType.MA_CROSSOVER,
       parameters: {
-        shortPeriod: 10,
-        longPeriod: 50,
-        pair: 'BTC-USDT'
-      },
-      created: new Date().toISOString(),
+        fastPeriod: 10,
+        slowPeriod: 50,
+        pair: 'BTC-USDT',
+        timeframe: '1d'
+      } as MovingAverageCrossoverParameters,
+      createdAt: new Date().toISOString(),
+      updatedAt: new Date().toISOString(),
       performance: {
         totalPnL: 12.5,
         winRate: 0.65,
@@ -161,14 +163,14 @@ export const TradingProvider: React.FC<TradingProviderProps> = ({
       accountBalance,
       isLoading,
       isMockMode,
-      refreshApiConnection,
       addStrategy,
       removeStrategy,
       toggleStrategyActive,
       placeOrder,
       errors,
       addError,
-      clearErrors
+      clearErrors,
+      refreshApiConnection
     }}>
       {children}
     </TradingContext.Provider>
@@ -181,4 +183,4 @@ export const useTradingContext = () => {
     throw new Error('useTradingContext must be used within a TradingProvider');
   }
   return context;
-};
\ No newline at end of file
+};
diff --git a/src/data/mockData.ts b/src/data/mockData.ts
index 5fbaa3e..2c5c374 100644
--- a/src/data/mockData.ts
+++ b/src/data/mockData.ts
@@ -1,4 +1,5 @@
 import { MarketData, Strategy, StrategyType, Trade } from '../types';
+import { MovingAverageCrossoverParameters, RSIParameters, BreakoutParameters } from '../types';
 
 export interface Transaction {
   id: string;
@@ -79,11 +80,13 @@ export const mockStrategies: Strategy[] = [
     name: 'BTC Daily MA Crossover',
     type: StrategyType.MA_CROSSOVER,
     parameters: {
-      shortPeriod: 10,
-      longPeriod: 50,
-      pair: 'BTC-USDT'
-    },
-    created: new Date().toISOString(),
+      fastPeriod: 10,
+      slowPeriod: 50,
+      pair: 'BTC-USDT',
+      timeframe: '1d'
+    } as MovingAverageCrossoverParameters,
+    createdAt: new Date().toISOString(),
+    updatedAt: new Date().toISOString(),
     performance: {
       totalPnL: 12.5,
       winRate: 0.65,
@@ -98,9 +101,11 @@ export const mockStrategies: Strategy[] = [
       period: 14,
       overbought: 70,
       oversold: 30,
-      pair: 'ETH-USDT'
-    },
-    created: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
+      pair: 'ETH-USDT',
+      timeframe: '4h'
+    } as RSIParameters,
+    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
+    updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
     performance: {
       totalPnL: 8.2,
       winRate: 0.58,
@@ -114,9 +119,11 @@ export const mockStrategies: Strategy[] = [
     parameters: {
       lookbackPeriod: 24,
       breakoutThreshold: 2.5,
-      pair: 'BTC-USDT'
-    },
-    created: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
+      pair: 'BTC-USDT',
+      timeframe: '1h'
+    } as BreakoutParameters,
+    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
+    updatedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
     performance: {
       totalPnL: 15.7,
       winRate: 0.45,
@@ -171,4 +178,4 @@ export const mockTrades: Trade[] = [
     strategyId: '3',
     status: 'PENDING'
   }
-];
\ No newline at end of file
+];
diff --git a/src/hooks/useApiRequest.ts b/src/hooks/useApiRequest.ts
index 2b411e0..428fda8 100644
--- a/src/hooks/useApiRequest.ts
+++ b/src/hooks/useApiRequest.ts
@@ -1,6 +1,6 @@
 import { useCallback } from 'react';
 import { useErrorHandler } from './useErrorHandler';
-import { sendChromeMessage, getChromeStorage, setChromeStorage } from '@/utils/chromeExtension';
+import { sendChromeMessage, getChromeStorage } from '@/utils/chromeExtension';
 
 /**
  * Custom hook for handling API requests with proper error handling
diff --git a/src/hooks/useFuturesTrading.ts b/src/hooks/useFuturesTrading.ts
index 2a39bfa..68e192b 100644
--- a/src/hooks/useFuturesTrading.ts
+++ b/src/hooks/useFuturesTrading.ts
@@ -1,6 +1,5 @@
 import { useCallback } from 'react';
 import { useErrorHandler } from './useErrorHandler';
-import { PoloniexFuturesAPI } from '@/services/poloniexFuturesAPI';
 import { FuturesOrder, Position } from '@/types';
 
 /**
@@ -8,7 +7,8 @@ import { FuturesOrder, Position } from '@/types';
  */
 export const useFuturesTrading = () => {
   const { errors, isLoading, addError, clearErrors, executeWithErrorHandling } = useErrorHandler();
-  const api = new PoloniexFuturesAPI();
+  // Import the default export directly
+  const api = new (require('@/services/poloniexFuturesAPI').default)();
 
   /**
    * Get account positions with error handling
diff --git a/src/hooks/usePoloniexData.ts b/src/hooks/usePoloniexData.ts
index ca88a0f..1c2bb08 100644
--- a/src/hooks/usePoloniexData.ts
+++ b/src/hooks/usePoloniexData.ts
@@ -22,7 +22,7 @@ interface PoloniexDataHook {
 }
 
 export const usePoloniexData = (initialPair: string = 'BTC-USDT'): PoloniexDataHook => {
-  const { apiKey, apiSecret, isLiveTrading, defaultPair } = useSettings();
+  const { apiKey, apiSecret, isLiveTrading } = useSettings();
   const [marketData, setMarketData] = useState<MarketData[]>(mockMarketData);
   const [trades, setTrades] = useState<Trade[]>(mockTrades);
   const [accountBalance, setAccountBalance] = useState<any>(null);
@@ -372,4 +372,4 @@ export const usePoloniexData = (initialPair: string = 'BTC-USDT'): PoloniexDataH
     fetchAccountBalance,
     refreshApiConnection
   };
-};
\ No newline at end of file
+};
diff --git a/src/pages/Account.tsx b/src/pages/Account.tsx
index a883739..f0e508a 100644
--- a/src/pages/Account.tsx
+++ b/src/pages/Account.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect } from 'react';
+import { useState } from 'react';
 import { 
   Clock, 
   CreditCard, 
@@ -14,7 +14,6 @@ import {
   BarChart4
 } from 'lucide-react';
 import { useTradingContext } from '../context/TradingContext';
-import { useSettings } from '../context/SettingsContext';
 import MockModeNotice from '../components/MockModeNotice';
 import { poloniexApi } from '../services/poloniexAPI';
 import TransactionHistory from '../components/account/TransactionHistory';
@@ -22,8 +21,7 @@ import ApiKeyManagement from '../components/account/ApiKeyManagement';
 import { mockTransactions } from '../data/mockData';
 
 const Account: React.FC = () => {
-  const { accountBalance, isLoading, isMockMode, refreshApiConnection } = useTradingContext();
-  const { apiKey, apiSecret } = useSettings();
+  const { accountBalance, isMockMode } = useTradingContext();
   const [activeTab, setActiveTab] = useState<'overview' | 'transactions' | 'api' | 'settings'>('overview');
   const [isRefreshing, setIsRefreshing] = useState(false);
 
@@ -32,8 +30,8 @@ const Account: React.FC = () => {
     try {
       // Force API credentials reload
       poloniexApi.loadCredentials();
-      // Refresh all data
-      await refreshApiConnection();
+      // Refresh all data - using getAccountBalance instead of loadData
+      await poloniexApi.getAccountBalance();
     } finally {
       setIsRefreshing(false);
     }
@@ -330,7 +328,7 @@ const Account: React.FC = () => {
                             </span>
                           </td>
                           <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
-                            {new Date(transaction.timestamp).toLocaleDateString()}
+                            {transaction.timestamp}
                           </td>
                         </tr>
                       ))}
@@ -356,85 +354,35 @@ const Account: React.FC = () => {
                   <h3 className="font-medium">Security Settings</h3>
                 </div>
                 <div className="p-4 space-y-4">
-                  <div className="flex items-center justify-between">
+                  <div className="flex items-center justify-between p-3 border rounded-md">
                     <div>
                       <h4 className="font-medium">Two-Factor Authentication</h4>
-                      <p className="text-sm text-gray-500 mt-1">
-                        Add an additional layer of security to your account
-                      </p>
+                      <p className="text-sm text-gray-500 mt-1">Secure your account with 2FA</p>
                     </div>
-                    <button className="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm">
+                    <button className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                       Enable
                     </button>
                   </div>
                   
-                  <div className="border-t border-gray-200 pt-4">
-                    <div className="flex items-center justify-between">
-                      <div>
-                        <h4 className="font-medium">Password</h4>
-                        <p className="text-sm text-gray-500 mt-1">
-                          Last updated 45 days ago
-                        </p>
-                      </div>
-                      <button className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm">
-                        Change
-                      </button>
-                    </div>
-                  </div>
-                  
-                  <div className="border-t border-gray-200 pt-4">
-                    <div className="flex items-center justify-between">
-                      <div>
-                        <h4 className="font-medium">Session Management</h4>
-                        <p className="text-sm text-gray-500 mt-1">
-                          You are currently logged in from 1 device
-                        </p>
-                      </div>
-                      <button className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm">
-                        Manage
-                      </button>
+                  <div className="flex items-center justify-between p-3 border rounded-md">
+                    <div>
+                      <h4 className="font-medium">Change Password</h4>
+                      <p className="text-sm text-gray-500 mt-1">Update your account password</p>
                     </div>
+                    <button className="px-3 py-1 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">
+                      Update
+                    </button>
                   </div>
                   
-                  <div className="border-t border-gray-200 pt-4">
-                    <div className="flex items-center justify-between">
-                      <div>
-                        <h4 className="font-medium">Activity Log</h4>
-                        <p className="text-sm text-gray-500 mt-1">
-                          Monitor login activity and security events
-                        </p>
-                      </div>
-                      <button className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm">
-                        View Log
-                      </button>
-                    </div>
-                  </div>
-                </div>
-              </div>
-              
-              <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
-                <div className="px-4 py-3 bg-gray-50 border-b border-gray-200">
-                  <h3 className="font-medium">Trading Limits</h3>
-                </div>
-                <div className="p-4">
-                  <div className="grid grid-cols-2 gap-6 mb-4">
+                  <div className="flex items-center justify-between p-3 border rounded-md">
                     <div>
-                      <h4 className="text-sm font-medium text-gray-500">Daily Withdrawal Limit</h4>
-                      <div className="flex items-center mt-1">
-                        <span className="font-medium">{formatCurrency(5000)}</span>
-                      </div>
-                    </div>
-                    <div>
-                      <h4 className="text-sm font-medium text-gray-500">Max Position Size</h4>
-                      <div className="flex items-center mt-1">
-                        <span className="font-medium">{formatCurrency(50000)}</span>
-                      </div>
+                      <h4 className="font-medium">Login History</h4>
+                      <p className="text-sm text-gray-500 mt-1">View your recent login activity</p>
                     </div>
+                    <button className="px-3 py-1 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">
+                      View
+                    </button>
                   </div>
-                  
-                  <button className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 text-sm">
-                    Request Limit Increase
-                  </button>
                 </div>
               </div>
             </div>
@@ -445,4 +393,4 @@ const Account: React.FC = () => {
   );
 };
 
-export default Account;
\ No newline at end of file
+export default Account;
diff --git a/src/pages/Settings.tsx b/src/pages/Settings.tsx
index a64e603..8ed2f79 100644
--- a/src/pages/Settings.tsx
+++ b/src/pages/Settings.tsx
@@ -1,7 +1,6 @@
-import React, { useState, useEffect } from 'react';
+import { useState, useEffect } from 'react';
 import { 
   User, 
-  Lock, 
   Bell, 
   Key, 
   MessageSquare,
@@ -375,4 +374,4 @@ const Settings: React.FC = () => {
   );
 };
 
-export default Settings;
\ No newline at end of file
+export default Settings;
diff --git a/src/pages/Strategies.tsx b/src/pages/Strategies.tsx
index b1ec9c8..8292033 100644
--- a/src/pages/Strategies.tsx
+++ b/src/pages/Strategies.tsx
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import { useState } from 'react';
 import { useTradingContext } from '../context/TradingContext';
 import { Strategy, StrategyType } from '../types';
 import { Plus, Zap, Settings as SettingsIcon, BarChart2, Play, Pause, Trash2, History, Sparkles } from 'lucide-react';
@@ -37,7 +37,8 @@ const Strategies: React.FC = () => {
   const optimizeStrategy = async (strategy: Strategy) => {
     setIsOptimizing(true);
     try {
-      const parameterRanges = {
+      // Fix the parameter ranges to match the expected type
+      const parameterRanges: Record<string, [number, number, number]> = {
         shortPeriod: [5, 20, 5],
         longPeriod: [20, 100, 20]
       };
@@ -75,7 +76,7 @@ const Strategies: React.FC = () => {
     setShowNewStrategyForm(false);
   };
   
-  const getStrategyTypeIcon = (type: StrategyType) => {
+  const getStrategyTypeIcon = (type: string) => {
     switch (type) {
       case StrategyType.MA_CROSSOVER:
         return <Zap className="h-5 w-5 text-blue-500" />;
@@ -222,4 +223,4 @@ const Strategies: React.FC = () => {
   );
 };
 
-export default Strategies;
\ No newline at end of file
+export default Strategies;
diff --git a/src/services/automatedTrading.ts b/src/services/automatedTrading.ts
index 81d3520..f0283e8 100644
--- a/src/services/automatedTrading.ts
+++ b/src/services/automatedTrading.ts
@@ -1,4 +1,4 @@
-import { Strategy, MarketData, Trade } from '@/types';
+import { Strategy } from '@/types';
 import { executeStrategy } from '@/utils/strategyExecutors';
 import { poloniexApi } from '@/services/poloniexAPI';
 import { logger } from '@/utils/logger';
@@ -105,7 +105,7 @@ class AutomatedTradingService {
       }
 
       // Execute each active strategy
-      for (const [id, strategy] of this.activeStrategies) {
+      for (const strategy of this.activeStrategies.values()) {
         // Get market data
         const marketData = await poloniexApi.getMarketData(strategy.parameters.pair);
         
@@ -209,4 +209,4 @@ class AutomatedTradingService {
   }
 }
 
-export const automatedTrading = AutomatedTradingService.getInstance();
\ No newline at end of file
+export const automatedTrading = AutomatedTradingService.getInstance();
diff --git a/src/services/websocketService.ts b/src/services/websocketService.ts
index 41557d4..8f0fb7a 100644
--- a/src/services/websocketService.ts
+++ b/src/services/websocketService.ts
@@ -35,7 +35,17 @@ class WebSocketService {
   // In a real application, this would be your WebSocket server URL
   private readonly SOCKET_URL = 'http://localhost:3000';
   
-  private constructor() {}
+  private constructor() {
+    // Initialize offline data from localStorage if available
+    try {
+      const savedData = localStorage.getItem('websocket_offline_data');
+      if (savedData) {
+        this.offlineData = new Map(JSON.parse(savedData));
+      }
+    } catch (error) {
+      console.error('Error loading offline data:', error);
+    }
+  }
   
   public static getInstance(): WebSocketService {
     if (!WebSocketService.instance) {
@@ -215,20 +225,6 @@ class WebSocketService {
     }
   }
   
-  /**
-   * Load offline data
-   */
-  private loadOfflineData(): void {
-    try {
-      const savedData = localStorage.getItem('websocket_offline_data');
-      if (savedData) {
-        this.offlineData = new Map(JSON.parse(savedData));
-      }
-    } catch (error) {
-      console.error('Error loading offline data:', error);
-    }
-  }
-  
   /**
    * Subscribe to market data for a specific pair
    */
@@ -356,4 +352,4 @@ class WebSocketService {
 }
 
 // Export a singleton instance
-export const webSocketService = WebSocketService.getInstance();
\ No newline at end of file
+export const webSocketService = WebSocketService.getInstance();
diff --git a/src/utils/chromeExtension.ts b/src/utils/chromeExtension.ts
index 1abb504..4fe8743 100644
--- a/src/utils/chromeExtension.ts
+++ b/src/utils/chromeExtension.ts
@@ -1,28 +1,7 @@
 // No need for React import in this utility file
 
-// Define a type for Chrome extension API to avoid type errors
-declare global {
-  interface Window {
-    chrome?: {
-      runtime?: {
-        sendMessage?: (message: any, callback?: (response: any) => void) => void;
-        onMessage?: {
-          addListener?: (callback: (message: any, sender: any, sendResponse: any) => void) => void;
-        };
-      };
-      tabs?: {
-        query?: (queryInfo: any, callback: (tabs: any[]) => void) => void;
-        create?: (createProperties: any, callback?: (tab: any) => void) => void;
-      };
-      storage?: {
-        local?: {
-          get?: (keys: string | string[] | object | null, callback: (items: any) => void) => void;
-          set?: (items: object, callback?: () => void) => void;
-        };
-      };
-    };
-  }
-}
+// Use a different approach to avoid conflicts with @types/chrome
+// Instead of extending Window interface, use runtime checks
 
 /**
  * Safely checks if Chrome extension API is available
@@ -70,7 +49,8 @@ export const getChromeStorage = (key: string, callback: (data: any) => void): vo
  */
 export const setChromeStorage = (data: object, callback?: () => void): void => {
   if (isChromeExtension() && window.chrome?.storage?.local?.set) {
-    window.chrome.storage.local.set(data, callback);
+    // Fix the callback type issue by providing a non-undefined callback
+    window.chrome.storage.local.set(data, callback || (() => {}));
   } else {
     console.warn('Chrome storage API not available');
     if (callback) {
-- 
2.34.1

